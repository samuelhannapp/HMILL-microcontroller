
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba8  08006ba8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00017b74  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20017bec  20017bec  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bf2f  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b73  00000000  00000000  0002c01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd0  00000000  00000000  0002db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f7  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002106b  00000000  00000000  0002f257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ccc8  00000000  00000000  000502c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd25b  00000000  00000000  0005cf8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003968  00000000  00000000  0012a1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0012db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b78 	.word	0x08006b78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08006b78 	.word	0x08006b78

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e40:	f3bf 8f4f 	dsb	sy
}
 8000e44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <__NVIC_SystemReset+0x24>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e4e:	4904      	ldr	r1, [pc, #16]	; (8000e60 <__NVIC_SystemReset+0x24>)
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_SystemReset+0x28>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e56:	f3bf 8f4f 	dsb	sy
}
 8000e5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <__NVIC_SystemReset+0x20>
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	05fa0004 	.word	0x05fa0004

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f003 f95e 	bl	800412c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f82a 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 fba8 	bl	80015c8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e78:	f000 f890 	bl	8000f9c <MX_CAN1_Init>
  MX_TIM9_Init();
 8000e7c:	f000 fa28 	bl	80012d0 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000e80:	f000 fa6c 	bl	800135c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e84:	f000 fabe 	bl	8001404 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000e88:	f000 fb10 	bl	80014ac <MX_TIM12_Init>
  MX_TIM13_Init();
 8000e8c:	f000 fb52 	bl	8001534 <MX_TIM13_Init>
  MX_TIM3_Init();
 8000e90:	f000 f92a 	bl	80010e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e94:	f000 f8d4 	bl	8001040 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e98:	f000 f9a4 	bl	80011e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <main+0x58>)
 8000e9e:	f003 fb93 	bl	80045c8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <main+0x58>)
 8000ea6:	f003 fbd3 	bl	8004650 <HAL_CAN_ActivateNotification>

  // I changed this on 28.09.2023
  //commands&=~START_PROGRAM;
  flags_global_mc|=MACHINE_HOMED;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0x5c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <main+0x5c>)
 8000eb4:	6013      	str	r3, [r2, #0]
  //flags|=FIRST_MOVE_NO_Z;




  setup();
 8000eb6:	f000 fc9d 	bl	80017f4 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check_command();
 8000eba:	f000 fcf3 	bl	80018a4 <check_command>
 8000ebe:	e7fc      	b.n	8000eba <main+0x52>
 8000ec0:	20000094 	.word	0x20000094
 8000ec4:	20017a44 	.word	0x20017a44

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 fd16 	bl	8006908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 f8a6 	bl	80050a0 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5a:	f001 f94d 	bl	80021f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fb07 	bl	8005590 <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f88:	f001 f936 	bl	80021f8 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3750      	adds	r7, #80	; 0x50
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <MX_CAN1_Init+0xa0>)
 8000fa6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fbc:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000fc0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fc8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000ff0:	f003 f90e 	bl	8004210 <HAL_CAN_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ffa:	f001 f8fd 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank=10;
 8001002:	230a      	movs	r3, #10
 8001004:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh=0;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow=0;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh=0;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow=0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank=0;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1,&canfilterconfig);
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_CAN1_Init+0x9c>)
 800102c:	f003 f9ec 	bl	8004408 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000094 	.word	0x20000094
 800103c:	40006400 	.word	0x40006400

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f005 fc5a 	bl	8006908 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_TIM2_Init+0xa4>)
 800105e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_TIM2_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_TIM2_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM2_Init+0xa4>)
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM2_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_TIM2_Init+0xa4>)
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001084:	2303      	movs	r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_TIM2_Init+0xa4>)
 80010b0:	f004 fcf8 	bl	8005aa4 <HAL_TIM_Encoder_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010ba:	f001 f89d 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM2_Init+0xa4>)
 80010cc:	f005 fb8c 	bl	80067e8 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010d6:	f001 f88f 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	; 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_TIM3_Init+0xf4>)
 800111a:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <MX_TIM3_Init+0xf8>)
 800111c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <MX_TIM3_Init+0xf4>)
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_TIM3_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800113e:	4827      	ldr	r0, [pc, #156]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001140:	f004 fc12 	bl	8005968 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800114a:	f001 f855 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001158:	4619      	mov	r1, r3
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <MX_TIM3_Init+0xf4>)
 800115c:	f004 ff3a 	bl	8005fd4 <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001166:	f001 f847 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM3_Init+0xf4>)
 800116c:	f004 fc4b 	bl	8005a06 <HAL_TIM_OC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001176:	f001 f83f 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_TIM3_Init+0xf4>)
 800118a:	f005 fb2d 	bl	80067e8 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f001 f830 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001198:	2330      	movs	r3, #48	; 0x30
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <MX_TIM3_Init+0xf4>)
 80011b0:	f004 feb4 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ba:	f001 f81d 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->ARR=60000;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_TIM3_Init+0xf8>)
 80011c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->PSC=10;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_TIM3_Init+0xf8>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM3_Init+0xf4>)
 80011ce:	f001 f9bd 	bl	800254c <HAL_TIM_MspPostInit>

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000104 	.word	0x20000104
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <MX_TIM4_Init+0xe8>)
 8001218:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <MX_TIM4_Init+0xe4>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800123a:	4823      	ldr	r0, [pc, #140]	; (80012c8 <MX_TIM4_Init+0xe4>)
 800123c:	f004 fb94 	bl	8005968 <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001246:	f000 ffd7 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001254:	4619      	mov	r1, r3
 8001256:	481c      	ldr	r0, [pc, #112]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001258:	f004 febc 	bl	8005fd4 <HAL_TIM_ConfigClockSource>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001262:	f000 ffc9 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001268:	f004 fbcd 	bl	8005a06 <HAL_TIM_OC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001272:	f000 ffc1 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	4619      	mov	r1, r3
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001286:	f005 faaf 	bl	80067e8 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001290:	f000 ffb2 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001294:	2330      	movs	r3, #48	; 0x30
 8001296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM4_Init+0xe4>)
 80012ac:	f004 fe36 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80012b6:	f000 ff9f 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM4_Init+0xe4>)
 80012bc:	f001 f946 	bl	800254c <HAL_TIM_MspPostInit>

}
 80012c0:	bf00      	nop
 80012c2:	3738      	adds	r7, #56	; 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000014c 	.word	0x2000014c
 80012cc:	40000800 	.word	0x40000800

080012d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM9_Init+0x84>)
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_TIM9_Init+0x88>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM9_Init+0x84>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_TIM9_Init+0x84>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM9_Init+0x84>)
 80012fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001300:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_TIM9_Init+0x84>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_TIM9_Init+0x84>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_TIM9_Init+0x84>)
 8001310:	f004 fb79 	bl	8005a06 <HAL_TIM_OC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800131a:	f000 ff6d 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800131e:	2330      	movs	r3, #48	; 0x30
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM9_Init+0x84>)
 8001336:	f004 fdf1 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001340:	f000 ff5a 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM9_Init+0x84>)
 8001346:	f001 f901 	bl	800254c <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000194 	.word	0x20000194
 8001358:	40014000 	.word	0x40014000

0800135c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <MX_TIM10_Init+0xa4>)
 8001378:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_TIM10_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <MX_TIM10_Init+0xa0>)
 800139c:	f004 fae4 	bl	8005968 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80013a6:	f000 ff27 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM10_Init+0xa0>)
 80013ac:	f004 fb2b 	bl	8005a06 <HAL_TIM_OC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80013b6:	f000 ff1f 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013ba:	2330      	movs	r3, #48	; 0x30
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <MX_TIM10_Init+0xa0>)
 80013d2:	f004 fda3 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013dc:	f000 ff0c 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  TIM10->ARR=60000;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_TIM10_Init+0xa4>)
 80013e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM10->PSC=5;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <MX_TIM10_Init+0xa4>)
 80013ea:	2205      	movs	r2, #5
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM10_Init+0xa0>)
 80013f0:	f001 f8ac 	bl	800254c <HAL_TIM_MspPostInit>

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001dc 	.word	0x200001dc
 8001400:	40014400 	.word	0x40014400

08001404 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_TIM11_Init+0xa4>)
 8001420:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001444:	f004 fa90 	bl	8005968 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800144e:	f000 fed3 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001454:	f004 fad7 	bl	8005a06 <HAL_TIM_OC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800145e:	f000 fecb 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001462:	2330      	movs	r3, #48	; 0x30
 8001464:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800147a:	f004 fd4f 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001484:	f000 feb8 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  TIM11->ARR=60000;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_TIM11_Init+0xa4>)
 800148a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM11->PSC=3;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <MX_TIM11_Init+0xa4>)
 8001492:	2203      	movs	r2, #3
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001498:	f001 f858 	bl	800254c <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000224 	.word	0x20000224
 80014a8:	40014800 	.word	0x40014800

080014ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_TIM12_Init+0x80>)
 80014c6:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <MX_TIM12_Init+0x84>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM12_Init+0x80>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_TIM12_Init+0x80>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_TIM12_Init+0x80>)
 80014d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_TIM12_Init+0x80>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_TIM12_Init+0x80>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <MX_TIM12_Init+0x80>)
 80014ec:	f004 fa8b 	bl	8005a06 <HAL_TIM_OC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80014f6:	f000 fe7f 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 65000;
 80014fe:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001502:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <MX_TIM12_Init+0x80>)
 8001514:	f004 fd02 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800151e:	f000 fe6b 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000026c 	.word	0x2000026c
 8001530:	40001800 	.word	0x40001800

08001534 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_TIM13_Init+0x8c>)
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <MX_TIM13_Init+0x90>)
 8001550:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_TIM13_Init+0x8c>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_TIM13_Init+0x8c>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001572:	4813      	ldr	r0, [pc, #76]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001574:	f004 f9f8 	bl	8005968 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800157e:	f000 fe3b 	bl	80021f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001582:	480f      	ldr	r0, [pc, #60]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001584:	f004 fa3f 	bl	8005a06 <HAL_TIM_OC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800158e:	f000 fe33 	bl	80021f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_TIM13_Init+0x8c>)
 80015aa:	f004 fcb7 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80015b4:	f000 fe20 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002b4 	.word	0x200002b4
 80015c4:	40001c00 	.word	0x40001c00

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b61      	ldr	r3, [pc, #388]	; (8001768 <MX_GPIO_Init+0x1a0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a60      	ldr	r2, [pc, #384]	; (8001768 <MX_GPIO_Init+0x1a0>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <MX_GPIO_Init+0x1a0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a59      	ldr	r2, [pc, #356]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <MX_GPIO_Init+0x1a0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <MX_GPIO_Init+0x1a0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a52      	ldr	r2, [pc, #328]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a4b      	ldr	r2, [pc, #300]	; (8001768 <MX_GPIO_Init+0x1a0>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a44      	ldr	r2, [pc, #272]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <MX_GPIO_Init+0x1a0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001686:	2200      	movs	r2, #0
 8001688:	211f      	movs	r1, #31
 800168a:	4838      	ldr	r0, [pc, #224]	; (800176c <MX_GPIO_Init+0x1a4>)
 800168c:	f003 fcee 	bl	800506c <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2101      	movs	r1, #1
 8001694:	4836      	ldr	r0, [pc, #216]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001696:	f003 fce9 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800169a:	2200      	movs	r2, #0
 800169c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016a0:	4834      	ldr	r0, [pc, #208]	; (8001774 <MX_GPIO_Init+0x1ac>)
 80016a2:	f003 fce3 	bl	800506c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 80016a6:	231f      	movs	r3, #31
 80016a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	482b      	ldr	r0, [pc, #172]	; (800176c <MX_GPIO_Init+0x1a4>)
 80016be:	f003 fb39 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80016da:	f003 fb2b 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016de:	2302      	movs	r3, #2
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	481f      	ldr	r0, [pc, #124]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80016f2:	f003 fb1f 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <MX_GPIO_Init+0x1b0>)
 800170c:	f003 fb12 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 BOOT1_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|BOOT1_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8001710:	231e      	movs	r3, #30
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	4816      	ldr	r0, [pc, #88]	; (800177c <MX_GPIO_Init+0x1b4>)
 8001724:	f003 fb06 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001728:	f24f 0310 	movw	r3, #61456	; 0xf010
 800172c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_GPIO_Init+0x1ac>)
 8001742:	f003 faf7 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|OTG_FS_OverCurrent_Pin;
 8001746:	2324      	movs	r3, #36	; 0x24
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_GPIO_Init+0x1ac>)
 800175a:	f003 faeb 	bl	8004d34 <HAL_GPIO_Init>

}
 800175e:	bf00      	nop
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40021000 	.word	0x40021000
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <start_first_move>:

/* USER CODE BEGIN 4 */

static void start_first_move()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	//thats to reinitialize the timers
	//because before the GPIO of the Compare pins
	//where otherwise used
	MX_TIM9_Init();
 8001784:	f7ff fda4 	bl	80012d0 <MX_TIM9_Init>
	MX_TIM10_Init();
 8001788:	f7ff fde8 	bl	800135c <MX_TIM10_Init>
	MX_TIM11_Init();
 800178c:	f7ff fe3a 	bl	8001404 <MX_TIM11_Init>
	MX_TIM12_Init();
 8001790:	f7ff fe8c 	bl	80014ac <MX_TIM12_Init>
	MX_TIM3_Init();
 8001794:	f7ff fca8 	bl	80010e8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001798:	f7ff fd24 	bl	80011e4 <MX_TIM4_Init>
	commands&=~START_PROGRAM;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <start_first_move+0x68>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <start_first_move+0x68>)
 80017a6:	6013      	str	r3, [r2, #0]
	flags_global_mc&=~FIRST_MOVE_IN_PROCESS;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <start_first_move+0x6c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <start_first_move+0x6c>)
 80017b2:	6013      	str	r3, [r2, #0]
	flags_global_mc|=PROGRAM_RUNNING;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <start_first_move+0x6c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <start_first_move+0x6c>)
 80017be:	6013      	str	r3, [r2, #0]
	flags_global_mc&=~BUFFER_FULL;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <start_first_move+0x6c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <start_first_move+0x6c>)
 80017ca:	6013      	str	r3, [r2, #0]
	//thats the timer to start everything
	init_interrupt_enable();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <start_first_move+0x70>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <start_first_move+0x70>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	60d3      	str	r3, [r2, #12]
	init_compare_enable();
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <start_first_move+0x70>)
 80017da:	2201      	movs	r2, #1
 80017dc:	621a      	str	r2, [r3, #32]
	init_timer_start();
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <start_first_move+0x70>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
	//but this is obsolete I think
	/*
	position_timer_compare_enable();
	position_timer_start();
	*/
	return;
 80017e4:	bf00      	nop
}
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20017a48 	.word	0x20017a48
 80017ec:	20017a44 	.word	0x20017a44
 80017f0:	40001800 	.word	0x40001800

080017f4 <setup>:

static void setup()
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80017f8:	213c      	movs	r1, #60	; 0x3c
 80017fa:	4820      	ldr	r0, [pc, #128]	; (800187c <setup+0x88>)
 80017fc:	f004 f9f8 	bl	8005bf0 <HAL_TIM_Encoder_Start>
	//TIM2->CR1=1;

	flags_global_mc|=WRITE_CTR_UNDER_READ_CTR;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <setup+0x8c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <setup+0x8c>)
 800180a:	6013      	str	r3, [r2, #0]
	flags_global_mc|=FIRST_MOVE;
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <setup+0x8c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <setup+0x8c>)
 8001816:	6013      	str	r3, [r2, #0]

	x_interrupt_enable();
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <setup+0x90>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <setup+0x90>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	60d3      	str	r3, [r2, #12]
	y_interrupt_enable();
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <setup+0x94>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <setup+0x94>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	60d3      	str	r3, [r2, #12]
	z_interrupt_enable();
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <setup+0x98>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a15      	ldr	r2, [pc, #84]	; (800188c <setup+0x98>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	60d3      	str	r3, [r2, #12]
	b_interrupt_enable();
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <setup+0x9c>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a13      	ldr	r2, [pc, #76]	; (8001890 <setup+0x9c>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	60d3      	str	r3, [r2, #12]
	c_interrupt_enable();
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <setup+0xa0>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a11      	ldr	r2, [pc, #68]	; (8001894 <setup+0xa0>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	60d3      	str	r3, [r2, #12]
	manual_interrupt_enable();
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <setup+0xa4>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <setup+0xa4>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	60d3      	str	r3, [r2, #12]
	//position_timer_interrupt_enable();



	//I have to figure out why that is so important
	tx_header.DLC=8;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <setup+0xa8>)
 8001862:	2208      	movs	r2, #8
 8001864:	611a      	str	r2, [r3, #16]
	tx_header.IDE=CAN_ID_STD;
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <setup+0xa8>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
	tx_header.RTR=CAN_RTR_DATA;
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <setup+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
	CAN1->sTxMailBox->TDTR=8;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <setup+0xac>)
 8001874:	2208      	movs	r2, #8
 8001876:	605a      	str	r2, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000bc 	.word	0x200000bc
 8001880:	20017a44 	.word	0x20017a44
 8001884:	40014000 	.word	0x40014000
 8001888:	40014400 	.word	0x40014400
 800188c:	40014800 	.word	0x40014800
 8001890:	40000400 	.word	0x40000400
 8001894:	40000800 	.word	0x40000800
 8001898:	40001c00 	.word	0x40001c00
 800189c:	200002fc 	.word	0x200002fc
 80018a0:	40006580 	.word	0x40006580

080018a4 <check_command>:

static void check_command()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
	if(!commands)
 80018aa:	4ba5      	ldr	r3, [pc, #660]	; (8001b40 <check_command+0x29c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 813b 	beq.w	8001b2a <check_command+0x286>
		return;

	if(commands&RESET_MICROCONTROLLER)
 80018b4:	4ba2      	ldr	r3, [pc, #648]	; (8001b40 <check_command+0x29c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <check_command+0x20>
		NVIC_SystemReset();
 80018c0:	f7ff fabc 	bl	8000e3c <__NVIC_SystemReset>

	//POSITION STANDPOINT REQUESTS
	if(commands&X_POSITION_REQUEST_FLAG){
 80018c4:	4b9e      	ldr	r3, [pc, #632]	; (8001b40 <check_command+0x29c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00f      	beq.n	80018f0 <check_command+0x4c>
		uint32_t input_nr=(uint32_t)x_standpoint;
 80018d0:	4b9c      	ldr	r3, [pc, #624]	; (8001b44 <check_command+0x2a0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	607b      	str	r3, [r7, #4]
		send_position_message(input_nr,0,CAN_ID_GET_X_POSITION_ANSWER); //from where the standpoint is should be considered!!
 80018d6:	f04f 6298 	mov.w	r2, #79691776	; 0x4c00000
 80018da:	2100      	movs	r1, #0
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fc0b 	bl	80020f8 <send_position_message>
		commands&=~X_POSITION_REQUEST_FLAG;
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <check_command+0x29c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	4a95      	ldr	r2, [pc, #596]	; (8001b40 <check_command+0x29c>)
 80018ec:	6013      	str	r3, [r2, #0]
		return;
 80018ee:	e123      	b.n	8001b38 <check_command+0x294>
	}
	if(commands&Y_POSITION_REQUEST_FLAG){
 80018f0:	4b93      	ldr	r3, [pc, #588]	; (8001b40 <check_command+0x29c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00f      	beq.n	800191c <check_command+0x78>
		uint32_t input_nr=(uint32_t)y_standpoint;
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <check_command+0x2a4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60bb      	str	r3, [r7, #8]
		send_position_message(input_nr,0,CAN_ID_GET_Y_POSITION_ANSWER);
 8001902:	f04f 629c 	mov.w	r2, #81788928	; 0x4e00000
 8001906:	2100      	movs	r1, #0
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f000 fbf5 	bl	80020f8 <send_position_message>
		commands&=~Y_POSITION_REQUEST_FLAG;
 800190e:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <check_command+0x29c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0302 	bic.w	r3, r3, #2
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <check_command+0x29c>)
 8001918:	6013      	str	r3, [r2, #0]

		return;
 800191a:	e10d      	b.n	8001b38 <check_command+0x294>
	}
	if(commands&Z_POSITION_REQUEST_FLAG){
 800191c:	4b88      	ldr	r3, [pc, #544]	; (8001b40 <check_command+0x29c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00f      	beq.n	8001948 <check_command+0xa4>
		uint32_t input_nr=(uint32_t)z_standpoint;
 8001928:	4b88      	ldr	r3, [pc, #544]	; (8001b4c <check_command+0x2a8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
		send_position_message(input_nr,0,CAN_ID_GET_Z_POSITION_ANSWER);
 800192e:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 8001932:	2100      	movs	r1, #0
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fbdf 	bl	80020f8 <send_position_message>
		commands&=~Z_POSITION_REQUEST_FLAG;
 800193a:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <check_command+0x29c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0304 	bic.w	r3, r3, #4
 8001942:	4a7f      	ldr	r2, [pc, #508]	; (8001b40 <check_command+0x29c>)
 8001944:	6013      	str	r3, [r2, #0]

		return;
 8001946:	e0f7      	b.n	8001b38 <check_command+0x294>
	}
	if(commands&B_POSITION_REQUEST_FLAG){
 8001948:	4b7d      	ldr	r3, [pc, #500]	; (8001b40 <check_command+0x29c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00f      	beq.n	8001974 <check_command+0xd0>
		uint32_t input_nr=(uint32_t)b_standpoint;
 8001954:	4b7e      	ldr	r3, [pc, #504]	; (8001b50 <check_command+0x2ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
		send_position_message(input_nr,0,CAN_ID_B_POSITION_ANSWER);
 800195a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800195e:	2100      	movs	r1, #0
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f000 fbc9 	bl	80020f8 <send_position_message>
		commands&=~B_POSITION_REQUEST_FLAG;
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <check_command+0x29c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800196e:	4a74      	ldr	r2, [pc, #464]	; (8001b40 <check_command+0x29c>)
 8001970:	6013      	str	r3, [r2, #0]

		return;
 8001972:	e0e1      	b.n	8001b38 <check_command+0x294>
	}
	if(commands&C_POSITION_REQUEST_FLAG){
 8001974:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <check_command+0x29c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00f      	beq.n	80019a0 <check_command+0xfc>
		uint32_t input_nr=(uint32_t)c_standpoint;
 8001980:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <check_command+0x2b0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	617b      	str	r3, [r7, #20]
		send_position_message(input_nr,0,CAN_ID_C_POSITION_ANSWER);
 8001986:	f04f 6202 	mov.w	r2, #136314880	; 0x8200000
 800198a:	2100      	movs	r1, #0
 800198c:	6978      	ldr	r0, [r7, #20]
 800198e:	f000 fbb3 	bl	80020f8 <send_position_message>
		commands&=~C_POSITION_REQUEST_FLAG;
 8001992:	4b6b      	ldr	r3, [pc, #428]	; (8001b40 <check_command+0x29c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800199a:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <check_command+0x29c>)
 800199c:	6013      	str	r3, [r2, #0]

		return;
 800199e:	e0cb      	b.n	8001b38 <check_command+0x294>
	}


	if(!NO_ACTIVE_MOVE)	//that can also be switched on when a programm is runnung
 80019a0:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <check_command+0x2b4>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b6d      	ldr	r3, [pc, #436]	; (8001b5c <check_command+0x2b8>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 80c0 	bne.w	8001b2e <check_command+0x28a>
		return;
	else if(commands&HOMING_CYCLE_FLAG){
 80019ae:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <check_command+0x29c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <check_command+0x11c>
		homing_cycle();			//thats hardware goes to hardwareswitches
 80019ba:	f000 fae3 	bl	8001f84 <homing_cycle>
		return;
 80019be:	e0bb      	b.n	8001b38 <check_command+0x294>
	}

	//that has to be done from the home_position after the machine was homed
	if(commands&MEASURE_TOOL_FLAG){
 80019c0:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <check_command+0x29c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <check_command+0x12e>
		measure_tool();
 80019cc:	f000 fb40 	bl	8002050 <measure_tool>
		return;
 80019d0:	e0b2      	b.n	8001b38 <check_command+0x294>
	}

	//POSITION MOVE_REQUESTS
	else if(commands&MOVE_X_POSITIVE){
 80019d2:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <check_command+0x29c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <check_command+0x14a>
		move_axis(increment,POSITIVE,'x');
 80019de:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <check_command+0x2bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2278      	movs	r2, #120	; 0x78
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f8bc 	bl	8001b64 <move_axis>
		return;
 80019ec:	e0a4      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_X_NEGATIVE){
 80019ee:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <check_command+0x29c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <check_command+0x166>
		move_axis(increment,NEGATIVE,'x');
 80019fa:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <check_command+0x2bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2278      	movs	r2, #120	; 0x78
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f8ae 	bl	8001b64 <move_axis>
		return;
 8001a08:	e096      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_Y_POSITIVE){
 8001a0a:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <check_command+0x29c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <check_command+0x182>
		move_axis(increment,POSITIVE,'y');
 8001a16:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <check_command+0x2bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2279      	movs	r2, #121	; 0x79
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f8a0 	bl	8001b64 <move_axis>
		return;
 8001a24:	e088      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_Y_NEGATIVE){
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <check_command+0x29c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <check_command+0x19e>
		move_axis(increment,NEGATIVE,'y');
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <check_command+0x2bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2279      	movs	r2, #121	; 0x79
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f892 	bl	8001b64 <move_axis>
		return;
 8001a40:	e07a      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_Z_POSITIVE){
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <check_command+0x29c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <check_command+0x1ba>
		move_axis(increment,POSITIVE,'z');
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <check_command+0x2bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	227a      	movs	r2, #122	; 0x7a
 8001a54:	2101      	movs	r1, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f884 	bl	8001b64 <move_axis>
		return;
 8001a5c:	e06c      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_Z_NEGATIVE){
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <check_command+0x29c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <check_command+0x1d6>
		move_axis(increment,NEGATIVE,'z');
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <check_command+0x2bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	227a      	movs	r2, #122	; 0x7a
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f876 	bl	8001b64 <move_axis>
		return;
 8001a78:	e05e      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_B_POSITIVE){
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <check_command+0x29c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <check_command+0x1f2>
		move_axis(increment,POSITIVE,'b');
 8001a86:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <check_command+0x2bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2262      	movs	r2, #98	; 0x62
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f868 	bl	8001b64 <move_axis>
		return;
 8001a94:	e050      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_B_NEGATIVE){
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <check_command+0x29c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <check_command+0x20e>
		move_axis(increment,NEGATIVE,'b');
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <check_command+0x2bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2262      	movs	r2, #98	; 0x62
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f85a 	bl	8001b64 <move_axis>
		return;
 8001ab0:	e042      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_C_POSITIVE){
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <check_command+0x29c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <check_command+0x22a>
		move_axis(increment,POSITIVE,'c');
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <check_command+0x2bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2263      	movs	r2, #99	; 0x63
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f84c 	bl	8001b64 <move_axis>
		return;
 8001acc:	e034      	b.n	8001b38 <check_command+0x294>
	}
	else if(commands&MOVE_C_NEGATIVE){
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <check_command+0x29c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <check_command+0x246>
		move_axis(increment,NEGATIVE,'c');
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <check_command+0x2bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2263      	movs	r2, #99	; 0x63
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f83e 	bl	8001b64 <move_axis>
		return;
 8001ae8:	e026      	b.n	8001b38 <check_command+0x294>
	}

	//HOME REQUESTS
	if(commands&GO_TO_HOME){
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <check_command+0x29c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <check_command+0x258>
		go_to_home_position(); //thats software, just goes back to targetxyz 0
 8001af6:	f000 f9f7 	bl	8001ee8 <go_to_home_position>
		return;
 8001afa:	e01d      	b.n	8001b38 <check_command+0x294>
	}


	//PROGRAM START REQUEST

	else if(commands&START_PROGRAM){
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <check_command+0x29c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d014      	beq.n	8001b32 <check_command+0x28e>
		if(!(flags_global_mc&BUFFER_FILLING_IN_PROGRESS))
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <check_command+0x2b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <check_command+0x274>
			start_program();
 8001b14:	f000 f9ba 	bl	8001e8c <start_program>
		if(flags_global_mc&BUFFER_FULL)
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <check_command+0x2b4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <check_command+0x292>
			start_first_move();
 8001b24:	f7ff fe2c 	bl	8001780 <start_first_move>
		return;
 8001b28:	e005      	b.n	8001b36 <check_command+0x292>
		return;
 8001b2a:	bf00      	nop
 8001b2c:	e004      	b.n	8001b38 <check_command+0x294>
		return;
 8001b2e:	bf00      	nop
 8001b30:	e002      	b.n	8001b38 <check_command+0x294>
	}
			
	return;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <check_command+0x294>
		return;
 8001b36:	bf00      	nop
}
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20017a48 	.word	0x20017a48
 8001b44:	20017a78 	.word	0x20017a78
 8001b48:	20017a7c 	.word	0x20017a7c
 8001b4c:	20017a80 	.word	0x20017a80
 8001b50:	20017a84 	.word	0x20017a84
 8001b54:	20017a88 	.word	0x20017a88
 8001b58:	20017a44 	.word	0x20017a44
 8001b5c:	00f0000c 	.word	0x00f0000c
 8001b60:	20000008 	.word	0x20000008

08001b64 <move_axis>:


static void move_axis(int32_t increment,int32_t direction,char axis)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09e      	sub	sp, #120	; 0x78
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	71fb      	strb	r3, [r7, #7]
	if(!NO_ACTIVE_MOVE)
 8001b72:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <move_axis+0x208>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <move_axis+0x20c>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8178 	bne.w	8001e70 <move_axis+0x30c>
		return;
	//delete all requests
	commands&=~MOVE_X_POSITIVE&~MOVE_X_NEGATIVE&~MOVE_Y_POSITIVE&~MOVE_Y_NEGATIVE&~MOVE_Z_POSITIVE&~MOVE_Z_NEGATIVE&~MOVE_B_POSITIVE&~MOVE_B_NEGATIVE&~MOVE_C_POSITIVE&~MOVE_C_NEGATIVE;
 8001b80:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <move_axis+0x210>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 23f0 	bic.w	r3, r3, #491520	; 0x78000
 8001b88:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8001b8c:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <move_axis+0x210>)
 8001b8e:	6013      	str	r3, [r2, #0]

	if(axis=='c'||axis=='b')
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b63      	cmp	r3, #99	; 0x63
 8001b94:	d002      	beq.n	8001b9c <move_axis+0x38>
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b62      	cmp	r3, #98	; 0x62
 8001b9a:	d101      	bne.n	8001ba0 <move_axis+0x3c>
		increment= INCREMENT_3;
 8001b9c:	2314      	movs	r3, #20
 8001b9e:	60fb      	str	r3, [r7, #12]

	if(!direction)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <move_axis+0x48>
		increment*=-1;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	425b      	negs	r3, r3
 8001baa:	60fb      	str	r3, [r7, #12]


	switch(axis){
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	3b62      	subs	r3, #98	; 0x62
 8001bb0:	2b18      	cmp	r3, #24
 8001bb2:	f200 815f 	bhi.w	8001e74 <move_axis+0x310>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <move_axis+0x58>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001ced 	.word	0x08001ced
 8001bc0:	08001d31 	.word	0x08001d31
 8001bc4:	08001e75 	.word	0x08001e75
 8001bc8:	08001e75 	.word	0x08001e75
 8001bcc:	08001e75 	.word	0x08001e75
 8001bd0:	08001e75 	.word	0x08001e75
 8001bd4:	08001e75 	.word	0x08001e75
 8001bd8:	08001e75 	.word	0x08001e75
 8001bdc:	08001e75 	.word	0x08001e75
 8001be0:	08001e75 	.word	0x08001e75
 8001be4:	08001e75 	.word	0x08001e75
 8001be8:	08001e75 	.word	0x08001e75
 8001bec:	08001e75 	.word	0x08001e75
 8001bf0:	08001e75 	.word	0x08001e75
 8001bf4:	08001e75 	.word	0x08001e75
 8001bf8:	08001e75 	.word	0x08001e75
 8001bfc:	08001e75 	.word	0x08001e75
 8001c00:	08001e75 	.word	0x08001e75
 8001c04:	08001e75 	.word	0x08001e75
 8001c08:	08001e75 	.word	0x08001e75
 8001c0c:	08001e75 	.word	0x08001e75
 8001c10:	08001e75 	.word	0x08001e75
 8001c14:	08001c21 	.word	0x08001c21
 8001c18:	08001c65 	.word	0x08001c65
 8001c1c:	08001ca9 	.word	0x08001ca9
		case 'x':	flags_global_mc|=X_MANUAL_MOVE;
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <move_axis+0x208>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <move_axis+0x208>)
 8001c2a:	6013      	str	r3, [r2, #0]
					if(increment)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <move_axis+0xdc>
						x_target+=increment;
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <move_axis+0x214>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <move_axis+0x214>)
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e002      	b.n	8001c46 <move_axis+0xe2>
					else
						x_target=0;
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <move_axis+0x214>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
					motor_x_direction=direction;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <move_axis+0x218>)
 8001c4a:	6013      	str	r3, [r2, #0]
					if(direction){
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <move_axis+0xf6>
						SET_X_AXIS_POSITIVE_DIRECTION();
 8001c52:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <move_axis+0x21c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	619a      	str	r2, [r3, #24]
					}
					else
						SET_X_AXIS_NEGATIVE_DIRECTION();
					break;
 8001c58:	e0a9      	b.n	8001dae <move_axis+0x24a>
						SET_X_AXIS_NEGATIVE_DIRECTION();
 8001c5a:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <move_axis+0x21c>)
 8001c5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c60:	619a      	str	r2, [r3, #24]
					break;
 8001c62:	e0a4      	b.n	8001dae <move_axis+0x24a>
		
		case 'y':	flags_global_mc|=Y_MANUAL_MOVE;
 8001c64:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <move_axis+0x208>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c6c:	4a3f      	ldr	r2, [pc, #252]	; (8001d6c <move_axis+0x208>)
 8001c6e:	6013      	str	r3, [r2, #0]
					if(increment)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <move_axis+0x120>
						y_target+=increment;
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <move_axis+0x220>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <move_axis+0x220>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e002      	b.n	8001c8a <move_axis+0x126>
					else
						y_target=0;
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <move_axis+0x220>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
					motor_y_direction=direction;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <move_axis+0x224>)
 8001c8e:	6013      	str	r3, [r2, #0]
					if(direction){
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <move_axis+0x13a>
						SET_Y_AXIS_POSITIVE_DIRECTION();
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <move_axis+0x21c>)
 8001c98:	2202      	movs	r2, #2
 8001c9a:	619a      	str	r2, [r3, #24]
					}
					else
						SET_Y_AXIS_NEGATIVE_DIRECTION();
					break;
 8001c9c:	e087      	b.n	8001dae <move_axis+0x24a>
						SET_Y_AXIS_NEGATIVE_DIRECTION();
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <move_axis+0x21c>)
 8001ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca4:	619a      	str	r2, [r3, #24]
					break;
 8001ca6:	e082      	b.n	8001dae <move_axis+0x24a>
		
		case 'z':	flags_global_mc|=Z_MANUAL_MOVE;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <move_axis+0x208>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb0:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <move_axis+0x208>)
 8001cb2:	6013      	str	r3, [r2, #0]
					if(increment)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <move_axis+0x164>
						z_target+=increment;
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <move_axis+0x228>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <move_axis+0x228>)
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e002      	b.n	8001cce <move_axis+0x16a>
					else
						z_target=0;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <move_axis+0x228>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
					motor_z_direction=direction;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <move_axis+0x22c>)
 8001cd2:	6013      	str	r3, [r2, #0]
					if(direction){
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <move_axis+0x17e>
						SET_Z_AXIS_POSITIVE_DIRECTION();
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <move_axis+0x21c>)
 8001cdc:	2204      	movs	r2, #4
 8001cde:	619a      	str	r2, [r3, #24]
					}
					else
						SET_Z_AXIS_NEGATIVE_DIRECTION();
					break;
 8001ce0:	e065      	b.n	8001dae <move_axis+0x24a>
						SET_Z_AXIS_NEGATIVE_DIRECTION();
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <move_axis+0x21c>)
 8001ce4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ce8:	619a      	str	r2, [r3, #24]
					break;
 8001cea:	e060      	b.n	8001dae <move_axis+0x24a>
		case 'b':
					flags_global_mc|=B_MANUAL_MOVE;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <move_axis+0x208>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <move_axis+0x208>)
 8001cf6:	6013      	str	r3, [r2, #0]
					if(increment)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <move_axis+0x1a8>
						b_target+=increment;
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <move_axis+0x230>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <move_axis+0x230>)
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e002      	b.n	8001d12 <move_axis+0x1ae>
					else
						b_target=0;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <move_axis+0x230>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
					motor_b_direction=direction;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <move_axis+0x234>)
 8001d16:	6013      	str	r3, [r2, #0]
					if(direction){
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <move_axis+0x1c2>
						SET_B_AXIS_POSITIVE_DIRECTION();
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <move_axis+0x21c>)
 8001d20:	2208      	movs	r2, #8
 8001d22:	619a      	str	r2, [r3, #24]
					}
					else
						SET_B_AXIS_NEGATIVE_DIRECTION();
					break;
 8001d24:	e043      	b.n	8001dae <move_axis+0x24a>
						SET_B_AXIS_NEGATIVE_DIRECTION();
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <move_axis+0x21c>)
 8001d28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d2c:	619a      	str	r2, [r3, #24]
					break;
 8001d2e:	e03e      	b.n	8001dae <move_axis+0x24a>
		case 'c':

					flags_global_mc|=C_MANUAL_MOVE;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <move_axis+0x208>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <move_axis+0x208>)
 8001d3a:	6013      	str	r3, [r2, #0]
					if(increment)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <move_axis+0x1ec>
						c_target+=increment;
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <move_axis+0x238>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <move_axis+0x238>)
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e002      	b.n	8001d56 <move_axis+0x1f2>
					else
						c_target=0;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <move_axis+0x238>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
					motor_c_direction=direction;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <move_axis+0x23c>)
 8001d5a:	6013      	str	r3, [r2, #0]
					if(direction){
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d020      	beq.n	8001da4 <move_axis+0x240>
						SET_C_AXIS_POSITIVE_DIRECTION();
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <move_axis+0x21c>)
 8001d64:	2210      	movs	r2, #16
 8001d66:	619a      	str	r2, [r3, #24]
					}
					else
						SET_C_AXIS_NEGATIVE_DIRECTION();
					break;
 8001d68:	e020      	b.n	8001dac <move_axis+0x248>
 8001d6a:	bf00      	nop
 8001d6c:	20017a44 	.word	0x20017a44
 8001d70:	00f0000c 	.word	0x00f0000c
 8001d74:	20017a48 	.word	0x20017a48
 8001d78:	20017a64 	.word	0x20017a64
 8001d7c:	20017a50 	.word	0x20017a50
 8001d80:	40021000 	.word	0x40021000
 8001d84:	20017a68 	.word	0x20017a68
 8001d88:	20017a54 	.word	0x20017a54
 8001d8c:	20017a6c 	.word	0x20017a6c
 8001d90:	20017a58 	.word	0x20017a58
 8001d94:	20017a70 	.word	0x20017a70
 8001d98:	20017a5c 	.word	0x20017a5c
 8001d9c:	20017a74 	.word	0x20017a74
 8001da0:	20017a60 	.word	0x20017a60
						SET_C_AXIS_NEGATIVE_DIRECTION();
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <move_axis+0x318>)
 8001da6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001daa:	619a      	str	r2, [r3, #24]
					break;
 8001dac:	bf00      	nop
		default:	return;
	}

	//setup for xaxis
	GPIO_InitTypeDef gpio_init_1;
	gpio_init_1.Pin = GPIO_PIN_5;
 8001dae:	2320      	movs	r3, #32
 8001db0:	667b      	str	r3, [r7, #100]	; 0x64
	gpio_init_1.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	66bb      	str	r3, [r7, #104]	; 0x68
	gpio_init_1.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	66fb      	str	r3, [r7, #108]	; 0x6c
	gpio_init_1.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_GPIO_Init(GPIOE, &gpio_init_1);
 8001dbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	482d      	ldr	r0, [pc, #180]	; (8001e7c <move_axis+0x318>)
 8001dc6:	f002 ffb5 	bl	8004d34 <HAL_GPIO_Init>

	//setup for yaxis
	GPIO_InitTypeDef gpio_init_2;
	gpio_init_2.Pin = GPIO_PIN_8;
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
	gpio_init_2.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
	gpio_init_2.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
	gpio_init_2.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	65fb      	str	r3, [r7, #92]	; 0x5c
	HAL_GPIO_Init(GPIOB, &gpio_init_2);
 8001ddc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001de0:	4619      	mov	r1, r3
 8001de2:	4827      	ldr	r0, [pc, #156]	; (8001e80 <move_axis+0x31c>)
 8001de4:	f002 ffa6 	bl	8004d34 <HAL_GPIO_Init>

	//setup for zaxis
	GPIO_InitTypeDef gpio_init_3;
	gpio_init_3.Pin = GPIO_PIN_9;
 8001de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c
	gpio_init_3.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	643b      	str	r3, [r7, #64]	; 0x40
	gpio_init_3.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
	gpio_init_3.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_GPIO_Init(GPIOB, &gpio_init_3);
 8001dfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481f      	ldr	r0, [pc, #124]	; (8001e80 <move_axis+0x31c>)
 8001e02:	f002 ff97 	bl	8004d34 <HAL_GPIO_Init>

	//setup for baxis
	GPIO_InitTypeDef gpio_init_4;
	gpio_init_4.Pin = GPIO_PIN_6;
 8001e06:	2340      	movs	r3, #64	; 0x40
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_4.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_4.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_init_4.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &gpio_init_4);
 8001e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4819      	ldr	r0, [pc, #100]	; (8001e84 <move_axis+0x320>)
 8001e1e:	f002 ff89 	bl	8004d34 <HAL_GPIO_Init>

	//setup for caxis
	GPIO_InitTypeDef gpio_init_5;
	gpio_init_5.Pin = GPIO_PIN_6;
 8001e22:	2340      	movs	r3, #64	; 0x40
 8001e24:	617b      	str	r3, [r7, #20]
	gpio_init_5.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
	gpio_init_5.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
	gpio_init_5.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &gpio_init_5);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4811      	ldr	r0, [pc, #68]	; (8001e80 <move_axis+0x31c>)
 8001e3a:	f002 ff7b 	bl	8004d34 <HAL_GPIO_Init>

	if(axis=='b'||axis=='c'){
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b62      	cmp	r3, #98	; 0x62
 8001e42:	d002      	beq.n	8001e4a <move_axis+0x2e6>
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	2b63      	cmp	r3, #99	; 0x63
 8001e48:	d104      	bne.n	8001e54 <move_axis+0x2f0>
		TIM13->PSC=400;
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <move_axis+0x324>)
 8001e4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
 8001e52:	e002      	b.n	8001e5a <move_axis+0x2f6>

	}
	else
		TIM13->PSC=1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <move_axis+0x324>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
	TIM13->ARR=SPEED_1;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <move_axis+0x324>)
 8001e5c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
	//x_compare_enable();
	manual_compare_enable();
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <move_axis+0x324>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	621a      	str	r2, [r3, #32]
	manual_timer_start();
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <move_axis+0x324>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
	
	return;
 8001e6e:	e002      	b.n	8001e76 <move_axis+0x312>
		return;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <move_axis+0x312>
		default:	return;
 8001e74:	bf00      	nop
}
 8001e76:	3778      	adds	r7, #120	; 0x78
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40001c00 	.word	0x40001c00

08001e8c <start_program>:


//is machine homed, is machine at 0, is there no manual move going on

static void start_program()
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	if(MACHINE_READY_FOR_PROGRAM){
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <start_program+0x4c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11a      	bne.n	8001ed2 <start_program+0x46>
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <start_program+0x4c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d014      	beq.n	8001ed2 <start_program+0x46>
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <start_program+0x50>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d110      	bne.n	8001ed2 <start_program+0x46>
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <start_program+0x54>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10c      	bne.n	8001ed2 <start_program+0x46>
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <start_program+0x58>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d108      	bne.n	8001ed2 <start_program+0x46>
		flags_global_mc|=BUFFER_FILLING_IN_PROGRESS;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <start_program+0x4c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <start_program+0x4c>)
 8001eca:	6013      	str	r3, [r2, #0]
		request_receiving_data();
 8001ecc:	f001 f888 	bl	8002fe0 <request_receiving_data>
	}
		
	return;
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
}
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20017a44 	.word	0x20017a44
 8001edc:	20017a78 	.word	0x20017a78
 8001ee0:	20017a7c 	.word	0x20017a7c
 8001ee4:	20017a80 	.word	0x20017a80

08001ee8 <go_to_home_position>:

//this should be not neccesary anymore because to go every time to the end switches would be much better

void go_to_home_position()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	//first home the z axis, else you could drive into the workpiece

	if(z_standpoint>0)
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <go_to_home_position+0x8c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dd05      	ble.n	8001f00 <go_to_home_position+0x18>
		move_axis(MOVE_TO_ZERO,NEGATIVE,'z');
 8001ef4:	227a      	movs	r2, #122	; 0x7a
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fe33 	bl	8001b64 <move_axis>
	else if(y_standpoint<0)
		move_axis(MOVE_TO_ZERO,POSITIVE,'y');

	else commands&=~GO_TO_HOME;

	return;
 8001efe:	e038      	b.n	8001f72 <go_to_home_position+0x8a>
	else if(z_standpoint<0)
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <go_to_home_position+0x8c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da05      	bge.n	8001f14 <go_to_home_position+0x2c>
		move_axis(MOVE_TO_ZERO,POSITIVE,'z');
 8001f08:	227a      	movs	r2, #122	; 0x7a
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fe29 	bl	8001b64 <move_axis>
	return;
 8001f12:	e02e      	b.n	8001f72 <go_to_home_position+0x8a>
	else if(x_standpoint>0)
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <go_to_home_position+0x90>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	dd05      	ble.n	8001f28 <go_to_home_position+0x40>
		move_axis(MOVE_TO_ZERO,NEGATIVE,'x');
 8001f1c:	2278      	movs	r2, #120	; 0x78
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff fe1f 	bl	8001b64 <move_axis>
	return;
 8001f26:	e024      	b.n	8001f72 <go_to_home_position+0x8a>
	else if(x_standpoint<0)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <go_to_home_position+0x90>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da05      	bge.n	8001f3c <go_to_home_position+0x54>
		move_axis(MOVE_TO_ZERO,POSITIVE,'x');
 8001f30:	2278      	movs	r2, #120	; 0x78
 8001f32:	2101      	movs	r1, #1
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fe15 	bl	8001b64 <move_axis>
	return;
 8001f3a:	e01a      	b.n	8001f72 <go_to_home_position+0x8a>
	else if(y_standpoint>0)
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <go_to_home_position+0x94>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dd05      	ble.n	8001f50 <go_to_home_position+0x68>
		move_axis(MOVE_TO_ZERO,NEGATIVE,'y');
 8001f44:	2279      	movs	r2, #121	; 0x79
 8001f46:	2100      	movs	r1, #0
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fe0b 	bl	8001b64 <move_axis>
	return;
 8001f4e:	e010      	b.n	8001f72 <go_to_home_position+0x8a>
	else if(y_standpoint<0)
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <go_to_home_position+0x94>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da05      	bge.n	8001f64 <go_to_home_position+0x7c>
		move_axis(MOVE_TO_ZERO,POSITIVE,'y');
 8001f58:	2279      	movs	r2, #121	; 0x79
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff fe01 	bl	8001b64 <move_axis>
	return;
 8001f62:	e006      	b.n	8001f72 <go_to_home_position+0x8a>
	else commands&=~GO_TO_HOME;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <go_to_home_position+0x98>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0308 	bic.w	r3, r3, #8
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <go_to_home_position+0x98>)
 8001f6e:	6013      	str	r3, [r2, #0]
	return;
 8001f70:	bf00      	nop
}
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20017a80 	.word	0x20017a80
 8001f78:	20017a78 	.word	0x20017a78
 8001f7c:	20017a7c 	.word	0x20017a7c
 8001f80:	20017a48 	.word	0x20017a48

08001f84 <homing_cycle>:

static void homing_cycle(){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
//first home the z axis, else you could drive into the workpiece
	if(!(flags_global_mc&Z_HOMED))
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <homing_cycle+0xb0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <homing_cycle+0x1c>
		move_axis(1000000,POSITIVE,'z');
 8001f94:	227a      	movs	r2, #122	; 0x7a
 8001f96:	2101      	movs	r1, #1
 8001f98:	4827      	ldr	r0, [pc, #156]	; (8002038 <homing_cycle+0xb4>)
 8001f9a:	f7ff fde3 	bl	8001b64 <move_axis>
		z_standpoint=6400;
		//after that go to home
		commands|=GO_TO_HOME;//move all axis to 0
	}

	return;
 8001f9e:	e047      	b.n	8002030 <homing_cycle+0xac>
	else if(!(flags_global_mc&X_HOMED))
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <homing_cycle+0xb0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <homing_cycle+0x34>
		move_axis(1000000,NEGATIVE,'x');
 8001fac:	2278      	movs	r2, #120	; 0x78
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4821      	ldr	r0, [pc, #132]	; (8002038 <homing_cycle+0xb4>)
 8001fb2:	f7ff fdd7 	bl	8001b64 <move_axis>
	return;
 8001fb6:	e03b      	b.n	8002030 <homing_cycle+0xac>
	else if(!(flags_global_mc&Y_HOMED))
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <homing_cycle+0xb0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <homing_cycle+0x4c>
		move_axis(1000000,POSITIVE,'y');
 8001fc4:	2279      	movs	r2, #121	; 0x79
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	481b      	ldr	r0, [pc, #108]	; (8002038 <homing_cycle+0xb4>)
 8001fca:	f7ff fdcb 	bl	8001b64 <move_axis>
	return;
 8001fce:	e02f      	b.n	8002030 <homing_cycle+0xac>
		commands&=~HOMING_CYCLE_FLAG;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <homing_cycle+0xb8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0310 	bic.w	r3, r3, #16
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <homing_cycle+0xb8>)
 8001fda:	6013      	str	r3, [r2, #0]
		flags_global_mc&=~Z_HOMED;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <homing_cycle+0xb0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <homing_cycle+0xb0>)
 8001fe6:	6013      	str	r3, [r2, #0]
		flags_global_mc&=~X_HOMED;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <homing_cycle+0xb0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <homing_cycle+0xb0>)
 8001ff2:	6013      	str	r3, [r2, #0]
		flags_global_mc&=~Y_HOMED;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <homing_cycle+0xb0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <homing_cycle+0xb0>)
 8001ffe:	6013      	str	r3, [r2, #0]
		flags_global_mc|=MACHINE_HOMED;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <homing_cycle+0xb0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <homing_cycle+0xb0>)
 800200a:	6013      	str	r3, [r2, #0]
		x_standpoint=-6400;//it woudl move a bit to the right in case of go to home
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <homing_cycle+0xbc>)
 800200e:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <homing_cycle+0xc0>)
 8002010:	601a      	str	r2, [r3, #0]
		y_standpoint=6400;
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <homing_cycle+0xc4>)
 8002014:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002018:	601a      	str	r2, [r3, #0]
		z_standpoint=6400;
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <homing_cycle+0xc8>)
 800201c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002020:	601a      	str	r2, [r3, #0]
		commands|=GO_TO_HOME;//move all axis to 0
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <homing_cycle+0xb8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f043 0308 	orr.w	r3, r3, #8
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <homing_cycle+0xb8>)
 800202c:	6013      	str	r3, [r2, #0]
	return;
 800202e:	bf00      	nop

}
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20017a44 	.word	0x20017a44
 8002038:	000f4240 	.word	0x000f4240
 800203c:	20017a48 	.word	0x20017a48
 8002040:	20017a78 	.word	0x20017a78
 8002044:	ffffe700 	.word	0xffffe700
 8002048:	20017a7c 	.word	0x20017a7c
 800204c:	20017a80 	.word	0x20017a80

08002050 <measure_tool>:
//homeposition means all axis are at 0, that is slightly besides the endswitches, in order that they are not pressed
#define MACHINE_AT_HOME_POSITION (x_standpoint==0&&y_standpoint==0&&z_standpoint==0)

static void measure_tool()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	//if Machine is homed, and if its at xyz 0;
	//else first home or at least go xyz to 0 then measure the tool
	//
	if((flags_global_mc&MACHINE_HOMED)&&MACHINE_AT_HOME_POSITION)
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <measure_tool+0x8c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d011      	beq.n	8002086 <measure_tool+0x36>
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <measure_tool+0x90>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <measure_tool+0x36>
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <measure_tool+0x94>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <measure_tool+0x36>
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <measure_tool+0x98>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <measure_tool+0x36>
		move_axis(1000000,NEGATIVE,'z');
 800207a:	227a      	movs	r2, #122	; 0x7a
 800207c:	2100      	movs	r1, #0
 800207e:	481b      	ldr	r0, [pc, #108]	; (80020ec <measure_tool+0x9c>)
 8002080:	f7ff fd70 	bl	8001b64 <move_axis>
 8002084:	e024      	b.n	80020d0 <measure_tool+0x80>
	else if(flags_global_mc&MEASURED_TOOL){
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <measure_tool+0x8c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01f      	beq.n	80020d2 <measure_tool+0x82>
		uint32_t input_nr=(uint32_t)z_standpoint;//if this number is -1(should not happen, than the value of the input_nr will be 0xffffffff) thats a problem, its oviously not because in the gui there is still the right value...
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <measure_tool+0x98>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	607b      	str	r3, [r7, #4]
		send_position_message(input_nr,0,MEASURE_TOOL_ANSWER_ID);
 8002098:	f04f 62e4 	mov.w	r2, #119537664	; 0x7200000
 800209c:	2100      	movs	r1, #0
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f82a 	bl	80020f8 <send_position_message>
		flags_global_mc&=~MEASURED_TOOL;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <measure_tool+0x8c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <measure_tool+0x8c>)
 80020ae:	6013      	str	r3, [r2, #0]
		commands&=~MEASURE_TOOL_FLAG;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <measure_tool+0xa0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <measure_tool+0xa0>)
 80020ba:	6013      	str	r3, [r2, #0]
		timer_speed=SPEED_1;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <measure_tool+0xa4>)
 80020be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020c2:	801a      	strh	r2, [r3, #0]
		commands|=GO_TO_HOME;//move all axis to 0
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <measure_tool+0xa0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <measure_tool+0xa0>)
 80020ce:	6013      	str	r3, [r2, #0]
	}

	return;
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop

}
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20017a44 	.word	0x20017a44
 80020e0:	20017a78 	.word	0x20017a78
 80020e4:	20017a7c 	.word	0x20017a7c
 80020e8:	20017a80 	.word	0x20017a80
 80020ec:	000f4240 	.word	0x000f4240
 80020f0:	20017a48 	.word	0x20017a48
 80020f4:	20000004 	.word	0x20000004

080020f8 <send_position_message>:

//the number is allways an int32_t, the identifier is 11 bit, means max2048
void send_position_message(uint32_t number_1,uint32_t number_2,uint32_t identifier)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
        int mailbox_nr=0;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
        mailbox_nr=get_mailbox();       //returns number of empty mailboxor at least lowest priority pending mailbox
 8002108:	f000 f84a 	bl	80021a0 <get_mailbox>
 800210c:	6178      	str	r0, [r7, #20]

        if(is_mailbox_empty(mailbox_nr)){       //in case of an request for new data this whould be forced
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f000 f85a 	bl	80021c8 <is_mailbox_empty>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03b      	beq.n	8002192 <send_position_message+0x9a>
                CAN1->sTxMailBox[mailbox_nr].TDTR=(8<<CAN_TDT0R_DLC_Pos); //because its an int32_t... 4 bytes
 800211a:	4a20      	ldr	r2, [pc, #128]	; (800219c <send_position_message+0xa4>)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3318      	adds	r3, #24
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	2208      	movs	r2, #8
 8002128:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TDLR=number_1;
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <send_position_message+0xa4>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TDHR=number_2;
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <send_position_message+0xa4>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TIR=0;
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <send_position_message+0xa4>)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3318      	adds	r3, #24
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TIR|=identifier;
 8002158:	4a10      	ldr	r2, [pc, #64]	; (800219c <send_position_message+0xa4>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3318      	adds	r3, #24
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	490d      	ldr	r1, [pc, #52]	; (800219c <send_position_message+0xa4>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	431a      	orrs	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3318      	adds	r3, #24
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	440b      	add	r3, r1
 8002172:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TIR|=CAN_TI0R_TXRQ;        //that means start to transmit the message
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <send_position_message+0xa4>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3318      	adds	r3, #24
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4906      	ldr	r1, [pc, #24]	; (800219c <send_position_message+0xa4>)
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3318      	adds	r3, #24
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	440b      	add	r3, r1
 800218e:	601a      	str	r2, [r3, #0]
        }
        return;
 8002190:	bf00      	nop
 8002192:	bf00      	nop
}
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40006400 	.word	0x40006400

080021a0 <get_mailbox>:

static int get_mailbox()
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
        int ret=0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
        ret=CAN1->TSR&CAN_TSR_CODE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <get_mailbox+0x24>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80021b2:	607b      	str	r3, [r7, #4]
        return ret;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40006400 	.word	0x40006400

080021c8 <is_mailbox_empty>:

static int is_mailbox_empty(int mailbox_nr)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
        int ret=0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
        ret=CAN1->TSR&(1<<(CAN_TSR_TME_Pos+mailbox_nr));
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <is_mailbox_empty+0x2c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	321a      	adds	r2, #26
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
        return ret;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40006400 	.word	0x40006400

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	e7fe      	b.n	8002200 <Error_Handler+0x8>
	...

08002204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_MspInit+0x4c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_MspInit+0x4c>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002242:	2007      	movs	r0, #7
 8002244:	f002 fd34 	bl	8004cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_CAN_MspInit+0x94>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d133      	bne.n	80022de <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_CAN_MspInit+0x98>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_CAN_MspInit+0x98>)
 8002280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_CAN_MspInit+0x98>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_CAN_MspInit+0x98>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_CAN_MspInit+0x98>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_CAN_MspInit+0x98>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022ae:	2303      	movs	r3, #3
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022be:	2309      	movs	r3, #9
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <HAL_CAN_MspInit+0x9c>)
 80022ca:	f002 fd33 	bl	8004d34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2014      	movs	r0, #20
 80022d4:	f002 fcf7 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80022d8:	2014      	movs	r0, #20
 80022da:	f002 fd10 	bl	8004cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40006400 	.word	0x40006400
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020c00 	.word	0x40020c00

080022f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d12b      	bne.n	800236e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_TIM_Encoder_MspInit+0x84>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_Encoder_MspInit+0x84>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_TIM_Encoder_MspInit+0x84>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_TIM_Encoder_MspInit+0x84>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <HAL_TIM_Encoder_MspInit+0x84>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_TIM_Encoder_MspInit+0x84>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800234e:	2322      	movs	r3, #34	; 0x22
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800235e:	2301      	movs	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <HAL_TIM_Encoder_MspInit+0x88>)
 800236a:	f002 fce3 	bl	8004d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <HAL_TIM_Base_MspInit+0x128>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d116      	bne.n	80023c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a44      	ldr	r2, [pc, #272]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	201d      	movs	r0, #29
 80023b4:	f002 fc87 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b8:	201d      	movs	r0, #29
 80023ba:	f002 fca0 	bl	8004cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80023be:	e06e      	b.n	800249e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <HAL_TIM_Base_MspInit+0x130>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d116      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a36      	ldr	r2, [pc, #216]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	201e      	movs	r0, #30
 80023ec:	f002 fc6b 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023f0:	201e      	movs	r0, #30
 80023f2:	f002 fc84 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 80023f6:	e052      	b.n	800249e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <HAL_TIM_Base_MspInit+0x134>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d116      	bne.n	8002430 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2019      	movs	r0, #25
 8002424:	f002 fc4f 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002428:	2019      	movs	r0, #25
 800242a:	f002 fc68 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 800242e:	e036      	b.n	800249e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <HAL_TIM_Base_MspInit+0x138>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d116      	bne.n	8002468 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	201a      	movs	r0, #26
 800245c:	f002 fc33 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002460:	201a      	movs	r0, #26
 8002462:	f002 fc4c 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 8002466:	e01a      	b.n	800249e <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM13)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <HAL_TIM_Base_MspInit+0x13c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d115      	bne.n	800249e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_TIM_Base_MspInit+0x12c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	202c      	movs	r0, #44	; 0x2c
 8002494:	f002 fc17 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	f002 fc30 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800
 80024bc:	40001c00 	.word	0x40001c00

080024c0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <HAL_TIM_OC_MspInit+0x80>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d116      	bne.n	8002500 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_TIM_OC_MspInit+0x84>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <HAL_TIM_OC_MspInit+0x84>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_TIM_OC_MspInit+0x84>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2018      	movs	r0, #24
 80024f4:	f002 fbe7 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024f8:	2018      	movs	r0, #24
 80024fa:	f002 fc00 	bl	8004cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80024fe:	e01a      	b.n	8002536 <HAL_TIM_OC_MspInit+0x76>
  else if(htim_oc->Instance==TIM12)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_TIM_OC_MspInit+0x88>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d115      	bne.n	8002536 <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_TIM_OC_MspInit+0x84>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_TIM_OC_MspInit+0x84>)
 8002514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_TIM_OC_MspInit+0x84>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	202b      	movs	r0, #43	; 0x2b
 800252c:	f002 fbcb 	bl	8004cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002530:	202b      	movs	r0, #43	; 0x2b
 8002532:	f002 fbe4 	bl	8004cfe <HAL_NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40014000 	.word	0x40014000
 8002544:	40023800 	.word	0x40023800
 8002548:	40001800 	.word	0x40001800

0800254c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5b      	ldr	r2, [pc, #364]	; (80026d8 <HAL_TIM_MspPostInit+0x18c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11e      	bne.n	80025ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a59      	ldr	r2, [pc, #356]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b57      	ldr	r3, [pc, #348]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259a:	2302      	movs	r3, #2
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	484e      	ldr	r0, [pc, #312]	; (80026e0 <HAL_TIM_MspPostInit+0x194>)
 80025a6:	f002 fbc5 	bl	8004d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80025aa:	e090      	b.n	80026ce <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4c      	ldr	r2, [pc, #304]	; (80026e4 <HAL_TIM_MspPostInit+0x198>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d11e      	bne.n	80025f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	4b48      	ldr	r3, [pc, #288]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b45      	ldr	r3, [pc, #276]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025e2:	2302      	movs	r3, #2
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	483e      	ldr	r0, [pc, #248]	; (80026e8 <HAL_TIM_MspPostInit+0x19c>)
 80025ee:	f002 fba1 	bl	8004d34 <HAL_GPIO_Init>
}
 80025f2:	e06c      	b.n	80026ce <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM9)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <HAL_TIM_MspPostInit+0x1a0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11e      	bne.n	800263c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a35      	ldr	r2, [pc, #212]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261a:	2320      	movs	r3, #32
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800262a:	2303      	movs	r3, #3
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	482e      	ldr	r0, [pc, #184]	; (80026f0 <HAL_TIM_MspPostInit+0x1a4>)
 8002636:	f002 fb7d 	bl	8004d34 <HAL_GPIO_Init>
}
 800263a:	e048      	b.n	80026ce <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM10)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <HAL_TIM_MspPostInit+0x1a8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11f      	bne.n	8002686 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002674:	2303      	movs	r3, #3
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	4619      	mov	r1, r3
 800267e:	481a      	ldr	r0, [pc, #104]	; (80026e8 <HAL_TIM_MspPostInit+0x19c>)
 8002680:	f002 fb58 	bl	8004d34 <HAL_GPIO_Init>
}
 8002684:	e023      	b.n	80026ce <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM11)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_TIM_MspPostInit+0x1ac>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d11e      	bne.n	80026ce <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	6313      	str	r3, [r2, #48]	; 0x30
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_TIM_MspPostInit+0x190>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80026be:	2303      	movs	r3, #3
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	4619      	mov	r1, r3
 80026c8:	4807      	ldr	r0, [pc, #28]	; (80026e8 <HAL_TIM_MspPostInit+0x19c>)
 80026ca:	f002 fb33 	bl	8004d34 <HAL_GPIO_Init>
}
 80026ce:	bf00      	nop
 80026d0:	3730      	adds	r7, #48	; 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020000 	.word	0x40020000
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40020400 	.word	0x40020400
 80026ec:	40014000 	.word	0x40014000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f001 fd42 	bl	80041d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002754:	4806      	ldr	r0, [pc, #24]	; (8002770 <CAN1_RX0_IRQHandler+0x20>)
 8002756:	f001 ffa1 	bl	800469c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	/*if(!(CAN1->RF0R&CAN_RF0R_FOVR0))*/			//thats maybe a wast of time... (look for fifo overrun)	//thats good, but thats only for fifo mb0, there is also one more
  get_data();
 800275a:	f000 f883 	bl	8002864 <get_data>
	//that should be either in the handler or only here, but not in both...
  CAN1->RF0R|=CAN_RF0R_RFOM0;
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <CAN1_RX0_IRQHandler+0x24>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <CAN1_RX0_IRQHandler+0x24>)
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	60d3      	str	r3, [r2, #12]
		flags|=CAN1_FIFO_OVERRUN; //kriese!!! alarm...
		//for nor clear the interrupt flag
		CAN1->RF0R&=~CAN_RF0R_FOVR0;
		//the stop thing supposed to be here
	}*/
	return;
 800276a:	bf00      	nop

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000094 	.word	0x20000094
 8002774:	40006400 	.word	0x40006400

08002778 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800277e:	f003 fac5 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  update_standpoint_x();
 8002782:	f000 fc4b 	bl	800301c <update_standpoint_x>
  check_target_reached_x();
 8002786:	f000 fc63 	bl	8003050 <check_target_reached_x>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000194 	.word	0x20000194

08002794 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <TIM1_UP_TIM10_IRQHandler+0x18>)
 800279a:	f003 fab7 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  update_standpoint_y();
 800279e:	f000 fc79 	bl	8003094 <update_standpoint_y>
  check_target_reached_y();
 80027a2:	f000 fc91 	bl	80030c8 <check_target_reached_y>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200001dc 	.word	0x200001dc

080027b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80027b6:	f003 faa9 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  update_standpoint_z();
 80027ba:	f000 fca7 	bl	800310c <update_standpoint_z>
  check_target_reached_z();
 80027be:	f000 fcbf 	bl	8003140 <check_target_reached_z>
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000224 	.word	0x20000224

080027cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <TIM3_IRQHandler+0x18>)
 80027d2:	f003 fa9b 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	update_standpoint_b();
 80027d6:	f000 fcd5 	bl	8003184 <update_standpoint_b>
  	check_target_reached_b();
 80027da:	f000 fced 	bl	80031b8 <check_target_reached_b>
  /* USER CODE END TIM3_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000104 	.word	0x20000104

080027e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <TIM4_IRQHandler+0x18>)
 80027ee:	f003 fa8d 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  update_standpoint_c();
 80027f2:	f000 fd03 	bl	80031fc <update_standpoint_c>
  check_target_reached_c();
 80027f6:	f000 fd1b 	bl	8003230 <check_target_reached_c>

  /* USER CODE END TIM4_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000014c 	.word	0x2000014c

08002804 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */
	init_timer_stop();
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
	init_compare_disable();
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
	init_interrupt_disable();
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a09      	ldr	r2, [pc, #36]	; (8002840 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 800281a:	f023 0302 	bic.w	r3, r3, #2
 800281e:	60d3      	str	r3, [r2, #12]
	init_clear_interrupt();
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002826:	4807      	ldr	r0, [pc, #28]	; (8002844 <TIM8_BRK_TIM12_IRQHandler+0x40>)
 8002828:	f003 fa70 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  check_target_reached_z();
 800282c:	f000 fc88 	bl	8003140 <check_target_reached_z>
  //thats that the first move function doesn't start again
  flags_global_mc&=~BUFFER_FULL;
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <TIM8_BRK_TIM12_IRQHandler+0x44>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <TIM8_BRK_TIM12_IRQHandler+0x44>)
 800283a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40001800 	.word	0x40001800
 8002844:	2000026c 	.word	0x2000026c
 8002848:	20017a44 	.word	0x20017a44

0800284c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002850:	4803      	ldr	r0, [pc, #12]	; (8002860 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002852:	f003 fa5b 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  manual_motor_controll();
 8002856:	f001 f9f1 	bl	8003c3c <manual_motor_controll>
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200002b4 	.word	0x200002b4

08002864 <get_data>:
/* USER CODE BEGIN 1 */
//if there are not so much options no switch should be used because of performance
//the fifo mailbox[1] has to be included in this routing!!
//and maybe every transmit should be done with the function in main.c
static inline void get_data()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	if((fifo_write_ctr<fifo_read_ctr&&(flags_global_mc&WRITE_CTR_UNDER_READ_CTR)&&(!(flags_global_mc&FIRST_MOVE_IN_PROCESS)))||(fifo_write_ctr>fifo_read_ctr)){
 8002868:	4ba7      	ldr	r3, [pc, #668]	; (8002b08 <get_data+0x2a4>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4ba7      	ldr	r3, [pc, #668]	; (8002b0c <get_data+0x2a8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d20b      	bcs.n	800288c <get_data+0x28>
 8002874:	4ba6      	ldr	r3, [pc, #664]	; (8002b10 <get_data+0x2ac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <get_data+0x28>
 8002880:	4ba3      	ldr	r3, [pc, #652]	; (8002b10 <get_data+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <get_data+0x36>
 800288c:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <get_data+0x2a4>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b9e      	ldr	r3, [pc, #632]	; (8002b0c <get_data+0x2a8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	f240 8203 	bls.w	8002ca0 <get_data+0x43c>

		switch(CAN1->sFIFOMailBox->RIR){	//look up identifier of mailbox
 800289a:	4b9e      	ldr	r3, [pc, #632]	; (8002b14 <get_data+0x2b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 6ffc 	cmp.w	r3, #132120576	; 0x7e00000
 80028a2:	f000 81c9 	beq.w	8002c38 <get_data+0x3d4>
 80028a6:	f1b3 6ffc 	cmp.w	r3, #132120576	; 0x7e00000
 80028aa:	f200 8200 	bhi.w	8002cae <get_data+0x44a>
 80028ae:	f1b3 6ff8 	cmp.w	r3, #130023424	; 0x7c00000
 80028b2:	f000 81b4 	beq.w	8002c1e <get_data+0x3ba>
 80028b6:	f1b3 6ff8 	cmp.w	r3, #130023424	; 0x7c00000
 80028ba:	f200 81f8 	bhi.w	8002cae <get_data+0x44a>
 80028be:	f1b3 6ff4 	cmp.w	r3, #127926272	; 0x7a00000
 80028c2:	f000 813a 	beq.w	8002b3a <get_data+0x2d6>
 80028c6:	f1b3 6ff4 	cmp.w	r3, #127926272	; 0x7a00000
 80028ca:	f200 81f0 	bhi.w	8002cae <get_data+0x44a>
 80028ce:	f1b3 6ff0 	cmp.w	r3, #125829120	; 0x7800000
 80028d2:	f000 8125 	beq.w	8002b20 <get_data+0x2bc>
 80028d6:	f1b3 6ff0 	cmp.w	r3, #125829120	; 0x7800000
 80028da:	f200 81e8 	bhi.w	8002cae <get_data+0x44a>
 80028de:	f1b3 6fec 	cmp.w	r3, #123731968	; 0x7600000
 80028e2:	f000 8103 	beq.w	8002aec <get_data+0x288>
 80028e6:	f1b3 6fec 	cmp.w	r3, #123731968	; 0x7600000
 80028ea:	f200 81e0 	bhi.w	8002cae <get_data+0x44a>
 80028ee:	f1b3 6fe8 	cmp.w	r3, #121634816	; 0x7400000
 80028f2:	f000 80ee 	beq.w	8002ad2 <get_data+0x26e>
 80028f6:	f1b3 6fe8 	cmp.w	r3, #121634816	; 0x7400000
 80028fa:	f200 81d8 	bhi.w	8002cae <get_data+0x44a>
 80028fe:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002902:	f000 8152 	beq.w	8002baa <get_data+0x346>
 8002906:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800290a:	f200 81d0 	bhi.w	8002cae <get_data+0x44a>
 800290e:	f1b3 6fc4 	cmp.w	r3, #102760448	; 0x6200000
 8002912:	f000 81b8 	beq.w	8002c86 <get_data+0x422>
 8002916:	f1b3 6fc4 	cmp.w	r3, #102760448	; 0x6200000
 800291a:	f200 81c8 	bhi.w	8002cae <get_data+0x44a>
 800291e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002922:	f000 81a3 	beq.w	8002c6c <get_data+0x408>
 8002926:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800292a:	f200 81c0 	bhi.w	8002cae <get_data+0x44a>
 800292e:	f1b3 6fa4 	cmp.w	r3, #85983232	; 0x5200000
 8002932:	f000 818e 	beq.w	8002c52 <get_data+0x3ee>
 8002936:	f1b3 6fa4 	cmp.w	r3, #85983232	; 0x5200000
 800293a:	f200 81b8 	bhi.w	8002cae <get_data+0x44a>
 800293e:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
 8002942:	f000 815f 	beq.w	8002c04 <get_data+0x3a0>
 8002946:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
 800294a:	f200 81b0 	bhi.w	8002cae <get_data+0x44a>
 800294e:	f1b3 6f84 	cmp.w	r3, #69206016	; 0x4200000
 8002952:	f000 814a 	beq.w	8002bea <get_data+0x386>
 8002956:	f1b3 6f84 	cmp.w	r3, #69206016	; 0x4200000
 800295a:	f200 81a8 	bhi.w	8002cae <get_data+0x44a>
 800295e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002962:	f000 8135 	beq.w	8002bd0 <get_data+0x36c>
 8002966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296a:	f200 81a0 	bhi.w	8002cae <get_data+0x44a>
 800296e:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 8002972:	f000 810c 	beq.w	8002b8e <get_data+0x32a>
 8002976:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 800297a:	f200 8198 	bhi.w	8002cae <get_data+0x44a>
 800297e:	f1b3 7f58 	cmp.w	r3, #56623104	; 0x3600000
 8002982:	f000 80f6 	beq.w	8002b72 <get_data+0x30e>
 8002986:	f1b3 7f58 	cmp.w	r3, #56623104	; 0x3600000
 800298a:	f200 8190 	bhi.w	8002cae <get_data+0x44a>
 800298e:	f1b3 7f50 	cmp.w	r3, #54525952	; 0x3400000
 8002992:	f000 80df 	beq.w	8002b54 <get_data+0x2f0>
 8002996:	f1b3 7f50 	cmp.w	r3, #54525952	; 0x3400000
 800299a:	f200 8188 	bhi.w	8002cae <get_data+0x44a>
 800299e:	f1b3 7f48 	cmp.w	r3, #52428800	; 0x3200000
 80029a2:	f000 8089 	beq.w	8002ab8 <get_data+0x254>
 80029a6:	f1b3 7f48 	cmp.w	r3, #52428800	; 0x3200000
 80029aa:	f200 8180 	bhi.w	8002cae <get_data+0x44a>
 80029ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b2:	d074      	beq.n	8002a9e <get_data+0x23a>
 80029b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b8:	f200 8179 	bhi.w	8002cae <get_data+0x44a>
 80029bc:	f1b3 7f38 	cmp.w	r3, #48234496	; 0x2e00000
 80029c0:	d060      	beq.n	8002a84 <get_data+0x220>
 80029c2:	f1b3 7f38 	cmp.w	r3, #48234496	; 0x2e00000
 80029c6:	f200 8172 	bhi.w	8002cae <get_data+0x44a>
 80029ca:	f1b3 7f30 	cmp.w	r3, #46137344	; 0x2c00000
 80029ce:	d04c      	beq.n	8002a6a <get_data+0x206>
 80029d0:	f1b3 7f30 	cmp.w	r3, #46137344	; 0x2c00000
 80029d4:	f200 816b 	bhi.w	8002cae <get_data+0x44a>
 80029d8:	f1b3 7f28 	cmp.w	r3, #44040192	; 0x2a00000
 80029dc:	d038      	beq.n	8002a50 <get_data+0x1ec>
 80029de:	f1b3 7f28 	cmp.w	r3, #44040192	; 0x2a00000
 80029e2:	f200 8164 	bhi.w	8002cae <get_data+0x44a>
 80029e6:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 80029ea:	d024      	beq.n	8002a36 <get_data+0x1d2>
 80029ec:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 80029f0:	f200 815d 	bhi.w	8002cae <get_data+0x44a>
 80029f4:	f1b3 7fd0 	cmp.w	r3, #27262976	; 0x1a00000
 80029f8:	d01a      	beq.n	8002a30 <get_data+0x1cc>
 80029fa:	f1b3 7fd0 	cmp.w	r3, #27262976	; 0x1a00000
 80029fe:	f200 8156 	bhi.w	8002cae <get_data+0x44a>
 8002a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a06:	d010      	beq.n	8002a2a <get_data+0x1c6>
 8002a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a0c:	f200 814f 	bhi.w	8002cae <get_data+0x44a>
 8002a10:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002a14:	d003      	beq.n	8002a1e <get_data+0x1ba>
 8002a16:	f1b3 7fb0 	cmp.w	r3, #23068672	; 0x1600000
 8002a1a:	d003      	beq.n	8002a24 <get_data+0x1c0>
								CAN1->RF0R|=CAN_RF0R_RFOM0;
								return;
			case CAN_ID_MEASURE_TOOL:		commands|=MEASURE_TOOL_FLAG;
								CAN1->RF0R|=CAN_RF0R_RFOM0;
								return;
			default:				return;
 8002a1c:	e147      	b.n	8002cae <get_data+0x44a>
			case MC_DATA_PART_1_ID:	handle_mc_data_part_1();
 8002a1e:	f000 f953 	bl	8002cc8 <handle_mc_data_part_1>
									return;
 8002a22:	e145      	b.n	8002cb0 <get_data+0x44c>
			case MC_DATA_PART_2_ID:	handle_mc_data_part_2();
 8002a24:	f000 f978 	bl	8002d18 <handle_mc_data_part_2>
									return;
 8002a28:	e142      	b.n	8002cb0 <get_data+0x44c>
									handle_mc_data_part_3();
 8002a2a:	f000 f99f 	bl	8002d6c <handle_mc_data_part_3>
									return;
 8002a2e:	e13f      	b.n	8002cb0 <get_data+0x44c>
									handle_mc_data_part_4();
 8002a30:	f000 f9c4 	bl	8002dbc <handle_mc_data_part_4>
									return;
 8002a34:	e13c      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_X_POS: commands|=MOVE_X_POSITIVE;
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <get_data+0x2b4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f043 0320 	orr.w	r3, r3, #32
 8002a3e:	4a36      	ldr	r2, [pc, #216]	; (8002b18 <get_data+0x2b4>)
 8002a40:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <get_data+0x2b8>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <get_data+0x2b8>)
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	60d3      	str	r3, [r2, #12]
						return;
 8002a4e:	e12f      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_X_NEG: commands|=MOVE_X_NEGATIVE;
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <get_data+0x2b4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	4a2f      	ldr	r2, [pc, #188]	; (8002b18 <get_data+0x2b4>)
 8002a5a:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <get_data+0x2b8>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <get_data+0x2b8>)
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	60d3      	str	r3, [r2, #12]
						return;
 8002a68:	e122      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_Y_POS: commands|=MOVE_Y_POSITIVE;
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <get_data+0x2b4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <get_data+0x2b4>)
 8002a74:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <get_data+0x2b8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <get_data+0x2b8>)
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
 8002a80:	60d3      	str	r3, [r2, #12]
						return;
 8002a82:	e115      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_Y_NEG: commands|=MOVE_Y_NEGATIVE;
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <get_data+0x2b4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <get_data+0x2b4>)
 8002a8e:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <get_data+0x2b8>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <get_data+0x2b8>)
 8002a96:	f043 0320 	orr.w	r3, r3, #32
 8002a9a:	60d3      	str	r3, [r2, #12]
						return;
 8002a9c:	e108      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_Z_POS: commands|=MOVE_Z_POSITIVE;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <get_data+0x2b4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <get_data+0x2b4>)
 8002aa8:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <get_data+0x2b8>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <get_data+0x2b8>)
 8002ab0:	f043 0320 	orr.w	r3, r3, #32
 8002ab4:	60d3      	str	r3, [r2, #12]
						return;
 8002ab6:	e0fb      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_Z_NEG: commands|=MOVE_Z_NEGATIVE;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <get_data+0x2b4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <get_data+0x2b4>)
 8002ac2:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <get_data+0x2b8>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <get_data+0x2b8>)
 8002aca:	f043 0320 	orr.w	r3, r3, #32
 8002ace:	60d3      	str	r3, [r2, #12]
						return;
 8002ad0:	e0ee      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_B_POS: commands|=MOVE_B_POSITIVE;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <get_data+0x2b4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <get_data+0x2b4>)
 8002adc:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <get_data+0x2b8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <get_data+0x2b8>)
 8002ae4:	f043 0320 	orr.w	r3, r3, #32
 8002ae8:	60d3      	str	r3, [r2, #12]
						return;
 8002aea:	e0e1      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_B_NEG: commands|=MOVE_B_NEGATIVE;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <get_data+0x2b4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <get_data+0x2b4>)
 8002af6:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <get_data+0x2b8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <get_data+0x2b8>)
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	60d3      	str	r3, [r2, #12]
						return;
 8002b04:	e0d4      	b.n	8002cb0 <get_data+0x44c>
 8002b06:	bf00      	nop
 8002b08:	20017a14 	.word	0x20017a14
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20017a44 	.word	0x20017a44
 8002b14:	400065b0 	.word	0x400065b0
 8002b18:	20017a48 	.word	0x20017a48
 8002b1c:	40006400 	.word	0x40006400
			case CAN_ID_MOVE_C_POS: commands|=MOVE_C_POSITIVE;
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <get_data+0x450>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <get_data+0x450>)
 8002b2a:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <get_data+0x454>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <get_data+0x454>)
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	60d3      	str	r3, [r2, #12]
						return;
 8002b38:	e0ba      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_C_NEG: commands|=MOVE_C_NEGATIVE;
 8002b3a:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <get_data+0x450>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b42:	4a5c      	ldr	r2, [pc, #368]	; (8002cb4 <get_data+0x450>)
 8002b44:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <get_data+0x454>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <get_data+0x454>)
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	60d3      	str	r3, [r2, #12]
						return;
 8002b52:	e0ad      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_SPEED_1: 	timer_speed=SPEED_1;
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <get_data+0x458>)
 8002b56:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b5a:	801a      	strh	r2, [r3, #0]
										increment=INCREMENT_1;
 8002b5c:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <get_data+0x45c>)
 8002b5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b62:	601a      	str	r2, [r3, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002b64:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <get_data+0x454>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <get_data+0x454>)
 8002b6a:	f043 0320 	orr.w	r3, r3, #32
 8002b6e:	60d3      	str	r3, [r2, #12]
							return;
 8002b70:	e09e      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_SPEED_2: 	timer_speed=SPEED_2;
 8002b72:	4b52      	ldr	r3, [pc, #328]	; (8002cbc <get_data+0x458>)
 8002b74:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002b78:	801a      	strh	r2, [r3, #0]
										increment=INCREMENT_2;
 8002b7a:	4b51      	ldr	r3, [pc, #324]	; (8002cc0 <get_data+0x45c>)
 8002b7c:	2264      	movs	r2, #100	; 0x64
 8002b7e:	601a      	str	r2, [r3, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002b80:	4b4d      	ldr	r3, [pc, #308]	; (8002cb8 <get_data+0x454>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <get_data+0x454>)
 8002b86:	f043 0320 	orr.w	r3, r3, #32
 8002b8a:	60d3      	str	r3, [r2, #12]
							return;
 8002b8c:	e090      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MOVE_SPEED_3: 	timer_speed=SPEED_3;
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <get_data+0x458>)
 8002b90:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002b94:	801a      	strh	r2, [r3, #0]
										increment=INCREMENT_3;
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <get_data+0x45c>)
 8002b98:	2214      	movs	r2, #20
 8002b9a:	601a      	str	r2, [r3, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <get_data+0x454>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <get_data+0x454>)
 8002ba2:	f043 0320 	orr.w	r3, r3, #32
 8002ba6:	60d3      	str	r3, [r2, #12]
							return;
 8002ba8:	e082      	b.n	8002cb0 <get_data+0x44c>
							if(!(flags_global_mc&PROGRAM_RUNNING))
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <get_data+0x460>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <get_data+0x35e>
								commands|=START_PROGRAM;
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <get_data+0x450>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	; (8002cb4 <get_data+0x450>)
 8002bc0:	6013      	str	r3, [r2, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <get_data+0x454>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a3c      	ldr	r2, [pc, #240]	; (8002cb8 <get_data+0x454>)
 8002bc8:	f043 0320 	orr.w	r3, r3, #32
 8002bcc:	60d3      	str	r3, [r2, #12]
							return;
 8002bce:	e06f      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_GET_X_POSITION_REQUEST: 	commands|=X_POSITION_REQUEST_FLAG;
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <get_data+0x450>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <get_data+0x450>)
 8002bda:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <get_data+0x454>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a35      	ldr	r2, [pc, #212]	; (8002cb8 <get_data+0x454>)
 8002be2:	f043 0320 	orr.w	r3, r3, #32
 8002be6:	60d3      	str	r3, [r2, #12]
								return;
 8002be8:	e062      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_GET_Y_POSITION_REQUEST: 	commands|=Y_POSITION_REQUEST_FLAG;
 8002bea:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <get_data+0x450>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <get_data+0x450>)
 8002bf4:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <get_data+0x454>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <get_data+0x454>)
 8002bfc:	f043 0320 	orr.w	r3, r3, #32
 8002c00:	60d3      	str	r3, [r2, #12]
								return;
 8002c02:	e055      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_GET_Z_POSITION_REQUEST: 	commands|=Z_POSITION_REQUEST_FLAG;
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <get_data+0x450>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <get_data+0x450>)
 8002c0e:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <get_data+0x454>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <get_data+0x454>)
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	60d3      	str	r3, [r2, #12]
								return;
 8002c1c:	e048      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_B_POSITION_REQUEST: 	commands|=B_POSITION_REQUEST_FLAG;
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <get_data+0x450>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <get_data+0x450>)
 8002c28:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <get_data+0x454>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <get_data+0x454>)
 8002c30:	f043 0320 	orr.w	r3, r3, #32
 8002c34:	60d3      	str	r3, [r2, #12]
								return;
 8002c36:	e03b      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_C_POSITION_REQUEST: 	commands|=C_POSITION_REQUEST_FLAG;
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <get_data+0x450>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <get_data+0x450>)
 8002c42:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002c44:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <get_data+0x454>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <get_data+0x454>)
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	60d3      	str	r3, [r2, #12]
								return;
 8002c50:	e02e      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_GO_TO_MACHINE_ZERO:	commands|=GO_TO_HOME;
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <get_data+0x450>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	4a16      	ldr	r2, [pc, #88]	; (8002cb4 <get_data+0x450>)
 8002c5c:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <get_data+0x454>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <get_data+0x454>)
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	60d3      	str	r3, [r2, #12]
								return;
 8002c6a:	e021      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_HOMING_CYCLE:		commands|=HOMING_CYCLE_FLAG;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <get_data+0x450>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f043 0310 	orr.w	r3, r3, #16
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <get_data+0x450>)
 8002c76:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <get_data+0x454>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <get_data+0x454>)
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	60d3      	str	r3, [r2, #12]
								return;
 8002c84:	e014      	b.n	8002cb0 <get_data+0x44c>
			case CAN_ID_MEASURE_TOOL:		commands|=MEASURE_TOOL_FLAG;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <get_data+0x450>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <get_data+0x450>)
 8002c90:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <get_data+0x454>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <get_data+0x454>)
 8002c98:	f043 0320 	orr.w	r3, r3, #32
 8002c9c:	60d3      	str	r3, [r2, #12]
								return;
 8002c9e:	e007      	b.n	8002cb0 <get_data+0x44c>
		}
	}
	else{
		//thats impossible allmost
		flags_global_mc|=BUFFER_NOT_EMPTY;
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <get_data+0x460>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <get_data+0x460>)
 8002caa:	6013      	str	r3, [r2, #0]
		//flags|=BUFFER_FULL;
		//put_data_into_emergency_buffer();
	}
	return;
 8002cac:	e000      	b.n	8002cb0 <get_data+0x44c>
			default:				return;
 8002cae:	bf00      	nop
}
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20017a48 	.word	0x20017a48
 8002cb8:	40006400 	.word	0x40006400
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	20017a44 	.word	0x20017a44

08002cc8 <handle_mc_data_part_1>:

static inline void handle_mc_data_part_1()
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].x_coordinate=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <handle_mc_data_part_1+0x40>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <handle_mc_data_part_1+0x44>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <handle_mc_data_part_1+0x48>)
 8002cd8:	015b      	lsls	r3, r3, #5
 8002cda:	4413      	add	r3, r2
 8002cdc:	6019      	str	r1, [r3, #0]
	fifo_buffer[fifo_write_ctr].y_coordinate=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <handle_mc_data_part_1+0x40>)
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <handle_mc_data_part_1+0x44>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <handle_mc_data_part_1+0x48>)
 8002cea:	015b      	lsls	r3, r3, #5
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	6019      	str	r1, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <handle_mc_data_part_1+0x4c>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <handle_mc_data_part_1+0x4c>)
 8002cf8:	f043 0320 	orr.w	r3, r3, #32
 8002cfc:	60d3      	str	r3, [r2, #12]
	return;
 8002cfe:	bf00      	nop
}
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	400065b0 	.word	0x400065b0
 8002d0c:	20017a14 	.word	0x20017a14
 8002d10:	20000314 	.word	0x20000314
 8002d14:	40006400 	.word	0x40006400

08002d18 <handle_mc_data_part_2>:

static inline void handle_mc_data_part_2()
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].z_coordinate=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <handle_mc_data_part_2+0x44>)
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <handle_mc_data_part_2+0x48>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <handle_mc_data_part_2+0x4c>)
 8002d28:	015b      	lsls	r3, r3, #5
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	6019      	str	r1, [r3, #0]
	fifo_buffer[fifo_write_ctr].B_axis=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <handle_mc_data_part_2+0x44>)
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <handle_mc_data_part_2+0x48>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <handle_mc_data_part_2+0x4c>)
 8002d3c:	015b      	lsls	r3, r3, #5
 8002d3e:	4413      	add	r3, r2
 8002d40:	330c      	adds	r3, #12
 8002d42:	6019      	str	r1, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <handle_mc_data_part_2+0x50>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <handle_mc_data_part_2+0x50>)
 8002d4a:	f043 0320 	orr.w	r3, r3, #32
 8002d4e:	60d3      	str	r3, [r2, #12]
	return;
 8002d50:	bf00      	nop
}
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	400065b0 	.word	0x400065b0
 8002d60:	20017a14 	.word	0x20017a14
 8002d64:	20000314 	.word	0x20000314
 8002d68:	40006400 	.word	0x40006400

08002d6c <handle_mc_data_part_3>:

static inline void handle_mc_data_part_3()
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].C_axis=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <handle_mc_data_part_3+0x40>)
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <handle_mc_data_part_3+0x44>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <handle_mc_data_part_3+0x48>)
 8002d7c:	015b      	lsls	r3, r3, #5
 8002d7e:	4413      	add	r3, r2
 8002d80:	3310      	adds	r3, #16
 8002d82:	6019      	str	r1, [r3, #0]
	fifo_buffer[fifo_write_ctr].feedrate=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8002d84:	4a09      	ldr	r2, [pc, #36]	; (8002dac <handle_mc_data_part_3+0x40>)
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <handle_mc_data_part_3+0x44>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68d2      	ldr	r2, [r2, #12]
 8002d8c:	4909      	ldr	r1, [pc, #36]	; (8002db4 <handle_mc_data_part_3+0x48>)
 8002d8e:	015b      	lsls	r3, r3, #5
 8002d90:	440b      	add	r3, r1
 8002d92:	3314      	adds	r3, #20
 8002d94:	601a      	str	r2, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <handle_mc_data_part_3+0x4c>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <handle_mc_data_part_3+0x4c>)
 8002d9c:	f043 0320 	orr.w	r3, r3, #32
 8002da0:	60d3      	str	r3, [r2, #12]
	return;
 8002da2:	bf00      	nop
}
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	400065b0 	.word	0x400065b0
 8002db0:	20017a14 	.word	0x20017a14
 8002db4:	20000314 	.word	0x20000314
 8002db8:	40006400 	.word	0x40006400

08002dbc <handle_mc_data_part_4>:

static inline void handle_mc_data_part_4()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].flags=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8002dc0:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <handle_mc_data_part_4+0xb8>)
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	492c      	ldr	r1, [pc, #176]	; (8002e7c <handle_mc_data_part_4+0xc0>)
 8002dca:	015b      	lsls	r3, r3, #5
 8002dcc:	440b      	add	r3, r1
 8002dce:	3318      	adds	r3, #24
 8002dd0:	601a      	str	r2, [r3, #0]
	fifo_buffer[fifo_write_ctr].gcode_line=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8002dd2:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <handle_mc_data_part_4+0xb8>)
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d2      	ldr	r2, [r2, #12]
 8002dda:	4928      	ldr	r1, [pc, #160]	; (8002e7c <handle_mc_data_part_4+0xc0>)
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	440b      	add	r3, r1
 8002de0:	331c      	adds	r3, #28
 8002de2:	601a      	str	r2, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <handle_mc_data_part_4+0xc4>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <handle_mc_data_part_4+0xc4>)
 8002dea:	f043 0320 	orr.w	r3, r3, #32
 8002dee:	60d3      	str	r3, [r2, #12]
	if(++fifo_write_ctr>=FIFO_BUFFER_SIZE){
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d918      	bls.n	8002e34 <handle_mc_data_part_4+0x78>
		if(fifo_read_ctr>0){
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <handle_mc_data_part_4+0xc8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <handle_mc_data_part_4+0x60>
			fifo_write_ctr=0;
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
			//this has to be cleared when the fifo_read_ctr goes to 0
			flags_global_mc|=WRITE_CTR_UNDER_READ_CTR;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <handle_mc_data_part_4+0xcc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e18:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <handle_mc_data_part_4+0xcc>)
 8002e1a:	6013      	str	r3, [r2, #0]
		}
		if(flags_global_mc&FIRST_MOVE){
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <handle_mc_data_part_4+0xcc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <handle_mc_data_part_4+0x78>
			flags_global_mc|=BUFFER_FULL;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <handle_mc_data_part_4+0xcc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <handle_mc_data_part_4+0xcc>)
 8002e32:	6013      	str	r3, [r2, #0]
			//flags&=~FIRST_MOVE;
		}

		//stop_receiving_data();
	}
	if((flags_global_mc&FIRST_MOVE)&&(fifo_write_ctr!=0)){
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <handle_mc_data_part_4+0xcc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <handle_mc_data_part_4+0xb2>
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <handle_mc_data_part_4+0xb2>
		if(!(fifo_write_ctr%100)){	//this 100 should be named frame_size
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <handle_mc_data_part_4+0xbc>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <handle_mc_data_part_4+0xd0>)
 8002e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2164      	movs	r1, #100	; 0x64
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <handle_mc_data_part_4+0xb2>
			request_receiving_data();
 8002e60:	f000 f8be 	bl	8002fe0 <request_receiving_data>
			debug_ctr++;
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <handle_mc_data_part_4+0xd4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <handle_mc_data_part_4+0xd4>)
 8002e6c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	400065b0 	.word	0x400065b0
 8002e78:	20017a14 	.word	0x20017a14
 8002e7c:	20000314 	.word	0x20000314
 8002e80:	40006400 	.word	0x40006400
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20017a44 	.word	0x20017a44
 8002e8c:	51eb851f 	.word	0x51eb851f
 8002e90:	20017aa8 	.word	0x20017aa8

08002e94 <store_data>:
	  //request_receiving_data();
	  return;
}
*/
static inline void store_data()
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	if(flags_global_mc&DATA_SET_PENDING)	//if a complete set xyz and gcode_line_nr was not aqured do not store a new one
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <store_data+0x54>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db1e      	blt.n	8002ede <store_data+0x4a>
		return;

	//there could also be a time_stamp,
	//the gcode_line_nr should be also included

	x_data.step_count=x_standpoint;
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <store_data+0x58>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <store_data+0x5c>)
 8002ea6:	6013      	str	r3, [r2, #0]
	y_data.step_count=y_standpoint;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <store_data+0x60>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <store_data+0x64>)
 8002eae:	6013      	str	r3, [r2, #0]
	z_data.step_count=z_standpoint;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <store_data+0x68>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <store_data+0x6c>)
 8002eb6:	6013      	str	r3, [r2, #0]
	b_data.step_count=b_standpoint;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <store_data+0x70>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <store_data+0x74>)
 8002ebe:	6013      	str	r3, [r2, #0]
	c_data.step_count=c_standpoint;
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <store_data+0x78>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <store_data+0x7c>)
 8002ec6:	6013      	str	r3, [r2, #0]
	n_line_data=gcode_line_number;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <store_data+0x80>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <store_data+0x84>)
 8002ece:	6013      	str	r3, [r2, #0]

	//x_data.glass_scale_count=TIM2->CNT;
	flags_global_mc|=DATA_SET_PENDING;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <store_data+0x54>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <store_data+0x54>)
 8002eda:	6013      	str	r3, [r2, #0]

	return;
 8002edc:	e000      	b.n	8002ee0 <store_data+0x4c>
		return;
 8002ede:	bf00      	nop
}
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	20017a44 	.word	0x20017a44
 8002eec:	20017a78 	.word	0x20017a78
 8002ef0:	20017a18 	.word	0x20017a18
 8002ef4:	20017a7c 	.word	0x20017a7c
 8002ef8:	20017a20 	.word	0x20017a20
 8002efc:	20017a80 	.word	0x20017a80
 8002f00:	20017a28 	.word	0x20017a28
 8002f04:	20017a84 	.word	0x20017a84
 8002f08:	20017a30 	.word	0x20017a30
 8002f0c:	20017a88 	.word	0x20017a88
 8002f10:	20017a38 	.word	0x20017a38
 8002f14:	20017a8c 	.word	0x20017a8c
 8002f18:	20017a40 	.word	0x20017a40

08002f1c <send_data>:

static inline void send_data()
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	static uint8_t counter=0;
	static uint8_t delay_ctr=0;
	delay_ctr++;
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <send_data+0xa0>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <send_data+0xa0>)
 8002f2a:	701a      	strb	r2, [r3, #0]
	if(delay_ctr>=10){
 8002f2c:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <send_data+0xa0>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d941      	bls.n	8002fb8 <send_data+0x9c>
		delay_ctr=0;
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <send_data+0xa0>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
		switch(++counter){
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <send_data+0xa4>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <send_data+0xa4>)
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <send_data+0xa4>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d01c      	beq.n	8002f88 <send_data+0x6c>
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	dc2e      	bgt.n	8002fb0 <send_data+0x94>
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d002      	beq.n	8002f5c <send_data+0x40>
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d00b      	beq.n	8002f72 <send_data+0x56>
 8002f5a:	e029      	b.n	8002fb0 <send_data+0x94>
		case 1:
			send_position_message(x_data.step_count,y_data.step_count,MC_DATA_PART_1_ID);
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <send_data+0xa8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <send_data+0xac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7ff f8c4 	bl	80020f8 <send_position_message>
			break;
 8002f70:	e022      	b.n	8002fb8 <send_data+0x9c>
		case 2:
			send_position_message(z_data.step_count,b_data.step_count,MC_DATA_PART_2_ID);
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <send_data+0xb0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <send_data+0xb4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f04f 72b0 	mov.w	r2, #23068672	; 0x1600000
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7ff f8b9 	bl	80020f8 <send_position_message>
			break;
 8002f86:	e017      	b.n	8002fb8 <send_data+0x9c>
		case 3:
			send_position_message(c_data.step_count,n_line_data,MC_DATA_PART_3_ID);
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <send_data+0xb8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <send_data+0xbc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 8002f96:	4619      	mov	r1, r3
 8002f98:	f7ff f8ae 	bl	80020f8 <send_position_message>
			counter=0;
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <send_data+0xa4>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
			flags_global_mc&=~DATA_SET_PENDING;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <send_data+0xc0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002faa:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <send_data+0xc0>)
 8002fac:	6013      	str	r3, [r2, #0]
			break;
 8002fae:	e003      	b.n	8002fb8 <send_data+0x9c>
		default:
			counter=0;//we should never get in here
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <send_data+0xa4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
			break;
 8002fb6:	bf00      	nop
		}
	}
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20017aac 	.word	0x20017aac
 8002fc0:	20017aad 	.word	0x20017aad
 8002fc4:	20017a18 	.word	0x20017a18
 8002fc8:	20017a20 	.word	0x20017a20
 8002fcc:	20017a28 	.word	0x20017a28
 8002fd0:	20017a30 	.word	0x20017a30
 8002fd4:	20017a38 	.word	0x20017a38
 8002fd8:	20017a40 	.word	0x20017a40
 8002fdc:	20017a44 	.word	0x20017a44

08002fe0 <request_receiving_data>:

void request_receiving_data()
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
	  /*
	  while(!(CAN1->TSR&CAN_TSR_TME0)){
		  	  ;
	  }
	  */
	  CAN1->sTxMailBox[0].TDTR=0;
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <request_receiving_data+0x38>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	  CAN1->sTxMailBox[0].TIR=0;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <request_receiving_data+0x38>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	  CAN1->sTxMailBox[0].TIR=CONTINUE_RECEIVING_DATA_IDENTIFIER;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <request_receiving_data+0x38>)
 8002ff6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ffa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	  CAN1->sTxMailBox[0].TIR|=CAN_TI0R_TXRQ;
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <request_receiving_data+0x38>)
 8003000:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <request_receiving_data+0x38>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	  return;
 800300e:	bf00      	nop
}
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40006400 	.word	0x40006400

0800301c <update_standpoint_x>:

//maybe all the is motordirections could be made a seperate
static inline void update_standpoint_x()
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
		if(X_AXIS_POSITIV)
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <update_standpoint_x+0x2c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <update_standpoint_x+0x18>
			x_standpoint++;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <update_standpoint_x+0x30>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <update_standpoint_x+0x30>)
 8003030:	6013      	str	r3, [r2, #0]
		else
			x_standpoint--;
		return;
 8003032:	e005      	b.n	8003040 <update_standpoint_x+0x24>
			x_standpoint--;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <update_standpoint_x+0x30>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3b01      	subs	r3, #1
 800303a:	4a04      	ldr	r2, [pc, #16]	; (800304c <update_standpoint_x+0x30>)
 800303c:	6013      	str	r3, [r2, #0]
		return;
 800303e:	bf00      	nop
}
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	20017a50 	.word	0x20017a50
 800304c:	20017a78 	.word	0x20017a78

08003050 <check_target_reached_x>:
static inline void check_target_reached_x()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
if(x_standpoint==x_target){
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <check_target_reached_x+0x34>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <check_target_reached_x+0x38>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d10f      	bne.n	8003080 <check_target_reached_x+0x30>
		x_timer_stop();
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <check_target_reached_x+0x3c>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <check_target_reached_x+0x40>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <check_target_reached_x+0x40>)
 8003070:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <check_target_reached_x+0x40>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <check_target_reached_x+0x30>
			prepare_next_move();
 800307a:	f000 f8fb 	bl	8003274 <prepare_next_move>
	}
	return;
 800307e:	bf00      	nop
 8003080:	bf00      	nop
}
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20017a78 	.word	0x20017a78
 8003088:	20017a64 	.word	0x20017a64
 800308c:	40014000 	.word	0x40014000
 8003090:	20017a4c 	.word	0x20017a4c

08003094 <update_standpoint_y>:

static inline void update_standpoint_y()
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	if(Y_AXIS_POSITIV)
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <update_standpoint_y+0x2c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <update_standpoint_y+0x18>
		y_standpoint++;
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <update_standpoint_y+0x30>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <update_standpoint_y+0x30>)
 80030a8:	6013      	str	r3, [r2, #0]
	else
		y_standpoint--;
	return;
 80030aa:	e005      	b.n	80030b8 <update_standpoint_y+0x24>
		y_standpoint--;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <update_standpoint_y+0x30>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <update_standpoint_y+0x30>)
 80030b4:	6013      	str	r3, [r2, #0]
	return;
 80030b6:	bf00      	nop
}
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	20017a54 	.word	0x20017a54
 80030c4:	20017a7c 	.word	0x20017a7c

080030c8 <check_target_reached_y>:
static inline void check_target_reached_y()
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
	if(y_standpoint==y_target){
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <check_target_reached_y+0x34>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <check_target_reached_y+0x38>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d10f      	bne.n	80030f8 <check_target_reached_y+0x30>
		y_timer_stop();
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <check_target_reached_y+0x3c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <check_target_reached_y+0x40>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0302 	bic.w	r3, r3, #2
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <check_target_reached_y+0x40>)
 80030e8:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <check_target_reached_y+0x40>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <check_target_reached_y+0x30>
			prepare_next_move();
 80030f2:	f000 f8bf 	bl	8003274 <prepare_next_move>
	}
	return;
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
}
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20017a7c 	.word	0x20017a7c
 8003100:	20017a68 	.word	0x20017a68
 8003104:	40014400 	.word	0x40014400
 8003108:	20017a4c 	.word	0x20017a4c

0800310c <update_standpoint_z>:
static inline void update_standpoint_z()
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	if(Z_AXIS_POSITIV)
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <update_standpoint_z+0x2c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <update_standpoint_z+0x18>
		z_standpoint++;
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <update_standpoint_z+0x30>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <update_standpoint_z+0x30>)
 8003120:	6013      	str	r3, [r2, #0]
	else
		z_standpoint--;
	return;
 8003122:	e005      	b.n	8003130 <update_standpoint_z+0x24>
		z_standpoint--;
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <update_standpoint_z+0x30>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <update_standpoint_z+0x30>)
 800312c:	6013      	str	r3, [r2, #0]
	return;
 800312e:	bf00      	nop
}
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20017a58 	.word	0x20017a58
 800313c:	20017a80 	.word	0x20017a80

08003140 <check_target_reached_z>:
static inline void check_target_reached_z()
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	if(z_standpoint==z_target){
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <check_target_reached_z+0x34>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <check_target_reached_z+0x38>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d10f      	bne.n	8003170 <check_target_reached_z+0x30>
			z_timer_stop();
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <check_target_reached_z+0x3c>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <check_target_reached_z+0x40>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <check_target_reached_z+0x40>)
 8003160:	6013      	str	r3, [r2, #0]
			if(ALL_MOTORS_STOPPED)
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <check_target_reached_z+0x40>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <check_target_reached_z+0x30>
				prepare_next_move();
 800316a:	f000 f883 	bl	8003274 <prepare_next_move>
		}
	return;
 800316e:	bf00      	nop
 8003170:	bf00      	nop
}
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20017a80 	.word	0x20017a80
 8003178:	20017a6c 	.word	0x20017a6c
 800317c:	40014800 	.word	0x40014800
 8003180:	20017a4c 	.word	0x20017a4c

08003184 <update_standpoint_b>:
static inline void update_standpoint_b()
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	if(B_AXIS_POSITIV)
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <update_standpoint_b+0x2c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <update_standpoint_b+0x18>
		b_standpoint++;
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <update_standpoint_b+0x30>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <update_standpoint_b+0x30>)
 8003198:	6013      	str	r3, [r2, #0]
	else
		b_standpoint--;
	return;
 800319a:	e005      	b.n	80031a8 <update_standpoint_b+0x24>
		b_standpoint--;
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <update_standpoint_b+0x30>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <update_standpoint_b+0x30>)
 80031a4:	6013      	str	r3, [r2, #0]
	return;
 80031a6:	bf00      	nop
}
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	20017a5c 	.word	0x20017a5c
 80031b4:	20017a84 	.word	0x20017a84

080031b8 <check_target_reached_b>:

static inline void check_target_reached_b()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	if(b_standpoint==b_target){
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <check_target_reached_b+0x34>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <check_target_reached_b+0x38>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d10f      	bne.n	80031e8 <check_target_reached_b+0x30>
		b_timer_stop();
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <check_target_reached_b+0x3c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <check_target_reached_b+0x40>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0308 	bic.w	r3, r3, #8
 80031d6:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <check_target_reached_b+0x40>)
 80031d8:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <check_target_reached_b+0x40>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <check_target_reached_b+0x30>
			prepare_next_move();
 80031e2:	f000 f847 	bl	8003274 <prepare_next_move>
	}
	return;
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
}
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20017a84 	.word	0x20017a84
 80031f0:	20017a70 	.word	0x20017a70
 80031f4:	40000400 	.word	0x40000400
 80031f8:	20017a4c 	.word	0x20017a4c

080031fc <update_standpoint_c>:
static inline void update_standpoint_c()
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
	if(C_AXIS_POSITIV)
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <update_standpoint_c+0x2c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <update_standpoint_c+0x18>
		c_standpoint++;
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <update_standpoint_c+0x30>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <update_standpoint_c+0x30>)
 8003210:	6013      	str	r3, [r2, #0]
	else
		c_standpoint--;
	return;
 8003212:	e005      	b.n	8003220 <update_standpoint_c+0x24>
		c_standpoint--;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <update_standpoint_c+0x30>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3b01      	subs	r3, #1
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <update_standpoint_c+0x30>)
 800321c:	6013      	str	r3, [r2, #0]
	return;
 800321e:	bf00      	nop
}
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	20017a60 	.word	0x20017a60
 800322c:	20017a88 	.word	0x20017a88

08003230 <check_target_reached_c>:

static inline void check_target_reached_c()
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	if(c_standpoint==c_target){
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <check_target_reached_c+0x34>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <check_target_reached_c+0x38>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d10f      	bne.n	8003260 <check_target_reached_c+0x30>
		c_timer_stop();
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <check_target_reached_c+0x3c>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <check_target_reached_c+0x40>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <check_target_reached_c+0x40>)
 8003250:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <check_target_reached_c+0x40>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <check_target_reached_c+0x30>
			prepare_next_move();
 800325a:	f000 f80b 	bl	8003274 <prepare_next_move>
	}
	return ;
 800325e:	bf00      	nop
 8003260:	bf00      	nop
}
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20017a88 	.word	0x20017a88
 8003268:	20017a74 	.word	0x20017a74
 800326c:	40000800 	.word	0x40000800
 8003270:	20017a4c 	.word	0x20017a4c

08003274 <prepare_next_move>:




static inline void prepare_next_move()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
	beginning:

	fifo_read_ctr++;
 800327a:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <prepare_next_move+0x104>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <prepare_next_move+0x104>)
 8003282:	6013      	str	r3, [r2, #0]
	if(fifo_read_ctr>=(FIFO_BUFFER_SIZE-1))
 8003284:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <prepare_next_move+0x104>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f640 32b6 	movw	r2, #2998	; 0xbb6
 800328c:	4293      	cmp	r3, r2
 800328e:	d902      	bls.n	8003296 <prepare_next_move+0x22>
		fifo_read_ctr=0;
 8003290:	4b39      	ldr	r3, [pc, #228]	; (8003378 <prepare_next_move+0x104>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

	if((fifo_read_ctr!=0)&&(!(fifo_read_ctr%100))){ //this shoudl come maybe first
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <prepare_next_move+0x104>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <prepare_next_move+0x46>
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <prepare_next_move+0x104>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <prepare_next_move+0x108>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <prepare_next_move+0x46>
		request_receiving_data();
 80032b6:	f7ff fe93 	bl	8002fe0 <request_receiving_data>
	/*int stop=0;
	if(fifo_buffer[fifo_read_ctr].mc_data_part_3_HIGH==1692)
		stop=1;
	*/

	store_data();
 80032ba:	f7ff fdeb 	bl	8002e94 <store_data>
	send_data();
 80032be:	f7ff fe2d 	bl	8002f1c <send_data>

	//send_position_message(fifo_buffer[fifo_read_ctr].mc_data_part_3_HIGH,CAN_ID_GET_X_POSITION_ANSWER); //that was for debugging
	if(fifo_buffer[fifo_read_ctr].flags&(1<<FILE_END_BIT)){
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <prepare_next_move+0x104>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <prepare_next_move+0x10c>)
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	4413      	add	r3, r2
 80032cc:	3318      	adds	r3, #24
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <prepare_next_move+0x92>
		send_position_message(0,0,CAN_ID_PROGRAM_FINISHED);
 80032d8:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
 80032dc:	2100      	movs	r1, #0
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fe ff0a 	bl	80020f8 <send_position_message>
		//flags|=PROGRAM_FINISHED;
		for(int i=0;i<1000000;i++) //wait to send the message before reseting the microcontroller
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	e002      	b.n	80032f0 <prepare_next_move+0x7c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3301      	adds	r3, #1
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <prepare_next_move+0x110>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	ddf8      	ble.n	80032ea <prepare_next_move+0x76>
			;
		commands|=RESET_MICROCONTROLLER;
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <prepare_next_move+0x114>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003300:	4a21      	ldr	r2, [pc, #132]	; (8003388 <prepare_next_move+0x114>)
 8003302:	6013      	str	r3, [r2, #0]
		return;
 8003304:	e035      	b.n	8003372 <prepare_next_move+0xfe>
	}

	if((fifo_read_ctr<fifo_write_ctr)||((fifo_read_ctr>fifo_write_ctr)&&(flags_global_mc&WRITE_CTR_UNDER_READ_CTR))||flags_global_mc&FIRST_MOVE){
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <prepare_next_move+0x104>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <prepare_next_move+0x118>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d311      	bcc.n	8003336 <prepare_next_move+0xc2>
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <prepare_next_move+0x104>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <prepare_next_move+0x118>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d905      	bls.n	800332a <prepare_next_move+0xb6>
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <prepare_next_move+0x11c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <prepare_next_move+0xc2>
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <prepare_next_move+0x11c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <prepare_next_move+0xf0>
		flags_global_mc&=~FIRST_MOVE;
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <prepare_next_move+0x11c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	4a14      	ldr	r2, [pc, #80]	; (8003390 <prepare_next_move+0x11c>)
 8003340:	6013      	str	r3, [r2, #0]
		save_targets();
 8003342:	f000 fc4b 	bl	8003bdc <save_targets>
		set_targets();
 8003346:	f000 fa7b 	bl	8003840 <set_targets>
		int ret=0;
 800334a:	2300      	movs	r3, #0
 800334c:	603b      	str	r3, [r7, #0]
		ret=set_timer_speeds();//directions included, maybe also motor_start could be included
 800334e:	f000 f821 	bl	8003394 <set_timer_speeds>
 8003352:	6038      	str	r0, [r7, #0]
		if(ret){
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d000      	beq.n	800335c <prepare_next_move+0xe8>
			goto beginning;
 800335a:	e78e      	b.n	800327a <prepare_next_move+0x6>
		}
		//set_directions();
		start_motors();
 800335c:	f000 fb18 	bl	8003990 <start_motors>
	if((fifo_read_ctr<fifo_write_ctr)||((fifo_read_ctr>fifo_write_ctr)&&(flags_global_mc&WRITE_CTR_UNDER_READ_CTR))||flags_global_mc&FIRST_MOVE){
 8003360:	bf00      	nop
	}
	else{
		flags_global_mc|=BUFFER_NOT_READY;
	}

	return;
 8003362:	e005      	b.n	8003370 <prepare_next_move+0xfc>
		flags_global_mc|=BUFFER_NOT_READY;
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <prepare_next_move+0x11c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <prepare_next_move+0x11c>)
 800336e:	6013      	str	r3, [r2, #0]
	return;
 8003370:	bf00      	nop
}
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000000 	.word	0x20000000
 800337c:	51eb851f 	.word	0x51eb851f
 8003380:	20000314 	.word	0x20000314
 8003384:	000f423f 	.word	0x000f423f
 8003388:	20017a48 	.word	0x20017a48
 800338c:	20017a14 	.word	0x20017a14
 8003390:	20017a44 	.word	0x20017a44

08003394 <set_timer_speeds>:
//this has to be done with the floating point unit of the microcontroller!!!
//this is bad because it not only sets timer speeds but also the directions...
//this should be not the task of this function
static int set_timer_speeds()
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af00      	add	r7, sp, #0
	int32_t axis_not_starting=0;//if all dont start we have a problem
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
	//uint8_t motor_start_pc=((fifo_buffer[fifo_read_ctr].mc_data_part_4_LOW)>>8);
	float speed=fifo_buffer[fifo_read_ctr].feedrate;
 800339e:	4baf      	ldr	r3, [pc, #700]	; (800365c <set_timer_speeds+0x2c8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4aaf      	ldr	r2, [pc, #700]	; (8003660 <set_timer_speeds+0x2cc>)
 80033a4:	015b      	lsls	r3, r3, #5
 80033a6:	4413      	add	r3, r2
 80033a8:	3314      	adds	r3, #20
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b4:	edc7 7a06 	vstr	s15, [r7, #24]
	float x_line=0;
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
	float y_line=0;
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	float z_line=0;
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
	//if(motor_start_pc&(1<<0))
	x_line=(float)(((float)x_target)-((float)x_standpoint_previous));
 80033ca:	4ba6      	ldr	r3, [pc, #664]	; (8003664 <set_timer_speeds+0x2d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d6:	4ba4      	ldr	r3, [pc, #656]	; (8003668 <set_timer_speeds+0x2d4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	//if(motor_start_pc&(1<<1))
	y_line=(float)(((float)y_target)-((float)y_standpoint_previous));
 80033ea:	4ba0      	ldr	r3, [pc, #640]	; (800366c <set_timer_speeds+0x2d8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f6:	4b9e      	ldr	r3, [pc, #632]	; (8003670 <set_timer_speeds+0x2dc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003406:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	//if(motor_start_pc&(1<<2))
	z_line=(float)(((float)z_target)-((float)z_standpoint_previous));
 800340a:	4b9a      	ldr	r3, [pc, #616]	; (8003674 <set_timer_speeds+0x2e0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003416:	4b98      	ldr	r3, [pc, #608]	; (8003678 <set_timer_speeds+0x2e4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003426:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float real_line=sqrt((x_line*x_line)+(y_line*y_line)+(z_line*z_line));
 800342a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800342e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003436:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800343a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003442:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	ee17 0a90 	vmov	r0, s15
 800344e:	f7fd f81f 	bl	8000490 <__aeabi_f2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ec43 2b10 	vmov	d0, r2, r3
 800345a:	f003 fa87 	bl	800696c <sqrt>
 800345e:	ec53 2b10 	vmov	r2, r3, d0
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f7fd fb1b 	bl	8000aa0 <__aeabi_d2f>
 800346a:	4603      	mov	r3, r0
 800346c:	617b      	str	r3, [r7, #20]


	motor_start=0;
 800346e:	4b83      	ldr	r3, [pc, #524]	; (800367c <set_timer_speeds+0x2e8>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

	motor_b_direction=0;
 8003474:	4b82      	ldr	r3, [pc, #520]	; (8003680 <set_timer_speeds+0x2ec>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
	motor_c_direction=0;
 800347a:	4b82      	ldr	r3, [pc, #520]	; (8003684 <set_timer_speeds+0x2f0>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

	if(real_line==0){
 8003480:	edd7 7a05 	vldr	s15, [r7, #20]
 8003484:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d169      	bne.n	8003562 <set_timer_speeds+0x1ce>
		if(b_target > 0)
 800348e:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <set_timer_speeds+0x2f4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	dd05      	ble.n	80034a2 <set_timer_speeds+0x10e>
			b_target -= 6400;
 8003496:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <set_timer_speeds+0x2f4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 800349e:	4a7a      	ldr	r2, [pc, #488]	; (8003688 <set_timer_speeds+0x2f4>)
 80034a0:	6013      	str	r3, [r2, #0]
		if(c_target > 0)
 80034a2:	4b7a      	ldr	r3, [pc, #488]	; (800368c <set_timer_speeds+0x2f8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dd05      	ble.n	80034b6 <set_timer_speeds+0x122>
			c_target -= 6400;
 80034aa:	4b78      	ldr	r3, [pc, #480]	; (800368c <set_timer_speeds+0x2f8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 80034b2:	4a76      	ldr	r2, [pc, #472]	; (800368c <set_timer_speeds+0x2f8>)
 80034b4:	6013      	str	r3, [r2, #0]
		int b_move=b_target-b_standpoint_previous;
 80034b6:	4b74      	ldr	r3, [pc, #464]	; (8003688 <set_timer_speeds+0x2f4>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <set_timer_speeds+0x2fc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	607b      	str	r3, [r7, #4]
		int c_move=c_target-c_standpoint_previous;
 80034c2:	4b72      	ldr	r3, [pc, #456]	; (800368c <set_timer_speeds+0x2f8>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <set_timer_speeds+0x300>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	603b      	str	r3, [r7, #0]
		if(b_move||c_move){
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <set_timer_speeds+0x146>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d041      	beq.n	800355e <set_timer_speeds+0x1ca>
			if(b_move){
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <set_timer_speeds+0x178>
				motor_start|=B_START;
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <set_timer_speeds+0x2e8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	4a64      	ldr	r2, [pc, #400]	; (800367c <set_timer_speeds+0x2e8>)
 80034ea:	6013      	str	r3, [r2, #0]
				if(b_move<0)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da03      	bge.n	80034fa <set_timer_speeds+0x166>
					SET_B_AXIS_NEGATIVE_DIRECTION();
 80034f2:	4b69      	ldr	r3, [pc, #420]	; (8003698 <set_timer_speeds+0x304>)
 80034f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034f8:	619a      	str	r2, [r3, #24]
				if(b_move>0){
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	dd05      	ble.n	800350c <set_timer_speeds+0x178>
					SET_B_AXIS_POSITIVE_DIRECTION();
 8003500:	4b65      	ldr	r3, [pc, #404]	; (8003698 <set_timer_speeds+0x304>)
 8003502:	2208      	movs	r2, #8
 8003504:	619a      	str	r2, [r3, #24]
					motor_b_direction=1;
 8003506:	4b5e      	ldr	r3, [pc, #376]	; (8003680 <set_timer_speeds+0x2ec>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
				}
			}
			if(c_move){
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <set_timer_speeds+0x1aa>
				motor_start|=C_START;
 8003512:	4b5a      	ldr	r3, [pc, #360]	; (800367c <set_timer_speeds+0x2e8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f043 0310 	orr.w	r3, r3, #16
 800351a:	4a58      	ldr	r2, [pc, #352]	; (800367c <set_timer_speeds+0x2e8>)
 800351c:	6013      	str	r3, [r2, #0]
				if(c_move<0)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da03      	bge.n	800352c <set_timer_speeds+0x198>
					SET_C_AXIS_NEGATIVE_DIRECTION();
 8003524:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <set_timer_speeds+0x304>)
 8003526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800352a:	619a      	str	r2, [r3, #24]
				if(c_move>0){
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	dd05      	ble.n	800353e <set_timer_speeds+0x1aa>
					SET_C_AXIS_POSITIVE_DIRECTION();
 8003532:	4b59      	ldr	r3, [pc, #356]	; (8003698 <set_timer_speeds+0x304>)
 8003534:	2210      	movs	r2, #16
 8003536:	619a      	str	r2, [r3, #24]
					motor_c_direction=1;
 8003538:	4b52      	ldr	r3, [pc, #328]	; (8003684 <set_timer_speeds+0x2f0>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
				}
			}
			TIM3->ARR=65000;//just determine a slow speed
 800353e:	4b57      	ldr	r3, [pc, #348]	; (800369c <set_timer_speeds+0x308>)
 8003540:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC=1;
 8003546:	4b55      	ldr	r3, [pc, #340]	; (800369c <set_timer_speeds+0x308>)
 8003548:	2201      	movs	r2, #1
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR=65000;
 800354c:	4b54      	ldr	r3, [pc, #336]	; (80036a0 <set_timer_speeds+0x30c>)
 800354e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC=1;
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <set_timer_speeds+0x30c>)
 8003556:	2201      	movs	r2, #1
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
			return 0;
 800355a:	2300      	movs	r3, #0
 800355c:	e15e      	b.n	800381c <set_timer_speeds+0x488>
		}
		return 1;
 800355e:	2301      	movs	r3, #1
 8003560:	e15c      	b.n	800381c <set_timer_speeds+0x488>
	}

	float x_ratio=0;
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
	float y_ratio=0;
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
	float z_ratio=0;
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
	motor_x_direction=0;
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <set_timer_speeds+0x310>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
	motor_y_direction=0;
 800357a:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <set_timer_speeds+0x314>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
	motor_z_direction=0;
 8003580:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <set_timer_speeds+0x318>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
	//there has to be a solution for if no motor starts!
	if(x_line){
 8003586:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800358a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	d033      	beq.n	80035fc <set_timer_speeds+0x268>
		if(x_line<0){
 8003594:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a0:	d50a      	bpl.n	80035b8 <set_timer_speeds+0x224>
			SET_X_AXIS_NEGATIVE_DIRECTION();
 80035a2:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <set_timer_speeds+0x304>)
 80035a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035a8:	619a      	str	r2, [r3, #24]
			x_line*=-1;
 80035aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035ae:	eef1 7a67 	vneg.f32	s15, s15
 80035b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80035b6:	e005      	b.n	80035c4 <set_timer_speeds+0x230>
		}
		else{
			SET_X_AXIS_POSITIVE_DIRECTION();
 80035b8:	4b37      	ldr	r3, [pc, #220]	; (8003698 <set_timer_speeds+0x304>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	619a      	str	r2, [r3, #24]
			motor_x_direction=1;
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <set_timer_speeds+0x310>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
		}
		if(x_line>1.0){//could be also >=1.0
 80035c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80035c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d4:	dd06      	ble.n	80035e4 <set_timer_speeds+0x250>
			//if(motor_start_pc&(1<<0)){
				motor_start|=X_START;
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <set_timer_speeds+0x2e8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	4a27      	ldr	r2, [pc, #156]	; (800367c <set_timer_speeds+0x2e8>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e003      	b.n	80035ec <set_timer_speeds+0x258>
			//}
		}
		else
			axis_not_starting|=(1<<0);
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34

		x_ratio=real_line/x_line;
 80035ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80035f0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	if(y_line){
 80035fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003600:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	d05e      	beq.n	80036c8 <set_timer_speeds+0x334>
		//motor_start|=Y_START; //whats that???!!!
		if(y_line<0){
 800360a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800360e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d50a      	bpl.n	800362e <set_timer_speeds+0x29a>
			SET_Y_AXIS_NEGATIVE_DIRECTION();
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <set_timer_speeds+0x304>)
 800361a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800361e:	619a      	str	r2, [r3, #24]
			y_line*=-1;
 8003620:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003624:	eef1 7a67 	vneg.f32	s15, s15
 8003628:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800362c:	e005      	b.n	800363a <set_timer_speeds+0x2a6>
		}
		else{
			SET_Y_AXIS_POSITIVE_DIRECTION();
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <set_timer_speeds+0x304>)
 8003630:	2202      	movs	r2, #2
 8003632:	619a      	str	r2, [r3, #24]
			motor_y_direction=1;
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <set_timer_speeds+0x314>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
		}
		if(y_line>1.0){
 800363a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800363e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	dd31      	ble.n	80036b0 <set_timer_speeds+0x31c>
			//if(motor_start_pc&(1<<1)){
				motor_start|=Y_START;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <set_timer_speeds+0x2e8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <set_timer_speeds+0x2e8>)
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e02e      	b.n	80036b8 <set_timer_speeds+0x324>
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000
 8003660:	20000314 	.word	0x20000314
 8003664:	20017a64 	.word	0x20017a64
 8003668:	20017a90 	.word	0x20017a90
 800366c:	20017a68 	.word	0x20017a68
 8003670:	20017a94 	.word	0x20017a94
 8003674:	20017a6c 	.word	0x20017a6c
 8003678:	20017a98 	.word	0x20017a98
 800367c:	20017aa4 	.word	0x20017aa4
 8003680:	20017a5c 	.word	0x20017a5c
 8003684:	20017a60 	.word	0x20017a60
 8003688:	20017a70 	.word	0x20017a70
 800368c:	20017a74 	.word	0x20017a74
 8003690:	20017a9c 	.word	0x20017a9c
 8003694:	20017aa0 	.word	0x20017aa0
 8003698:	40021000 	.word	0x40021000
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	20017a50 	.word	0x20017a50
 80036a8:	20017a54 	.word	0x20017a54
 80036ac:	20017a58 	.word	0x20017a58
			//}
		}
		else
			axis_not_starting|=(1<<1);
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34

		y_ratio=real_line/y_line;
 80036b8:	edd7 6a05 	vldr	s13, [r7, #20]
 80036bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80036c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c4:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	if(z_line){
 80036c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	d033      	beq.n	800373e <set_timer_speeds+0x3aa>
		//motor_start|=Z_START; //whats that??????!!!!!
		if(z_line<0){
 80036d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	d50a      	bpl.n	80036fa <set_timer_speeds+0x366>
			SET_Z_AXIS_NEGATIVE_DIRECTION();
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <set_timer_speeds+0x490>)
 80036e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80036ea:	619a      	str	r2, [r3, #24]
			z_line*=-1;
 80036ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80036f0:	eef1 7a67 	vneg.f32	s15, s15
 80036f4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80036f8:	e005      	b.n	8003706 <set_timer_speeds+0x372>
		}
		else{
			SET_Z_AXIS_POSITIVE_DIRECTION();
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <set_timer_speeds+0x490>)
 80036fc:	2204      	movs	r2, #4
 80036fe:	619a      	str	r2, [r3, #24]
			motor_z_direction=1;
 8003700:	4b49      	ldr	r3, [pc, #292]	; (8003828 <set_timer_speeds+0x494>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
		}
		if(z_line>1.0){
 8003706:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800370a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800370e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	dd06      	ble.n	8003726 <set_timer_speeds+0x392>
			//if(motor_start_pc&(1<<2)){
				motor_start|=Z_START;
 8003718:	4b44      	ldr	r3, [pc, #272]	; (800382c <set_timer_speeds+0x498>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	4a42      	ldr	r2, [pc, #264]	; (800382c <set_timer_speeds+0x498>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e003      	b.n	800372e <set_timer_speeds+0x39a>
			//}
		}
		else
			axis_not_starting|=(1<<2);
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	637b      	str	r3, [r7, #52]	; 0x34

		z_ratio=real_line/z_line;
 800372e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003732:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if(axis_not_starting==7){
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	2b07      	cmp	r3, #7
 8003742:	d104      	bne.n	800374e <set_timer_speeds+0x3ba>
		motor_start=0;//now we got a problem
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <set_timer_speeds+0x498>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
		return 1;
 800374a:	2301      	movs	r3, #1
 800374c:	e066      	b.n	800381c <set_timer_speeds+0x488>
		flags&=~FIRST_MOVE_NO_Z;
	}
	*/


	float x_speed=speed*x_ratio;
 800374e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a04 	vstr	s15, [r7, #16]
	float y_speed=speed*y_ratio;
 800375e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003762:	edd7 7a08 	vldr	s15, [r7, #32]
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a03 	vstr	s15, [r7, #12]
	float z_speed=speed*z_ratio;
 800376e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003772:	edd7 7a07 	vldr	s15, [r7, #28]
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a02 	vstr	s15, [r7, #8]
	if(x_speed<65535){
 800377e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003782:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003830 <set_timer_speeds+0x49c>
 8003786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	d50b      	bpl.n	80037a8 <set_timer_speeds+0x414>
		TIM9->ARR=x_speed;
 8003790:	4b28      	ldr	r3, [pc, #160]	; (8003834 <set_timer_speeds+0x4a0>)
 8003792:	edd7 7a04 	vldr	s15, [r7, #16]
 8003796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379a:	ee17 2a90 	vmov	r2, s15
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM9->PSC=1;
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <set_timer_speeds+0x4a0>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
 80037a6:	e004      	b.n	80037b2 <set_timer_speeds+0x41e>
	}
	else
		calc_prescaler(x_speed,9);
 80037a8:	2009      	movs	r0, #9
 80037aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80037ae:	f000 f893 	bl	80038d8 <calc_prescaler>

	if(y_speed<65535){
 80037b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003830 <set_timer_speeds+0x49c>
 80037ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c2:	d50b      	bpl.n	80037dc <set_timer_speeds+0x448>
		TIM10->ARR=y_speed;
 80037c4:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <set_timer_speeds+0x4a4>)
 80037c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ce:	ee17 2a90 	vmov	r2, s15
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM10->PSC=1;
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <set_timer_speeds+0x4a4>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
 80037da:	e004      	b.n	80037e6 <set_timer_speeds+0x452>
	}
	else
		calc_prescaler(y_speed,10);
 80037dc:	200a      	movs	r0, #10
 80037de:	ed97 0a03 	vldr	s0, [r7, #12]
 80037e2:	f000 f879 	bl	80038d8 <calc_prescaler>

	if(z_speed<65535){
 80037e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ea:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003830 <set_timer_speeds+0x49c>
 80037ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d50b      	bpl.n	8003810 <set_timer_speeds+0x47c>
		TIM11->ARR=z_speed;
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <set_timer_speeds+0x4a8>)
 80037fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003802:	ee17 2a90 	vmov	r2, s15
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM11->PSC=1;
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <set_timer_speeds+0x4a8>)
 800380a:	2201      	movs	r2, #1
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
 800380e:	e004      	b.n	800381a <set_timer_speeds+0x486>
	}
	else
		calc_prescaler(z_speed,11);
 8003810:	200b      	movs	r0, #11
 8003812:	ed97 0a02 	vldr	s0, [r7, #8]
 8003816:	f000 f85f 	bl	80038d8 <calc_prescaler>

	return 0;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3738      	adds	r7, #56	; 0x38
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	20017a58 	.word	0x20017a58
 800382c:	20017aa4 	.word	0x20017aa4
 8003830:	477fff00 	.word	0x477fff00
 8003834:	40014000 	.word	0x40014000
 8003838:	40014400 	.word	0x40014400
 800383c:	40014800 	.word	0x40014800

08003840 <set_targets>:

static inline void set_targets()
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
	x_target=fifo_buffer[fifo_read_ctr].x_coordinate;
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <set_targets+0x78>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <set_targets+0x7c>)
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	4413      	add	r3, r2
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <set_targets+0x80>)
 8003852:	6013      	str	r3, [r2, #0]
	y_target=fifo_buffer[fifo_read_ctr].y_coordinate;
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <set_targets+0x78>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a18      	ldr	r2, [pc, #96]	; (80038bc <set_targets+0x7c>)
 800385a:	015b      	lsls	r3, r3, #5
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <set_targets+0x84>)
 8003864:	6013      	str	r3, [r2, #0]
	z_target=fifo_buffer[fifo_read_ctr].z_coordinate;
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <set_targets+0x78>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a14      	ldr	r2, [pc, #80]	; (80038bc <set_targets+0x7c>)
 800386c:	015b      	lsls	r3, r3, #5
 800386e:	4413      	add	r3, r2
 8003870:	3308      	adds	r3, #8
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <set_targets+0x88>)
 8003876:	6013      	str	r3, [r2, #0]
	b_target=fifo_buffer[fifo_read_ctr].B_axis;
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <set_targets+0x78>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <set_targets+0x7c>)
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	4413      	add	r3, r2
 8003882:	330c      	adds	r3, #12
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a11      	ldr	r2, [pc, #68]	; (80038cc <set_targets+0x8c>)
 8003888:	6013      	str	r3, [r2, #0]
	c_target=fifo_buffer[fifo_read_ctr].C_axis;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <set_targets+0x78>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <set_targets+0x7c>)
 8003890:	015b      	lsls	r3, r3, #5
 8003892:	4413      	add	r3, r2
 8003894:	3310      	adds	r3, #16
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <set_targets+0x90>)
 800389a:	6013      	str	r3, [r2, #0]
	gcode_line_number=fifo_buffer[fifo_read_ctr].gcode_line;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <set_targets+0x78>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a06      	ldr	r2, [pc, #24]	; (80038bc <set_targets+0x7c>)
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	4413      	add	r3, r2
 80038a6:	331c      	adds	r3, #28
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <set_targets+0x94>)
 80038ac:	6013      	str	r3, [r2, #0]

	return;
 80038ae:	bf00      	nop
}
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000000 	.word	0x20000000
 80038bc:	20000314 	.word	0x20000314
 80038c0:	20017a64 	.word	0x20017a64
 80038c4:	20017a68 	.word	0x20017a68
 80038c8:	20017a6c 	.word	0x20017a6c
 80038cc:	20017a70 	.word	0x20017a70
 80038d0:	20017a74 	.word	0x20017a74
 80038d4:	20017a8c 	.word	0x20017a8c

080038d8 <calc_prescaler>:

static void calc_prescaler(float frequency,int timer)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	ed87 0a01 	vstr	s0, [r7, #4]
 80038e2:	6038      	str	r0, [r7, #0]
	float divisor=frequency/65535.0;
 80038e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80038e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003980 <calc_prescaler+0xa8>
 80038ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038f0:	edc7 7a05 	vstr	s15, [r7, #20]
	divisor+=1;
 80038f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003900:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t prescaler=(uint16_t)divisor;
 8003904:	edd7 7a05 	vldr	s15, [r7, #20]
 8003908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390c:	ee17 3a90 	vmov	r3, s15
 8003910:	827b      	strh	r3, [r7, #18]
	//prescaler*=1000;//experiment for debugging
	float timer_value=frequency/prescaler;
 8003912:	8a7b      	ldrh	r3, [r7, #18]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800391c:	edd7 6a01 	vldr	s13, [r7, #4]
 8003920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003924:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t timer_value_int=(int16_t)timer_value;
 8003928:	edd7 7a03 	vldr	s15, [r7, #12]
 800392c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003930:	ee17 3a90 	vmov	r3, s15
 8003934:	b21b      	sxth	r3, r3
 8003936:	817b      	strh	r3, [r7, #10]
	if(timer==9){
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b09      	cmp	r3, #9
 800393c:	d106      	bne.n	800394c <calc_prescaler+0x74>
		TIM9->PSC=prescaler;
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <calc_prescaler+0xac>)
 8003940:	8a7b      	ldrh	r3, [r7, #18]
 8003942:	6293      	str	r3, [r2, #40]	; 0x28
		TIM9->ARR=timer_value_int;
 8003944:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <calc_prescaler+0xac>)
 8003946:	897b      	ldrh	r3, [r7, #10]
 8003948:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
	else if(timer==11){
			TIM11->PSC=prescaler;
			TIM11->ARR=timer_value_int;
		}
	return;
 800394a:	e013      	b.n	8003974 <calc_prescaler+0x9c>
	else if(timer==10){
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b0a      	cmp	r3, #10
 8003950:	d106      	bne.n	8003960 <calc_prescaler+0x88>
		TIM10->PSC=prescaler;
 8003952:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <calc_prescaler+0xb0>)
 8003954:	8a7b      	ldrh	r3, [r7, #18]
 8003956:	6293      	str	r3, [r2, #40]	; 0x28
		TIM10->ARR=timer_value_int;
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <calc_prescaler+0xb0>)
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	62d3      	str	r3, [r2, #44]	; 0x2c
	return;
 800395e:	e009      	b.n	8003974 <calc_prescaler+0x9c>
	else if(timer==11){
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b0b      	cmp	r3, #11
 8003964:	d106      	bne.n	8003974 <calc_prescaler+0x9c>
			TIM11->PSC=prescaler;
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <calc_prescaler+0xb4>)
 8003968:	8a7b      	ldrh	r3, [r7, #18]
 800396a:	6293      	str	r3, [r2, #40]	; 0x28
			TIM11->ARR=timer_value_int;
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <calc_prescaler+0xb4>)
 800396e:	897b      	ldrh	r3, [r7, #10]
 8003970:	62d3      	str	r3, [r2, #44]	; 0x2c
	return;
 8003972:	bf00      	nop
 8003974:	bf00      	nop
}
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	477fff00 	.word	0x477fff00
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800

08003990 <start_motors>:
	return;
}
*/

static inline void start_motors()
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
	switch(motor_start){
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <start_motors+0x90>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3b01      	subs	r3, #1
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d83e      	bhi.n	8003a1c <start_motors+0x8c>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <start_motors+0x14>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	080039fd 	.word	0x080039fd
 80039ac:	080039eb 	.word	0x080039eb
 80039b0:	08003a03 	.word	0x08003a03
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039f7 	.word	0x080039f7
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	08003a0f 	.word	0x08003a0f
 80039c4:	08003a1d 	.word	0x08003a1d
 80039c8:	08003a1d 	.word	0x08003a1d
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a1d 	.word	0x08003a1d
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	08003a1d 	.word	0x08003a1d
 80039dc:	08003a1d 	.word	0x08003a1d
 80039e0:	08003a15 	.word	0x08003a15
	 	 case 0b00000111:        xyz_axis_start();break;
 80039e4:	f000 f8ae 	bl	8003b44 <xyz_axis_start>
 80039e8:	e017      	b.n	8003a1a <start_motors+0x8a>

	 	 case 0b00000011:        xy_axis_start();break;
 80039ea:	f000 f857 	bl	8003a9c <xy_axis_start>
 80039ee:	e014      	b.n	8003a1a <start_motors+0x8a>

	 	 case 0b00000101:        xz_axis_start();break;
 80039f0:	f000 f870 	bl	8003ad4 <xz_axis_start>
 80039f4:	e011      	b.n	8003a1a <start_motors+0x8a>

	 	 case 0b00000110:        yz_axis_start();break;
 80039f6:	f000 f889 	bl	8003b0c <yz_axis_start>
 80039fa:	e00e      	b.n	8003a1a <start_motors+0x8a>

	     case 0b00000010:        y_axis_start();break;
 80039fc:	f000 f826 	bl	8003a4c <y_axis_start>
 8003a00:	e00b      	b.n	8003a1a <start_motors+0x8a>

	     case 0b00000100:        z_axis_start();break;
 8003a02:	f000 f837 	bl	8003a74 <z_axis_start>
 8003a06:	e008      	b.n	8003a1a <start_motors+0x8a>

	     case 0b00000001:        x_axis_start();break;
 8003a08:	f000 f80c 	bl	8003a24 <x_axis_start>
 8003a0c:	e005      	b.n	8003a1a <start_motors+0x8a>

	     case 0b00001000:		 b_axis_start();break;
 8003a0e:	f000 f8bd 	bl	8003b8c <b_axis_start>
 8003a12:	e002      	b.n	8003a1a <start_motors+0x8a>

	     case 0b00010000:		 c_axis_start();break;
 8003a14:	f000 f8ce 	bl	8003bb4 <c_axis_start>
 8003a18:	bf00      	nop
	}
	return;
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
}
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20017aa4 	.word	0x20017aa4

08003a24 <x_axis_start>:

static inline void x_axis_start(void){
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <x_axis_start+0x20>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <x_axis_start+0x20>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000001;
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <x_axis_start+0x24>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40014000 	.word	0x40014000
 8003a48:	20017a4c 	.word	0x20017a4c

08003a4c <y_axis_start>:
static inline void y_axis_start(void){
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
        y_compare_enable();
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <y_axis_start+0x20>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	621a      	str	r2, [r3, #32]
        y_timer_start();
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <y_axis_start+0x20>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000010;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <y_axis_start+0x24>)
 8003a5e:	2202      	movs	r2, #2
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	20017a4c 	.word	0x20017a4c

08003a74 <z_axis_start>:
static inline void z_axis_start(void){
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
        z_compare_enable();
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <z_axis_start+0x20>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	621a      	str	r2, [r3, #32]
        z_timer_start();
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <z_axis_start+0x20>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000100;
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <z_axis_start+0x24>)
 8003a86:	2204      	movs	r2, #4
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40014800 	.word	0x40014800
 8003a98:	20017a4c 	.word	0x20017a4c

08003a9c <xy_axis_start>:
static inline void xy_axis_start(void){
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <xy_axis_start+0x2c>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	621a      	str	r2, [r3, #32]
        y_compare_enable();
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <xy_axis_start+0x30>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <xy_axis_start+0x2c>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
        y_timer_start();
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <xy_axis_start+0x30>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000011;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <xy_axis_start+0x34>)
 8003aba:	2203      	movs	r2, #3
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	20017a4c 	.word	0x20017a4c

08003ad4 <xz_axis_start>:
static inline void xz_axis_start(void){
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <xz_axis_start+0x2c>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	621a      	str	r2, [r3, #32]
        z_compare_enable();
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <xz_axis_start+0x30>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <xz_axis_start+0x2c>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
        z_timer_start();
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <xz_axis_start+0x30>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000101;
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <xz_axis_start+0x34>)
 8003af2:	2205      	movs	r2, #5
 8003af4:	601a      	str	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014800 	.word	0x40014800
 8003b08:	20017a4c 	.word	0x20017a4c

08003b0c <yz_axis_start>:
static inline void yz_axis_start(void){
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
        y_compare_enable();
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <yz_axis_start+0x2c>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	621a      	str	r2, [r3, #32]
        z_compare_enable();
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <yz_axis_start+0x30>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	621a      	str	r2, [r3, #32]
        y_timer_start();
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <yz_axis_start+0x2c>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
        z_timer_start();
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <yz_axis_start+0x30>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000110;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <yz_axis_start+0x34>)
 8003b2a:	2206      	movs	r2, #6
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800
 8003b40:	20017a4c 	.word	0x20017a4c

08003b44 <xyz_axis_start>:
static inline void xyz_axis_start(void){
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <xyz_axis_start+0x38>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	621a      	str	r2, [r3, #32]
        y_compare_enable();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <xyz_axis_start+0x3c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	621a      	str	r2, [r3, #32]
        z_compare_enable();
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <xyz_axis_start+0x40>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <xyz_axis_start+0x38>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
        y_timer_start();
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <xyz_axis_start+0x3c>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
        z_timer_start();
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <xyz_axis_start+0x40>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000111;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <xyz_axis_start+0x44>)
 8003b6e:	2207      	movs	r2, #7
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800
 8003b88:	20017a4c 	.word	0x20017a4c

08003b8c <b_axis_start>:

static inline void b_axis_start(void){
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
	b_compare_enable();
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <b_axis_start+0x20>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	621a      	str	r2, [r3, #32]
	b_timer_start();
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <b_axis_start+0x20>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
	motor_start_status=0b00001000;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <b_axis_start+0x24>)
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	601a      	str	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	20017a4c 	.word	0x20017a4c

08003bb4 <c_axis_start>:

static inline void c_axis_start(void){
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
	c_compare_enable();
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <c_axis_start+0x20>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	621a      	str	r2, [r3, #32]
	c_timer_start();
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <c_axis_start+0x20>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
	motor_start_status=0b00010000;
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <c_axis_start+0x24>)
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	20017a4c 	.word	0x20017a4c

08003bdc <save_targets>:

static inline void save_targets()
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
	x_standpoint_previous=x_standpoint;
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <save_targets+0x38>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <save_targets+0x3c>)
 8003be6:	6013      	str	r3, [r2, #0]
	y_standpoint_previous=y_standpoint;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <save_targets+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <save_targets+0x44>)
 8003bee:	6013      	str	r3, [r2, #0]
	z_standpoint_previous=z_standpoint;
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <save_targets+0x48>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <save_targets+0x4c>)
 8003bf6:	6013      	str	r3, [r2, #0]
	b_standpoint_previous=b_standpoint;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <save_targets+0x50>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <save_targets+0x54>)
 8003bfe:	6013      	str	r3, [r2, #0]
	c_standpoint_previous=c_standpoint;
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <save_targets+0x58>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <save_targets+0x5c>)
 8003c06:	6013      	str	r3, [r2, #0]
	return;
 8003c08:	bf00      	nop
}
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20017a78 	.word	0x20017a78
 8003c18:	20017a90 	.word	0x20017a90
 8003c1c:	20017a7c 	.word	0x20017a7c
 8003c20:	20017a94 	.word	0x20017a94
 8003c24:	20017a80 	.word	0x20017a80
 8003c28:	20017a98 	.word	0x20017a98
 8003c2c:	20017a84 	.word	0x20017a84
 8003c30:	20017a9c 	.word	0x20017a9c
 8003c34:	20017a88 	.word	0x20017a88
 8003c38:	20017aa0 	.word	0x20017aa0

08003c3c <manual_motor_controll>:

static inline void manual_motor_controll()
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0

	if(flags_global_mc&X_MANUAL_MOVE)
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <manual_motor_controll+0x60>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <manual_motor_controll+0x16>
		toggle_pin_x_axis();
 8003c4c:	f000 f828 	bl	8003ca0 <toggle_pin_x_axis>
		toggle_pin_z_axis();
	else if(flags_global_mc&B_MANUAL_MOVE)
		toggle_pin_b_axis();
	else if(flags_global_mc&C_MANUAL_MOVE)
		toggle_pin_c_axis();
}
 8003c50:	e022      	b.n	8003c98 <manual_motor_controll+0x5c>
	else if(flags_global_mc&Y_MANUAL_MOVE)
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <manual_motor_controll+0x60>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <manual_motor_controll+0x28>
		toggle_pin_y_axis();
 8003c5e:	f000 f88b 	bl	8003d78 <toggle_pin_y_axis>
}
 8003c62:	e019      	b.n	8003c98 <manual_motor_controll+0x5c>
	else if(flags_global_mc&Z_MANUAL_MOVE)
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <manual_motor_controll+0x60>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <manual_motor_controll+0x3a>
		toggle_pin_z_axis();
 8003c70:	f000 f8ec 	bl	8003e4c <toggle_pin_z_axis>
}
 8003c74:	e010      	b.n	8003c98 <manual_motor_controll+0x5c>
	else if(flags_global_mc&B_MANUAL_MOVE)
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <manual_motor_controll+0x60>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <manual_motor_controll+0x4c>
		toggle_pin_b_axis();
 8003c82:	f000 f97f 	bl	8003f84 <toggle_pin_b_axis>
}
 8003c86:	e007      	b.n	8003c98 <manual_motor_controll+0x5c>
	else if(flags_global_mc&C_MANUAL_MOVE)
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <manual_motor_controll+0x60>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <manual_motor_controll+0x5c>
		toggle_pin_c_axis();
 8003c94:	f000 f9b6 	bl	8004004 <toggle_pin_c_axis>
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20017a44 	.word	0x20017a44

08003ca0 <toggle_pin_x_axis>:

static inline void toggle_pin_x_axis()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0

	if(GPIOE->ODR&GPIO_ODR_OD5)
 8003ca4:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <toggle_pin_x_axis+0xb8>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <toggle_pin_x_axis+0x1e>
		GPIOE->BSRR|=GPIO_BSRR_BR5;
 8003cb0:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <toggle_pin_x_axis+0xb8>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <toggle_pin_x_axis+0xb8>)
 8003cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cba:	6193      	str	r3, [r2, #24]
 8003cbc:	e005      	b.n	8003cca <toggle_pin_x_axis+0x2a>
	else
		GPIOE->BSRR|=GPIO_BSRR_BS5;
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <toggle_pin_x_axis+0xb8>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <toggle_pin_x_axis+0xb8>)
 8003cc4:	f043 0320 	orr.w	r3, r3, #32
 8003cc8:	6193      	str	r3, [r2, #24]

	if(motor_x_direction)
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <toggle_pin_x_axis+0xbc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <toggle_pin_x_axis+0x3e>
		x_standpoint++;
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <toggle_pin_x_axis+0xc0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <toggle_pin_x_axis+0xc0>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e004      	b.n	8003ce8 <toggle_pin_x_axis+0x48>
	else
		x_standpoint--;
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <toggle_pin_x_axis+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <toggle_pin_x_axis+0xc0>)
 8003ce6:	6013      	str	r3, [r2, #0]
	if(commands&HOMING_CYCLE_FLAG){
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <toggle_pin_x_axis+0xc4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01d      	beq.n	8003d30 <toggle_pin_x_axis+0x90>
		if((GPIOB->IDR&(1<<1))){//if the endswitch of the x_axis is pressed
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <toggle_pin_x_axis+0xc8>)
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <toggle_pin_x_axis+0x90>
			wait();
 8003d00:	f000 f9c4 	bl	800408c <wait>
			if((GPIOB->IDR&(1<<1))){
 8003d04:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <toggle_pin_x_axis+0xc8>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00f      	beq.n	8003d30 <toggle_pin_x_axis+0x90>
				x_standpoint=x_target;//that will make the motor stop
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <toggle_pin_x_axis+0xcc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <toggle_pin_x_axis+0xc0>)
 8003d16:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				if(commands&HOMING_CYCLE_FLAG)
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <toggle_pin_x_axis+0xc4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <toggle_pin_x_axis+0x90>
					flags_global_mc|=X_HOMED;
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <toggle_pin_x_axis+0xd0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <toggle_pin_x_axis+0xd0>)
 8003d2e:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if(x_standpoint==x_target){
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <toggle_pin_x_axis+0xc0>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <toggle_pin_x_axis+0xcc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d10b      	bne.n	8003d54 <toggle_pin_x_axis+0xb4>
		manual_timer_stop();
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <toggle_pin_x_axis+0xd4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
		manual_compare_disable();
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <toggle_pin_x_axis+0xd4>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	621a      	str	r2, [r3, #32]
		flags_global_mc&=~X_MANUAL_MOVE;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <toggle_pin_x_axis+0xd0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <toggle_pin_x_axis+0xd0>)
 8003d52:	6013      	str	r3, [r2, #0]
	}
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	20017a50 	.word	0x20017a50
 8003d60:	20017a78 	.word	0x20017a78
 8003d64:	20017a48 	.word	0x20017a48
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	20017a64 	.word	0x20017a64
 8003d70:	20017a44 	.word	0x20017a44
 8003d74:	40001c00 	.word	0x40001c00

08003d78 <toggle_pin_y_axis>:

static inline void toggle_pin_y_axis()
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD8)
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <toggle_pin_y_axis+0xb4>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <toggle_pin_y_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR8;
 8003d88:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <toggle_pin_y_axis+0xb4>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <toggle_pin_y_axis+0xb4>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6193      	str	r3, [r2, #24]
 8003d94:	e005      	b.n	8003da2 <toggle_pin_y_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS8;
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <toggle_pin_y_axis+0xb4>)
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <toggle_pin_y_axis+0xb4>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6193      	str	r3, [r2, #24]

	if(motor_y_direction)
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <toggle_pin_y_axis+0xb8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <toggle_pin_y_axis+0x3e>
		y_standpoint++;
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <toggle_pin_y_axis+0xbc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <toggle_pin_y_axis+0xbc>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e004      	b.n	8003dc0 <toggle_pin_y_axis+0x48>
	else
		y_standpoint--;
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <toggle_pin_y_axis+0xbc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <toggle_pin_y_axis+0xbc>)
 8003dbe:	6013      	str	r3, [r2, #0]
	if(commands&HOMING_CYCLE_FLAG){
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <toggle_pin_y_axis+0xc0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01d      	beq.n	8003e08 <toggle_pin_y_axis+0x90>
		if((GPIOD->IDR&(1<<2))){//if the endswitch of the x_axis is pressed
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <toggle_pin_y_axis+0xc4>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <toggle_pin_y_axis+0x90>
			wait();
 8003dd8:	f000 f958 	bl	800408c <wait>
			if((GPIOD->IDR&(1<<2))){
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <toggle_pin_y_axis+0xc4>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00f      	beq.n	8003e08 <toggle_pin_y_axis+0x90>
				y_standpoint=y_target;//that will make the motor stop
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <toggle_pin_y_axis+0xc8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <toggle_pin_y_axis+0xbc>)
 8003dee:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				if(commands&HOMING_CYCLE_FLAG)
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <toggle_pin_y_axis+0xc0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <toggle_pin_y_axis+0x90>
					flags_global_mc|=Y_HOMED;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <toggle_pin_y_axis+0xcc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <toggle_pin_y_axis+0xcc>)
 8003e06:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if(y_standpoint==y_target){
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <toggle_pin_y_axis+0xbc>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <toggle_pin_y_axis+0xc8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d108      	bne.n	8003e26 <toggle_pin_y_axis+0xae>
		manual_timer_stop();
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <toggle_pin_y_axis+0xd0>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
		flags_global_mc&=~Y_MANUAL_MOVE;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <toggle_pin_y_axis+0xcc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <toggle_pin_y_axis+0xcc>)
 8003e24:	6013      	str	r3, [r2, #0]
	}
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40020400 	.word	0x40020400
 8003e30:	20017a54 	.word	0x20017a54
 8003e34:	20017a7c 	.word	0x20017a7c
 8003e38:	20017a48 	.word	0x20017a48
 8003e3c:	40020c00 	.word	0x40020c00
 8003e40:	20017a68 	.word	0x20017a68
 8003e44:	20017a44 	.word	0x20017a44
 8003e48:	40001c00 	.word	0x40001c00

08003e4c <toggle_pin_z_axis>:

static inline void toggle_pin_z_axis()
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD9)
 8003e50:	4b44      	ldr	r3, [pc, #272]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d006      	beq.n	8003e6a <toggle_pin_z_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR9;
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	4a40      	ldr	r2, [pc, #256]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e66:	6193      	str	r3, [r2, #24]
 8003e68:	e005      	b.n	8003e76 <toggle_pin_z_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS9;
 8003e6a:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e74:	6193      	str	r3, [r2, #24]

	if(motor_z_direction)
 8003e76:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <toggle_pin_z_axis+0x11c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <toggle_pin_z_axis+0x3e>
		z_standpoint++;
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	4a39      	ldr	r2, [pc, #228]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e004      	b.n	8003e94 <toggle_pin_z_axis+0x48>
	else
		z_standpoint--;
 8003e8a:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a36      	ldr	r2, [pc, #216]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003e92:	6013      	str	r3, [r2, #0]
	if(commands&HOMING_CYCLE_FLAG){
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <toggle_pin_z_axis+0x124>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01d      	beq.n	8003edc <toggle_pin_z_axis+0x90>
		if((GPIOB->IDR&(1<<3))){//if the endswitch of the x_axis is pressed
 8003ea0:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <toggle_pin_z_axis+0x90>
			wait();
 8003eac:	f000 f8ee 	bl	800408c <wait>
			if((GPIOB->IDR&(1<<3))){
 8003eb0:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00f      	beq.n	8003edc <toggle_pin_z_axis+0x90>
				z_standpoint=z_target;//that will make the motor stop
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <toggle_pin_z_axis+0x128>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003ec2:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				if(commands&HOMING_CYCLE_FLAG)
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <toggle_pin_z_axis+0x124>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <toggle_pin_z_axis+0x90>
					flags_global_mc|=Z_HOMED;
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003eda:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if(commands&MEASURE_TOOL_FLAG){
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <toggle_pin_z_axis+0x124>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02b      	beq.n	8003f40 <toggle_pin_z_axis+0xf4>
		if(z_standpoint==-166400)
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <toggle_pin_z_axis+0x130>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d103      	bne.n	8003efa <toggle_pin_z_axis+0xae>
			TIM13->ARR=SPEED_2; //that direct change in hardware register, because there is no function for that yet
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <toggle_pin_z_axis+0x134>)
 8003ef4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003ef8:	62da      	str	r2, [r3, #44]	; 0x2c
		if((GPIOB->IDR&(1<<4))){//if the endswitch of the x_axis is pressed
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <toggle_pin_z_axis+0xf4>
			wait();
 8003f06:	f000 f8c1 	bl	800408c <wait>
			if((GPIOB->IDR&(1<<4))){
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <toggle_pin_z_axis+0x118>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <toggle_pin_z_axis+0xf4>
				if(commands&MEASURE_TOOL_FLAG){
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <toggle_pin_z_axis+0x124>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <toggle_pin_z_axis+0xf4>
					flags_global_mc|=MEASURED_TOOL;
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f2a:	4a13      	ldr	r2, [pc, #76]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003f2c:	6013      	str	r3, [r2, #0]
					manual_timer_stop();
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <toggle_pin_z_axis+0x134>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
					flags_global_mc&=~Z_MANUAL_MOVE;
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f3c:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003f3e:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}

	if(z_standpoint==z_target){
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <toggle_pin_z_axis+0x120>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <toggle_pin_z_axis+0x128>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d108      	bne.n	8003f5e <toggle_pin_z_axis+0x112>
		manual_timer_stop();
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <toggle_pin_z_axis+0x134>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
		flags_global_mc&=~Z_MANUAL_MOVE;
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <toggle_pin_z_axis+0x12c>)
 8003f5c:	6013      	str	r3, [r2, #0]
	}
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40020400 	.word	0x40020400
 8003f68:	20017a58 	.word	0x20017a58
 8003f6c:	20017a80 	.word	0x20017a80
 8003f70:	20017a48 	.word	0x20017a48
 8003f74:	20017a6c 	.word	0x20017a6c
 8003f78:	20017a44 	.word	0x20017a44
 8003f7c:	fffd7600 	.word	0xfffd7600
 8003f80:	40001c00 	.word	0x40001c00

08003f84 <toggle_pin_b_axis>:

static inline void toggle_pin_b_axis()
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
	if(GPIOA->ODR&GPIO_ODR_OD6)
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <toggle_pin_b_axis+0x6c>)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <toggle_pin_b_axis+0x1e>
		GPIOA->BSRR|=GPIO_BSRR_BR6;
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <toggle_pin_b_axis+0x6c>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <toggle_pin_b_axis+0x6c>)
 8003f9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f9e:	6193      	str	r3, [r2, #24]
 8003fa0:	e005      	b.n	8003fae <toggle_pin_b_axis+0x2a>
	else
		GPIOA->BSRR|=GPIO_BSRR_BS6;
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <toggle_pin_b_axis+0x6c>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <toggle_pin_b_axis+0x6c>)
 8003fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fac:	6193      	str	r3, [r2, #24]

	if(motor_b_direction)
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <toggle_pin_b_axis+0x70>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <toggle_pin_b_axis+0x3e>
		b_standpoint++;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <toggle_pin_b_axis+0x74>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	4a0e      	ldr	r2, [pc, #56]	; (8003ff8 <toggle_pin_b_axis+0x74>)
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e004      	b.n	8003fcc <toggle_pin_b_axis+0x48>
	else
		b_standpoint--;
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <toggle_pin_b_axis+0x74>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	; (8003ff8 <toggle_pin_b_axis+0x74>)
 8003fca:	6013      	str	r3, [r2, #0]
			}
		}
	}
	*/

	if(b_standpoint==b_target){
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <toggle_pin_b_axis+0x74>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <toggle_pin_b_axis+0x78>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d105      	bne.n	8003fe4 <toggle_pin_b_axis+0x60>

		flags_global_mc&=~B_MANUAL_MOVE;
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <toggle_pin_b_axis+0x7c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <toggle_pin_b_axis+0x7c>)
 8003fe2:	6013      	str	r3, [r2, #0]
	}
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	20017a5c 	.word	0x20017a5c
 8003ff8:	20017a84 	.word	0x20017a84
 8003ffc:	20017a70 	.word	0x20017a70
 8004000:	20017a44 	.word	0x20017a44

08004004 <toggle_pin_c_axis>:

static inline void toggle_pin_c_axis()
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD6)
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <toggle_pin_c_axis+0x70>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <toggle_pin_c_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR6;
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <toggle_pin_c_axis+0x70>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <toggle_pin_c_axis+0x70>)
 800401a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800401e:	6193      	str	r3, [r2, #24]
 8004020:	e005      	b.n	800402e <toggle_pin_c_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS6;
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <toggle_pin_c_axis+0x70>)
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <toggle_pin_c_axis+0x70>)
 8004028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402c:	6193      	str	r3, [r2, #24]

	if(motor_c_direction)
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <toggle_pin_c_axis+0x74>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <toggle_pin_c_axis+0x3e>
		c_standpoint++;
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <toggle_pin_c_axis+0x78>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	4a0f      	ldr	r2, [pc, #60]	; (800407c <toggle_pin_c_axis+0x78>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e004      	b.n	800404c <toggle_pin_c_axis+0x48>
	else
		c_standpoint--;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <toggle_pin_c_axis+0x78>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	4a0c      	ldr	r2, [pc, #48]	; (800407c <toggle_pin_c_axis+0x78>)
 800404a:	6013      	str	r3, [r2, #0]
			}
		}
	}
	*/

	if(c_standpoint==c_target){
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <toggle_pin_c_axis+0x78>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <toggle_pin_c_axis+0x7c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d108      	bne.n	800406a <toggle_pin_c_axis+0x66>
		manual_timer_stop();
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <toggle_pin_c_axis+0x80>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
		flags_global_mc&=~C_MANUAL_MOVE;
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <toggle_pin_c_axis+0x84>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 0308 	bic.w	r3, r3, #8
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <toggle_pin_c_axis+0x84>)
 8004068:	6013      	str	r3, [r2, #0]
	}
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40020400 	.word	0x40020400
 8004078:	20017a60 	.word	0x20017a60
 800407c:	20017a88 	.word	0x20017a88
 8004080:	20017a74 	.word	0x20017a74
 8004084:	40001c00 	.word	0x40001c00
 8004088:	20017a44 	.word	0x20017a44

0800408c <wait>:

static inline void wait()
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
	for(int i=0;i<20;i++)
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	e002      	b.n	800409e <wait+0x12>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b13      	cmp	r3, #19
 80040a2:	ddf9      	ble.n	8004098 <wait+0xc>
		;
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <SystemInit+0x20>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <SystemInit+0x20>)
 80040c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 80040d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040dc:	480d      	ldr	r0, [pc, #52]	; (8004114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040de:	490e      	ldr	r1, [pc, #56]	; (8004118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040e0:	4a0e      	ldr	r2, [pc, #56]	; (800411c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040e4:	e002      	b.n	80040ec <LoopCopyDataInit>

080040e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ea:	3304      	adds	r3, #4

080040ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040f0:	d3f9      	bcc.n	80040e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040f2:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040f4:	4c0b      	ldr	r4, [pc, #44]	; (8004124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f8:	e001      	b.n	80040fe <LoopFillZerobss>

080040fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040fc:	3204      	adds	r2, #4

080040fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004100:	d3fb      	bcc.n	80040fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004102:	f7ff ffd7 	bl	80040b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004106:	f002 fc0d 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800410a:	f7fc fead 	bl	8000e68 <main>
  bx  lr    
 800410e:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8004110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004118:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800411c:	08006bb0 	.word	0x08006bb0
  ldr r2, =_sbss
 8004120:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004124:	20017bec 	.word	0x20017bec

08004128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004128:	e7fe      	b.n	8004128 <ADC_IRQHandler>
	...

0800412c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_Init+0x40>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <HAL_Init+0x40>)
 8004136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_Init+0x40>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_Init+0x40>)
 8004142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_Init+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <HAL_Init+0x40>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004154:	2003      	movs	r0, #3
 8004156:	f000 fdab 	bl	8004cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800415a:	2000      	movs	r0, #0
 800415c:	f000 f808 	bl	8004170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004160:	f7fe f850 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00

08004170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_InitTick+0x54>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_InitTick+0x58>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004186:	fbb3 f3f1 	udiv	r3, r3, r1
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fdc3 	bl	8004d1a <HAL_SYSTICK_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e00e      	b.n	80041bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b0f      	cmp	r3, #15
 80041a2:	d80a      	bhi.n	80041ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041a4:	2200      	movs	r2, #0
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	f000 fd8b 	bl	8004cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <HAL_InitTick+0x5c>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	20000014 	.word	0x20000014
 80041cc:	20000010 	.word	0x20000010

080041d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_IncTick+0x20>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_IncTick+0x24>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4413      	add	r3, r2
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <HAL_IncTick+0x24>)
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000014 	.word	0x20000014
 80041f4:	20017ab0 	.word	0x20017ab0

080041f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return uwTick;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_GetTick+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20017ab0 	.word	0x20017ab0

08004210 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0ed      	b.n	80043fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fe f810 	bl	8002254 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004244:	f7ff ffd8 	bl	80041f8 <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800424a:	e012      	b.n	8004272 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800424c:	f7ff ffd4 	bl	80041f8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b0a      	cmp	r3, #10
 8004258:	d90b      	bls.n	8004272 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2205      	movs	r2, #5
 800426a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0c5      	b.n	80043fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0e5      	beq.n	800424c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0202 	bic.w	r2, r2, #2
 800428e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004290:	f7ff ffb2 	bl	80041f8 <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004296:	e012      	b.n	80042be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004298:	f7ff ffae 	bl	80041f8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b0a      	cmp	r3, #10
 80042a4:	d90b      	bls.n	80042be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2205      	movs	r2, #5
 80042b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e09f      	b.n	80043fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7e1b      	ldrb	r3, [r3, #24]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d108      	bne.n	80042e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e007      	b.n	80042f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7e5b      	ldrb	r3, [r3, #25]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e007      	b.n	8004320 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7e9b      	ldrb	r3, [r3, #26]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d108      	bne.n	800433a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0220 	orr.w	r2, r2, #32
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e007      	b.n	800434a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0220 	bic.w	r2, r2, #32
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7edb      	ldrb	r3, [r3, #27]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d108      	bne.n	8004364 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0210 	bic.w	r2, r2, #16
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e007      	b.n	8004374 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0210 	orr.w	r2, r2, #16
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7f1b      	ldrb	r3, [r3, #28]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d108      	bne.n	800438e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e007      	b.n	800439e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0208 	bic.w	r2, r2, #8
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7f5b      	ldrb	r3, [r3, #29]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d108      	bne.n	80043b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0204 	orr.w	r2, r2, #4
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e007      	b.n	80043c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	ea42 0103 	orr.w	r1, r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	1e5a      	subs	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d003      	beq.n	800442e <HAL_CAN_ConfigFilter+0x26>
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f040 80be 	bne.w	80045aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004430:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004448:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	431a      	orrs	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2201      	movs	r2, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	43db      	mvns	r3, r3
 8004480:	401a      	ands	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d123      	bne.n	80044d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3248      	adds	r2, #72	; 0x48
 80044b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	3348      	adds	r3, #72	; 0x48
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d122      	bne.n	8004526 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004500:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	3248      	adds	r2, #72	; 0x48
 8004506:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800451a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	3348      	adds	r3, #72	; 0x48
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004540:	e007      	b.n	8004552 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	431a      	orrs	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	401a      	ands	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800456c:	e007      	b.n	800457e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	431a      	orrs	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	431a      	orrs	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800459c:	f023 0201 	bic.w	r2, r3, #1
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e006      	b.n	80045b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40006400 	.word	0x40006400

080045c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d12e      	bne.n	800463a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045f4:	f7ff fe00 	bl	80041f8 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80045fa:	e012      	b.n	8004622 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045fc:	f7ff fdfc 	bl	80041f8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b0a      	cmp	r3, #10
 8004608:	d90b      	bls.n	8004622 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2205      	movs	r2, #5
 800461a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e012      	b.n	8004648 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e5      	bne.n	80045fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e006      	b.n	8004648 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004660:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d002      	beq.n	800466e <HAL_CAN_ActivateNotification+0x1e>
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d109      	bne.n	8004682 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6959      	ldr	r1, [r3, #20]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e006      	b.n	8004690 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d07c      	beq.n	80047dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d023      	beq.n	8004734 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2201      	movs	r2, #1
 80046f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f983 	bl	8004a0a <HAL_CAN_TxMailbox0CompleteCallback>
 8004704:	e016      	b.n	8004734 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	e00c      	b.n	8004734 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
 800472c:	e002      	b.n	8004734 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f989 	bl	8004a46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d024      	beq.n	8004788 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004746:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f963 	bl	8004a1e <HAL_CAN_TxMailbox1CompleteCallback>
 8004758:	e016      	b.n	8004788 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
 800476c:	e00c      	b.n	8004788 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	e002      	b.n	8004788 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f969 	bl	8004a5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d024      	beq.n	80047dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800479a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f943 	bl	8004a32 <HAL_CAN_TxMailbox2CompleteCallback>
 80047ac:	e016      	b.n	80047dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	e00c      	b.n	80047dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	e002      	b.n	80047dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f949 	bl	8004a6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2208      	movs	r2, #8
 800481a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f93a 	bl	8004a96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f921 	bl	8004a82 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800485a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d006      	beq.n	8004886 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f91c 	bl	8004abe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f903 	bl	8004aaa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f906 	bl	8004ad2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2208      	movs	r2, #8
 80048e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8ff 	bl	8004ae6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d07b      	beq.n	80049ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d072      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f043 0302 	orr.w	r3, r3, #2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004956:	2b00      	cmp	r3, #0
 8004958:	d043      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004960:	2b00      	cmp	r3, #0
 8004962:	d03e      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800496a:	2b60      	cmp	r3, #96	; 0x60
 800496c:	d02b      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x32a>
 800496e:	2b60      	cmp	r3, #96	; 0x60
 8004970:	d82e      	bhi.n	80049d0 <HAL_CAN_IRQHandler+0x334>
 8004972:	2b50      	cmp	r3, #80	; 0x50
 8004974:	d022      	beq.n	80049bc <HAL_CAN_IRQHandler+0x320>
 8004976:	2b50      	cmp	r3, #80	; 0x50
 8004978:	d82a      	bhi.n	80049d0 <HAL_CAN_IRQHandler+0x334>
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d019      	beq.n	80049b2 <HAL_CAN_IRQHandler+0x316>
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d826      	bhi.n	80049d0 <HAL_CAN_IRQHandler+0x334>
 8004982:	2b30      	cmp	r3, #48	; 0x30
 8004984:	d010      	beq.n	80049a8 <HAL_CAN_IRQHandler+0x30c>
 8004986:	2b30      	cmp	r3, #48	; 0x30
 8004988:	d822      	bhi.n	80049d0 <HAL_CAN_IRQHandler+0x334>
 800498a:	2b10      	cmp	r3, #16
 800498c:	d002      	beq.n	8004994 <HAL_CAN_IRQHandler+0x2f8>
 800498e:	2b20      	cmp	r3, #32
 8004990:	d005      	beq.n	800499e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004992:	e01d      	b.n	80049d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	f043 0308 	orr.w	r3, r3, #8
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800499c:	e019      	b.n	80049d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	f043 0310 	orr.w	r3, r3, #16
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049a6:	e014      	b.n	80049d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049b0:	e00f      	b.n	80049d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ba:	e00a      	b.n	80049d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049c4:	e005      	b.n	80049d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ce:	e000      	b.n	80049d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80049d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2204      	movs	r2, #4
 80049e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f87c 	bl	8004afa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a02:	bf00      	nop
 8004a04:	3728      	adds	r7, #40	; 0x28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <__NVIC_SetPriorityGrouping>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <__NVIC_SetPriorityGrouping+0x44>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b42:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <__NVIC_SetPriorityGrouping+0x44>)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	60d3      	str	r3, [r2, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <__NVIC_GetPriorityGrouping>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <__NVIC_GetPriorityGrouping+0x18>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 0307 	and.w	r3, r3, #7
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <__NVIC_EnableIRQ>:
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	db0b      	blt.n	8004b9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	4907      	ldr	r1, [pc, #28]	; (8004bac <__NVIC_EnableIRQ+0x38>)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2001      	movs	r0, #1
 8004b96:	fa00 f202 	lsl.w	r2, r0, r2
 8004b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000e100 	.word	0xe000e100

08004bb0 <__NVIC_SetPriority>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	db0a      	blt.n	8004bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	490c      	ldr	r1, [pc, #48]	; (8004bfc <__NVIC_SetPriority+0x4c>)
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	0112      	lsls	r2, r2, #4
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bd8:	e00a      	b.n	8004bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4908      	ldr	r1, [pc, #32]	; (8004c00 <__NVIC_SetPriority+0x50>)
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	3b04      	subs	r3, #4
 8004be8:	0112      	lsls	r2, r2, #4
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	440b      	add	r3, r1
 8004bee:	761a      	strb	r2, [r3, #24]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	e000e100 	.word	0xe000e100
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <NVIC_EncodePriority>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b089      	sub	sp, #36	; 0x24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f1c3 0307 	rsb	r3, r3, #7
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	bf28      	it	cs
 8004c22:	2304      	movcs	r3, #4
 8004c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d902      	bls.n	8004c34 <NVIC_EncodePriority+0x30>
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3b03      	subs	r3, #3
 8004c32:	e000      	b.n	8004c36 <NVIC_EncodePriority+0x32>
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	401a      	ands	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	43d9      	mvns	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	4313      	orrs	r3, r2
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3724      	adds	r7, #36	; 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c7c:	d301      	bcc.n	8004c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00f      	b.n	8004ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <SysTick_Config+0x40>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c8a:	210f      	movs	r1, #15
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	f7ff ff8e 	bl	8004bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <SysTick_Config+0x40>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <SysTick_Config+0x40>)
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	e000e010 	.word	0xe000e010

08004cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff29 	bl	8004b10 <__NVIC_SetPriorityGrouping>
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	4603      	mov	r3, r0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd8:	f7ff ff3e 	bl	8004b58 <__NVIC_GetPriorityGrouping>
 8004cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	6978      	ldr	r0, [r7, #20]
 8004ce4:	f7ff ff8e 	bl	8004c04 <NVIC_EncodePriority>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ff5d 	bl	8004bb0 <__NVIC_SetPriority>
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff31 	bl	8004b74 <__NVIC_EnableIRQ>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ffa2 	bl	8004c6c <SysTick_Config>
 8004d28:	4603      	mov	r3, r0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b089      	sub	sp, #36	; 0x24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e16b      	b.n	8005028 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d50:	2201      	movs	r2, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	f040 815a 	bne.w	8005022 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d005      	beq.n	8004d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d130      	bne.n	8004de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2203      	movs	r2, #3
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 0201 	and.w	r2, r3, #1
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d017      	beq.n	8004e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2203      	movs	r2, #3
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d123      	bne.n	8004e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	08da      	lsrs	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3208      	adds	r2, #8
 8004e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	220f      	movs	r2, #15
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	08da      	lsrs	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3208      	adds	r2, #8
 8004e72:	69b9      	ldr	r1, [r7, #24]
 8004e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0203 	and.w	r2, r3, #3
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80b4 	beq.w	8005022 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	4b60      	ldr	r3, [pc, #384]	; (8005040 <HAL_GPIO_Init+0x30c>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	4a5f      	ldr	r2, [pc, #380]	; (8005040 <HAL_GPIO_Init+0x30c>)
 8004ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eca:	4b5d      	ldr	r3, [pc, #372]	; (8005040 <HAL_GPIO_Init+0x30c>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ed6:	4a5b      	ldr	r2, [pc, #364]	; (8005044 <HAL_GPIO_Init+0x310>)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	3302      	adds	r3, #2
 8004ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	220f      	movs	r2, #15
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a52      	ldr	r2, [pc, #328]	; (8005048 <HAL_GPIO_Init+0x314>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02b      	beq.n	8004f5a <HAL_GPIO_Init+0x226>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a51      	ldr	r2, [pc, #324]	; (800504c <HAL_GPIO_Init+0x318>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d025      	beq.n	8004f56 <HAL_GPIO_Init+0x222>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a50      	ldr	r2, [pc, #320]	; (8005050 <HAL_GPIO_Init+0x31c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01f      	beq.n	8004f52 <HAL_GPIO_Init+0x21e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a4f      	ldr	r2, [pc, #316]	; (8005054 <HAL_GPIO_Init+0x320>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d019      	beq.n	8004f4e <HAL_GPIO_Init+0x21a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a4e      	ldr	r2, [pc, #312]	; (8005058 <HAL_GPIO_Init+0x324>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_GPIO_Init+0x216>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a4d      	ldr	r2, [pc, #308]	; (800505c <HAL_GPIO_Init+0x328>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00d      	beq.n	8004f46 <HAL_GPIO_Init+0x212>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a4c      	ldr	r2, [pc, #304]	; (8005060 <HAL_GPIO_Init+0x32c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <HAL_GPIO_Init+0x20e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a4b      	ldr	r2, [pc, #300]	; (8005064 <HAL_GPIO_Init+0x330>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_GPIO_Init+0x20a>
 8004f3a:	2307      	movs	r3, #7
 8004f3c:	e00e      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	e00c      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f42:	2306      	movs	r3, #6
 8004f44:	e00a      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f46:	2305      	movs	r3, #5
 8004f48:	e008      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	e006      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e004      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e002      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_GPIO_Init+0x228>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	f002 0203 	and.w	r2, r2, #3
 8004f62:	0092      	lsls	r2, r2, #2
 8004f64:	4093      	lsls	r3, r2
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f6c:	4935      	ldr	r1, [pc, #212]	; (8005044 <HAL_GPIO_Init+0x310>)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	3302      	adds	r3, #2
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f7a:	4b3b      	ldr	r3, [pc, #236]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f9e:	4a32      	ldr	r2, [pc, #200]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fa4:	4b30      	ldr	r3, [pc, #192]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fce:	4b26      	ldr	r3, [pc, #152]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_GPIO_Init+0x334>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800501c:	4a12      	ldr	r2, [pc, #72]	; (8005068 <HAL_GPIO_Init+0x334>)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b0f      	cmp	r3, #15
 800502c:	f67f ae90 	bls.w	8004d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	3724      	adds	r7, #36	; 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	40013800 	.word	0x40013800
 8005048:	40020000 	.word	0x40020000
 800504c:	40020400 	.word	0x40020400
 8005050:	40020800 	.word	0x40020800
 8005054:	40020c00 	.word	0x40020c00
 8005058:	40021000 	.word	0x40021000
 800505c:	40021400 	.word	0x40021400
 8005060:	40021800 	.word	0x40021800
 8005064:	40021c00 	.word	0x40021c00
 8005068:	40013c00 	.word	0x40013c00

0800506c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	4613      	mov	r3, r2
 800507a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800507c:	787b      	ldrb	r3, [r7, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005088:	e003      	b.n	8005092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	041a      	lsls	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e267      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d075      	beq.n	80051aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050be:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d00c      	beq.n	80050e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ca:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d112      	bne.n	80050fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d6:	4b82      	ldr	r3, [pc, #520]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e2:	d10b      	bne.n	80050fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e4:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05b      	beq.n	80051a8 <HAL_RCC_OscConfig+0x108>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d157      	bne.n	80051a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e242      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005104:	d106      	bne.n	8005114 <HAL_RCC_OscConfig+0x74>
 8005106:	4b76      	ldr	r3, [pc, #472]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a75      	ldr	r2, [pc, #468]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e01d      	b.n	8005150 <HAL_RCC_OscConfig+0xb0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x98>
 800511e:	4b70      	ldr	r3, [pc, #448]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6f      	ldr	r2, [pc, #444]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b6d      	ldr	r3, [pc, #436]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6c      	ldr	r2, [pc, #432]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0xb0>
 8005138:	4b69      	ldr	r3, [pc, #420]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a68      	ldr	r2, [pc, #416]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b66      	ldr	r3, [pc, #408]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800514a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7ff f84e 	bl	80041f8 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005160:	f7ff f84a 	bl	80041f8 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e207      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	4b5b      	ldr	r3, [pc, #364]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0xc0>
 800517e:	e014      	b.n	80051aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7ff f83a 	bl	80041f8 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005188:	f7ff f836 	bl	80041f8 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e1f3      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519a:	4b51      	ldr	r3, [pc, #324]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0xe8>
 80051a6:	e000      	b.n	80051aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d063      	beq.n	800527e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051c2:	4b47      	ldr	r3, [pc, #284]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d11c      	bne.n	8005208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ce:	4b44      	ldr	r3, [pc, #272]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d116      	bne.n	8005208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_RCC_OscConfig+0x152>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e1c7      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f2:	4b3b      	ldr	r3, [pc, #236]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4937      	ldr	r1, [pc, #220]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005206:	e03a      	b.n	800527e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005210:	4b34      	ldr	r3, [pc, #208]	; (80052e4 <HAL_RCC_OscConfig+0x244>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fe ffef 	bl	80041f8 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521e:	f7fe ffeb 	bl	80041f8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e1a8      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005230:	4b2b      	ldr	r3, [pc, #172]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4925      	ldr	r1, [pc, #148]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]
 8005250:	e015      	b.n	800527e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <HAL_RCC_OscConfig+0x244>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fe ffce 	bl	80041f8 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005260:	f7fe ffca 	bl	80041f8 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e187      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d036      	beq.n	80052f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_RCC_OscConfig+0x248>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005298:	f7fe ffae 	bl	80041f8 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a0:	f7fe ffaa 	bl	80041f8 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e167      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_RCC_OscConfig+0x240>)
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x200>
 80052be:	e01b      	b.n	80052f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCC_OscConfig+0x248>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c6:	f7fe ff97 	bl	80041f8 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	e00e      	b.n	80052ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ce:	f7fe ff93 	bl	80041f8 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d907      	bls.n	80052ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e150      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
 80052e0:	40023800 	.word	0x40023800
 80052e4:	42470000 	.word	0x42470000
 80052e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ec:	4b88      	ldr	r3, [pc, #544]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80052ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ea      	bne.n	80052ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8097 	beq.w	8005434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800530a:	4b81      	ldr	r3, [pc, #516]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	4b7d      	ldr	r3, [pc, #500]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	4a7c      	ldr	r2, [pc, #496]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005324:	6413      	str	r3, [r2, #64]	; 0x40
 8005326:	4b7a      	ldr	r3, [pc, #488]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	4b77      	ldr	r3, [pc, #476]	; (8005514 <HAL_RCC_OscConfig+0x474>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d118      	bne.n	8005374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005342:	4b74      	ldr	r3, [pc, #464]	; (8005514 <HAL_RCC_OscConfig+0x474>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a73      	ldr	r2, [pc, #460]	; (8005514 <HAL_RCC_OscConfig+0x474>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534e:	f7fe ff53 	bl	80041f8 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005356:	f7fe ff4f 	bl	80041f8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e10c      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <HAL_RCC_OscConfig+0x474>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x2ea>
 800537c:	4b64      	ldr	r3, [pc, #400]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	4a63      	ldr	r2, [pc, #396]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6713      	str	r3, [r2, #112]	; 0x70
 8005388:	e01c      	b.n	80053c4 <HAL_RCC_OscConfig+0x324>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b05      	cmp	r3, #5
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x30c>
 8005392:	4b5f      	ldr	r3, [pc, #380]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	4a5e      	ldr	r2, [pc, #376]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	6713      	str	r3, [r2, #112]	; 0x70
 800539e:	4b5c      	ldr	r3, [pc, #368]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a5b      	ldr	r2, [pc, #364]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_OscConfig+0x324>
 80053ac:	4b58      	ldr	r3, [pc, #352]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a57      	ldr	r2, [pc, #348]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	6713      	str	r3, [r2, #112]	; 0x70
 80053b8:	4b55      	ldr	r3, [pc, #340]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a54      	ldr	r2, [pc, #336]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053be:	f023 0304 	bic.w	r3, r3, #4
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d015      	beq.n	80053f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fe ff14 	bl	80041f8 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fe ff10 	bl	80041f8 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0cb      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	4b49      	ldr	r3, [pc, #292]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ee      	beq.n	80053d4 <HAL_RCC_OscConfig+0x334>
 80053f6:	e014      	b.n	8005422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f8:	f7fe fefe 	bl	80041f8 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fe fefa 	bl	80041f8 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e0b5      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1ee      	bne.n	8005400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d105      	bne.n	8005434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005428:	4b39      	ldr	r3, [pc, #228]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4a38      	ldr	r2, [pc, #224]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80a1 	beq.w	8005580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800543e:	4b34      	ldr	r3, [pc, #208]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b08      	cmp	r3, #8
 8005448:	d05c      	beq.n	8005504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d141      	bne.n	80054d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005452:	4b31      	ldr	r3, [pc, #196]	; (8005518 <HAL_RCC_OscConfig+0x478>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fe fece 	bl	80041f8 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005460:	f7fe feca 	bl	80041f8 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e087      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	4b27      	ldr	r3, [pc, #156]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	019b      	lsls	r3, r3, #6
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	3b01      	subs	r3, #1
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	491b      	ldr	r1, [pc, #108]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054a8:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <HAL_RCC_OscConfig+0x478>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ae:	f7fe fea3 	bl	80041f8 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b6:	f7fe fe9f 	bl	80041f8 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e05c      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x416>
 80054d4:	e054      	b.n	8005580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <HAL_RCC_OscConfig+0x478>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fe fe8c 	bl	80041f8 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fe fe88 	bl	80041f8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e045      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_RCC_OscConfig+0x470>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x444>
 8005502:	e03d      	b.n	8005580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e038      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
 8005510:	40023800 	.word	0x40023800
 8005514:	40007000 	.word	0x40007000
 8005518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x4ec>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d028      	beq.n	800557c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d121      	bne.n	800557c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d11a      	bne.n	800557c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005554:	4293      	cmp	r3, r2
 8005556:	d111      	bne.n	800557c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	3b01      	subs	r3, #1
 8005566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d107      	bne.n	800557c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800

08005590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0cc      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055a4:	4b68      	ldr	r3, [pc, #416]	; (8005748 <HAL_RCC_ClockConfig+0x1b8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d90c      	bls.n	80055cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b65      	ldr	r3, [pc, #404]	; (8005748 <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b63      	ldr	r3, [pc, #396]	; (8005748 <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0b8      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d020      	beq.n	800561a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4a58      	ldr	r2, [pc, #352]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055fc:	4b53      	ldr	r3, [pc, #332]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a52      	ldr	r2, [pc, #328]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005608:	4b50      	ldr	r3, [pc, #320]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	494d      	ldr	r1, [pc, #308]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d044      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d107      	bne.n	800563e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562e:	4b47      	ldr	r3, [pc, #284]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d119      	bne.n	800566e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e07f      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d003      	beq.n	800564e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800564a:	2b03      	cmp	r3, #3
 800564c:	d107      	bne.n	800565e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564e:	4b3f      	ldr	r3, [pc, #252]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e06f      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565e:	4b3b      	ldr	r3, [pc, #236]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e067      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f023 0203 	bic.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4934      	ldr	r1, [pc, #208]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	4313      	orrs	r3, r2
 800567e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005680:	f7fe fdba 	bl	80041f8 <HAL_GetTick>
 8005684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	e00a      	b.n	800569e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005688:	f7fe fdb6 	bl	80041f8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e04f      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	4b2b      	ldr	r3, [pc, #172]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 020c 	and.w	r2, r3, #12
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d1eb      	bne.n	8005688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056b0:	4b25      	ldr	r3, [pc, #148]	; (8005748 <HAL_RCC_ClockConfig+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d20c      	bcs.n	80056d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056be:	4b22      	ldr	r3, [pc, #136]	; (8005748 <HAL_RCC_ClockConfig+0x1b8>)
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e032      	b.n	800573e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e4:	4b19      	ldr	r3, [pc, #100]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4916      	ldr	r1, [pc, #88]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	490e      	ldr	r1, [pc, #56]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005716:	f000 f821 	bl	800575c <HAL_RCC_GetSysClockFreq>
 800571a:	4602      	mov	r2, r0
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	490a      	ldr	r1, [pc, #40]	; (8005750 <HAL_RCC_ClockConfig+0x1c0>)
 8005728:	5ccb      	ldrb	r3, [r1, r3]
 800572a:	fa22 f303 	lsr.w	r3, r2, r3
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <HAL_RCC_ClockConfig+0x1c4>)
 8005730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HAL_RCC_ClockConfig+0x1c8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe fd1a 	bl	8004170 <HAL_InitTick>

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023c00 	.word	0x40023c00
 800574c:	40023800 	.word	0x40023800
 8005750:	08006b90 	.word	0x08006b90
 8005754:	2000000c 	.word	0x2000000c
 8005758:	20000010 	.word	0x20000010

0800575c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800575c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005760:	b094      	sub	sp, #80	; 0x50
 8005762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
 8005768:	2300      	movs	r3, #0
 800576a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576c:	2300      	movs	r3, #0
 800576e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005774:	4b79      	ldr	r3, [pc, #484]	; (800595c <HAL_RCC_GetSysClockFreq+0x200>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 030c 	and.w	r3, r3, #12
 800577c:	2b08      	cmp	r3, #8
 800577e:	d00d      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x40>
 8005780:	2b08      	cmp	r3, #8
 8005782:	f200 80e1 	bhi.w	8005948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0x34>
 800578a:	2b04      	cmp	r3, #4
 800578c:	d003      	beq.n	8005796 <HAL_RCC_GetSysClockFreq+0x3a>
 800578e:	e0db      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005790:	4b73      	ldr	r3, [pc, #460]	; (8005960 <HAL_RCC_GetSysClockFreq+0x204>)
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005794:	e0db      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005796:	4b73      	ldr	r3, [pc, #460]	; (8005964 <HAL_RCC_GetSysClockFreq+0x208>)
 8005798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800579a:	e0d8      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800579c:	4b6f      	ldr	r3, [pc, #444]	; (800595c <HAL_RCC_GetSysClockFreq+0x200>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057a6:	4b6d      	ldr	r3, [pc, #436]	; (800595c <HAL_RCC_GetSysClockFreq+0x200>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d063      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b2:	4b6a      	ldr	r3, [pc, #424]	; (800595c <HAL_RCC_GetSysClockFreq+0x200>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	2200      	movs	r2, #0
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80057bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c4:	633b      	str	r3, [r7, #48]	; 0x30
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057ce:	4622      	mov	r2, r4
 80057d0:	462b      	mov	r3, r5
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	0159      	lsls	r1, r3, #5
 80057dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e0:	0150      	lsls	r0, r2, #5
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4621      	mov	r1, r4
 80057e8:	1a51      	subs	r1, r2, r1
 80057ea:	6139      	str	r1, [r7, #16]
 80057ec:	4629      	mov	r1, r5
 80057ee:	eb63 0301 	sbc.w	r3, r3, r1
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005800:	4659      	mov	r1, fp
 8005802:	018b      	lsls	r3, r1, #6
 8005804:	4651      	mov	r1, sl
 8005806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800580a:	4651      	mov	r1, sl
 800580c:	018a      	lsls	r2, r1, #6
 800580e:	4651      	mov	r1, sl
 8005810:	ebb2 0801 	subs.w	r8, r2, r1
 8005814:	4659      	mov	r1, fp
 8005816:	eb63 0901 	sbc.w	r9, r3, r1
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800582a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582e:	4690      	mov	r8, r2
 8005830:	4699      	mov	r9, r3
 8005832:	4623      	mov	r3, r4
 8005834:	eb18 0303 	adds.w	r3, r8, r3
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	462b      	mov	r3, r5
 800583c:	eb49 0303 	adc.w	r3, r9, r3
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800584e:	4629      	mov	r1, r5
 8005850:	024b      	lsls	r3, r1, #9
 8005852:	4621      	mov	r1, r4
 8005854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005858:	4621      	mov	r1, r4
 800585a:	024a      	lsls	r2, r1, #9
 800585c:	4610      	mov	r0, r2
 800585e:	4619      	mov	r1, r3
 8005860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005862:	2200      	movs	r2, #0
 8005864:	62bb      	str	r3, [r7, #40]	; 0x28
 8005866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800586c:	f7fb f968 	bl	8000b40 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4613      	mov	r3, r2
 8005876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005878:	e058      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800587a:	4b38      	ldr	r3, [pc, #224]	; (800595c <HAL_RCC_GetSysClockFreq+0x200>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	2200      	movs	r2, #0
 8005882:	4618      	mov	r0, r3
 8005884:	4611      	mov	r1, r2
 8005886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	2300      	movs	r3, #0
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
 8005890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	f04f 0000 	mov.w	r0, #0
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	0159      	lsls	r1, r3, #5
 80058a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058a6:	0150      	lsls	r0, r2, #5
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4641      	mov	r1, r8
 80058ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80058b2:	4649      	mov	r1, r9
 80058b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058cc:	ebb2 040a 	subs.w	r4, r2, sl
 80058d0:	eb63 050b 	sbc.w	r5, r3, fp
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	00eb      	lsls	r3, r5, #3
 80058de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058e2:	00e2      	lsls	r2, r4, #3
 80058e4:	4614      	mov	r4, r2
 80058e6:	461d      	mov	r5, r3
 80058e8:	4643      	mov	r3, r8
 80058ea:	18e3      	adds	r3, r4, r3
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	464b      	mov	r3, r9
 80058f0:	eb45 0303 	adc.w	r3, r5, r3
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005902:	4629      	mov	r1, r5
 8005904:	028b      	lsls	r3, r1, #10
 8005906:	4621      	mov	r1, r4
 8005908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800590c:	4621      	mov	r1, r4
 800590e:	028a      	lsls	r2, r1, #10
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005916:	2200      	movs	r2, #0
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	61fa      	str	r2, [r7, #28]
 800591c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005920:	f7fb f90e 	bl	8000b40 <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4613      	mov	r3, r2
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_RCC_GetSysClockFreq+0x200>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	0c1b      	lsrs	r3, r3, #16
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	3301      	adds	r3, #1
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800593c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800593e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005946:	e002      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <HAL_RCC_GetSysClockFreq+0x204>)
 800594a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800594c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800594e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005950:	4618      	mov	r0, r3
 8005952:	3750      	adds	r7, #80	; 0x50
 8005954:	46bd      	mov	sp, r7
 8005956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800
 8005960:	00f42400 	.word	0x00f42400
 8005964:	007a1200 	.word	0x007a1200

08005968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e041      	b.n	80059fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc fcf6 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f000 fc0e 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e041      	b.n	8005a9c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fc fd47 	bl	80024c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f000 fbbf 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e097      	b.n	8005be8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fc fc11 	bl	80022f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae8:	f023 0307 	bic.w	r3, r3, #7
 8005aec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f000 fb65 	bl	80061c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	4313      	orrs	r3, r2
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b44:	f023 030c 	bic.w	r3, r3, #12
 8005b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	4313      	orrs	r3, r2
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	011a      	lsls	r2, r3, #4
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	031b      	lsls	r3, r3, #12
 8005b74:	4313      	orrs	r3, r2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	4313      	orrs	r3, r2
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d110      	bne.n	8005c42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d102      	bne.n	8005c2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c26:	7b7b      	ldrb	r3, [r7, #13]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d001      	beq.n	8005c30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e069      	b.n	8005d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c40:	e031      	b.n	8005ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d110      	bne.n	8005c6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d102      	bne.n	8005c54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c4e:	7b3b      	ldrb	r3, [r7, #12]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d001      	beq.n	8005c58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e055      	b.n	8005d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c68:	e01d      	b.n	8005ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d108      	bne.n	8005c82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c70:	7bbb      	ldrb	r3, [r7, #14]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d105      	bne.n	8005c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c76:	7b7b      	ldrb	r3, [r7, #13]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d102      	bne.n	8005c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7c:	7b3b      	ldrb	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d001      	beq.n	8005c86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e03e      	b.n	8005d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_TIM_Encoder_Start+0xc4>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d008      	beq.n	8005cc4 <HAL_TIM_Encoder_Start+0xd4>
 8005cb2:	e00f      	b.n	8005cd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fd6d 	bl	800679c <TIM_CCxChannelCmd>
      break;
 8005cc2:	e016      	b.n	8005cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fd65 	bl	800679c <TIM_CCxChannelCmd>
      break;
 8005cd2:	e00e      	b.n	8005cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fd5d 	bl	800679c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2104      	movs	r1, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fd56 	bl	800679c <TIM_CCxChannelCmd>
      break;
 8005cf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0202 	mvn.w	r2, #2
 8005d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa1b 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa0d 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fa1e 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d122      	bne.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d11b      	bne.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0204 	mvn.w	r2, #4
 8005d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9f1 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005da8:	e005      	b.n	8005db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9e3 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f9f4 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d122      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d11b      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0208 	mvn.w	r2, #8
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9c7 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9b9 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f9ca 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d122      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d11b      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0210 	mvn.w	r2, #16
 8005e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f99d 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005e50:	e005      	b.n	8005e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f98f 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f9a0 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0201 	mvn.w	r2, #1
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f969 	bl	8006162 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d10e      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d107      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fd1c 	bl	80068f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d107      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f965 	bl	80061b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d10e      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d107      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0220 	mvn.w	r2, #32
 8005f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fce6 	bl	80068e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e048      	b.n	8005fcc <HAL_TIM_OC_ConfigChannel+0xb0>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	d839      	bhi.n	8005fbc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005fbd 	.word	0x08005fbd
 8005f58:	08005fbd 	.word	0x08005fbd
 8005f5c:	08005fbd 	.word	0x08005fbd
 8005f60:	08005f93 	.word	0x08005f93
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005fbd 	.word	0x08005fbd
 8005f70:	08005fa1 	.word	0x08005fa1
 8005f74:	08005fbd 	.word	0x08005fbd
 8005f78:	08005fbd 	.word	0x08005fbd
 8005f7c:	08005fbd 	.word	0x08005fbd
 8005f80:	08005faf 	.word	0x08005faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 f9bc 	bl	8006308 <TIM_OC1_SetConfig>
      break;
 8005f90:	e017      	b.n	8005fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fa25 	bl	80063e8 <TIM_OC2_SetConfig>
      break;
 8005f9e:	e010      	b.n	8005fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fa94 	bl	80064d4 <TIM_OC3_SetConfig>
      break;
 8005fac:	e009      	b.n	8005fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb01 	bl	80065bc <TIM_OC4_SetConfig>
      break;
 8005fba:	e002      	b.n	8005fc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e0b4      	b.n	800615a <HAL_TIM_ConfigClockSource+0x186>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800600e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d03e      	beq.n	80060a8 <HAL_TIM_ConfigClockSource+0xd4>
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	f200 8087 	bhi.w	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006036:	f000 8086 	beq.w	8006146 <HAL_TIM_ConfigClockSource+0x172>
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603e:	d87f      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	d01a      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xa6>
 8006044:	2b70      	cmp	r3, #112	; 0x70
 8006046:	d87b      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006048:	2b60      	cmp	r3, #96	; 0x60
 800604a:	d050      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x11a>
 800604c:	2b60      	cmp	r3, #96	; 0x60
 800604e:	d877      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d03c      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0xfa>
 8006054:	2b50      	cmp	r3, #80	; 0x50
 8006056:	d873      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d058      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x13a>
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d86f      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b30      	cmp	r3, #48	; 0x30
 8006062:	d064      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 8006064:	2b30      	cmp	r3, #48	; 0x30
 8006066:	d86b      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d060      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 800606c:	2b20      	cmp	r3, #32
 800606e:	d867      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d05c      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 8006074:	2b10      	cmp	r3, #16
 8006076:	d05a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 8006078:	e062      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f000 fb67 	bl	800675c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800609c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	609a      	str	r2, [r3, #8]
      break;
 80060a6:	e04f      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	6899      	ldr	r1, [r3, #8]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f000 fb50 	bl	800675c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ca:	609a      	str	r2, [r3, #8]
      break;
 80060cc:	e03c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	461a      	mov	r2, r3
 80060dc:	f000 fac4 	bl	8006668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2150      	movs	r1, #80	; 0x50
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fb1d 	bl	8006726 <TIM_ITRx_SetConfig>
      break;
 80060ec:	e02c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f000 fae3 	bl	80066c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2160      	movs	r1, #96	; 0x60
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fb0d 	bl	8006726 <TIM_ITRx_SetConfig>
      break;
 800610c:	e01c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	461a      	mov	r2, r3
 800611c:	f000 faa4 	bl	8006668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2140      	movs	r1, #64	; 0x40
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fafd 	bl	8006726 <TIM_ITRx_SetConfig>
      break;
 800612c:	e00c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f000 faf4 	bl	8006726 <TIM_ITRx_SetConfig>
      break;
 800613e:	e003      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
      break;
 8006144:	e000      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a40      	ldr	r2, [pc, #256]	; (80062dc <TIM_Base_SetConfig+0x114>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e6:	d00f      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a3d      	ldr	r2, [pc, #244]	; (80062e0 <TIM_Base_SetConfig+0x118>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3c      	ldr	r2, [pc, #240]	; (80062e4 <TIM_Base_SetConfig+0x11c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3b      	ldr	r2, [pc, #236]	; (80062e8 <TIM_Base_SetConfig+0x120>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3a      	ldr	r2, [pc, #232]	; (80062ec <TIM_Base_SetConfig+0x124>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d108      	bne.n	800621a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2f      	ldr	r2, [pc, #188]	; (80062dc <TIM_Base_SetConfig+0x114>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006228:	d027      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <TIM_Base_SetConfig+0x118>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d023      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <TIM_Base_SetConfig+0x11c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <TIM_Base_SetConfig+0x120>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <TIM_Base_SetConfig+0x124>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d017      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a28      	ldr	r2, [pc, #160]	; (80062f0 <TIM_Base_SetConfig+0x128>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a27      	ldr	r2, [pc, #156]	; (80062f4 <TIM_Base_SetConfig+0x12c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <TIM_Base_SetConfig+0x130>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a25      	ldr	r2, [pc, #148]	; (80062fc <TIM_Base_SetConfig+0x134>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a24      	ldr	r2, [pc, #144]	; (8006300 <TIM_Base_SetConfig+0x138>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a23      	ldr	r2, [pc, #140]	; (8006304 <TIM_Base_SetConfig+0x13c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d108      	bne.n	800628c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <TIM_Base_SetConfig+0x114>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0xf8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a0c      	ldr	r2, [pc, #48]	; (80062ec <TIM_Base_SetConfig+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d103      	bne.n	80062c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	615a      	str	r2, [r3, #20]
}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40010400 	.word	0x40010400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	40001800 	.word	0x40001800
 8006300:	40001c00 	.word	0x40001c00
 8006304:	40002000 	.word	0x40002000

08006308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 0302 	bic.w	r3, r3, #2
 8006350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <TIM_OC1_SetConfig+0xd8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC1_SetConfig+0x64>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a1f      	ldr	r2, [pc, #124]	; (80063e4 <TIM_OC1_SetConfig+0xdc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d10c      	bne.n	8006386 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0308 	bic.w	r3, r3, #8
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 0304 	bic.w	r3, r3, #4
 8006384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <TIM_OC1_SetConfig+0xd8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC1_SetConfig+0x8e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <TIM_OC1_SetConfig+0xdc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d111      	bne.n	80063ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800639c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010400 	.word	0x40010400

080063e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f023 0210 	bic.w	r2, r3, #16
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0320 	bic.w	r3, r3, #32
 8006432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a22      	ldr	r2, [pc, #136]	; (80064cc <TIM_OC2_SetConfig+0xe4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC2_SetConfig+0x68>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <TIM_OC2_SetConfig+0xe8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10d      	bne.n	800646c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <TIM_OC2_SetConfig+0xe4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC2_SetConfig+0x94>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <TIM_OC2_SetConfig+0xe8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d113      	bne.n	80064a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800648a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40010000 	.word	0x40010000
 80064d0:	40010400 	.word	0x40010400

080064d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800651c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <TIM_OC3_SetConfig+0xe0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_OC3_SetConfig+0x66>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <TIM_OC3_SetConfig+0xe4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10d      	bne.n	8006556 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <TIM_OC3_SetConfig+0xe0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC3_SetConfig+0x92>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <TIM_OC3_SetConfig+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d113      	bne.n	800658e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400

080065bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a12      	ldr	r2, [pc, #72]	; (8006660 <TIM_OC4_SetConfig+0xa4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC4_SetConfig+0x68>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a11      	ldr	r2, [pc, #68]	; (8006664 <TIM_OC4_SetConfig+0xa8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d109      	bne.n	8006638 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	019b      	lsls	r3, r3, #6
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010000 	.word	0x40010000
 8006664:	40010400 	.word	0x40010400

08006668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0201 	bic.w	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f023 030a 	bic.w	r3, r3, #10
 80066a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b087      	sub	sp, #28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f023 0210 	bic.w	r2, r3, #16
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	f043 0307 	orr.w	r3, r3, #7
 8006748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	609a      	str	r2, [r3, #8]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	021a      	lsls	r2, r3, #8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	431a      	orrs	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2201      	movs	r2, #1
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1a      	ldr	r2, [r3, #32]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	43db      	mvns	r3, r3
 80067be:	401a      	ands	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1a      	ldr	r2, [r3, #32]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	fa01 f303 	lsl.w	r3, r1, r3
 80067d4:	431a      	orrs	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e05a      	b.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684c:	d01d      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1a      	ldr	r2, [pc, #104]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a15      	ldr	r2, [pc, #84]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d10c      	bne.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	4313      	orrs	r3, r2
 800689a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	40000c00 	.word	0x40000c00
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40001800 	.word	0x40001800

080068e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	; (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000064 	.word	0x20000064

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4d0d      	ldr	r5, [pc, #52]	; (800695c <__libc_init_array+0x38>)
 8006928:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692a:	1b64      	subs	r4, r4, r5
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	2600      	movs	r6, #0
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	4d0b      	ldr	r5, [pc, #44]	; (8006964 <__libc_init_array+0x40>)
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <__libc_init_array+0x44>)
 8006938:	f000 f91e 	bl	8006b78 <_init>
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	2600      	movs	r6, #0
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	08006ba8 	.word	0x08006ba8
 8006960:	08006ba8 	.word	0x08006ba8
 8006964:	08006ba8 	.word	0x08006ba8
 8006968:	08006bac 	.word	0x08006bac

0800696c <sqrt>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	ed2d 8b02 	vpush	{d8}
 8006972:	ec55 4b10 	vmov	r4, r5, d0
 8006976:	f000 f825 	bl	80069c4 <__ieee754_sqrt>
 800697a:	4622      	mov	r2, r4
 800697c:	462b      	mov	r3, r5
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	eeb0 8a40 	vmov.f32	s16, s0
 8006986:	eef0 8a60 	vmov.f32	s17, s1
 800698a:	f7fa f873 	bl	8000a74 <__aeabi_dcmpun>
 800698e:	b990      	cbnz	r0, 80069b6 <sqrt+0x4a>
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7fa f844 	bl	8000a24 <__aeabi_dcmplt>
 800699c:	b158      	cbz	r0, 80069b6 <sqrt+0x4a>
 800699e:	f7ff ffbb 	bl	8006918 <__errno>
 80069a2:	2321      	movs	r3, #33	; 0x21
 80069a4:	6003      	str	r3, [r0, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	2300      	movs	r3, #0
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	f7f9 fef1 	bl	8000794 <__aeabi_ddiv>
 80069b2:	ec41 0b18 	vmov	d8, r0, r1
 80069b6:	eeb0 0a48 	vmov.f32	s0, s16
 80069ba:	eef0 0a68 	vmov.f32	s1, s17
 80069be:	ecbd 8b02 	vpop	{d8}
 80069c2:	bd38      	pop	{r3, r4, r5, pc}

080069c4 <__ieee754_sqrt>:
 80069c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	ec55 4b10 	vmov	r4, r5, d0
 80069cc:	4e67      	ldr	r6, [pc, #412]	; (8006b6c <__ieee754_sqrt+0x1a8>)
 80069ce:	43ae      	bics	r6, r5
 80069d0:	ee10 0a10 	vmov	r0, s0
 80069d4:	ee10 2a10 	vmov	r2, s0
 80069d8:	4629      	mov	r1, r5
 80069da:	462b      	mov	r3, r5
 80069dc:	d10d      	bne.n	80069fa <__ieee754_sqrt+0x36>
 80069de:	f7f9 fdaf 	bl	8000540 <__aeabi_dmul>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7f9 fbf3 	bl	80001d4 <__adddf3>
 80069ee:	4604      	mov	r4, r0
 80069f0:	460d      	mov	r5, r1
 80069f2:	ec45 4b10 	vmov	d0, r4, r5
 80069f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	dc0b      	bgt.n	8006a16 <__ieee754_sqrt+0x52>
 80069fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a02:	4326      	orrs	r6, r4
 8006a04:	d0f5      	beq.n	80069f2 <__ieee754_sqrt+0x2e>
 8006a06:	b135      	cbz	r5, 8006a16 <__ieee754_sqrt+0x52>
 8006a08:	f7f9 fbe2 	bl	80001d0 <__aeabi_dsub>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	f7f9 fec0 	bl	8000794 <__aeabi_ddiv>
 8006a14:	e7eb      	b.n	80069ee <__ieee754_sqrt+0x2a>
 8006a16:	1509      	asrs	r1, r1, #20
 8006a18:	f000 808d 	beq.w	8006b36 <__ieee754_sqrt+0x172>
 8006a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a20:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a28:	07c9      	lsls	r1, r1, #31
 8006a2a:	bf5c      	itt	pl
 8006a2c:	005b      	lslpl	r3, r3, #1
 8006a2e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006a32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a36:	bf58      	it	pl
 8006a38:	0052      	lslpl	r2, r2, #1
 8006a3a:	2500      	movs	r5, #0
 8006a3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006a40:	1076      	asrs	r6, r6, #1
 8006a42:	0052      	lsls	r2, r2, #1
 8006a44:	f04f 0e16 	mov.w	lr, #22
 8006a48:	46ac      	mov	ip, r5
 8006a4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a4e:	eb0c 0001 	add.w	r0, ip, r1
 8006a52:	4298      	cmp	r0, r3
 8006a54:	bfde      	ittt	le
 8006a56:	1a1b      	suble	r3, r3, r0
 8006a58:	eb00 0c01 	addle.w	ip, r0, r1
 8006a5c:	186d      	addle	r5, r5, r1
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	f1be 0e01 	subs.w	lr, lr, #1
 8006a64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006a68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006a6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006a70:	d1ed      	bne.n	8006a4e <__ieee754_sqrt+0x8a>
 8006a72:	4674      	mov	r4, lr
 8006a74:	2720      	movs	r7, #32
 8006a76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006a7a:	4563      	cmp	r3, ip
 8006a7c:	eb01 000e 	add.w	r0, r1, lr
 8006a80:	dc02      	bgt.n	8006a88 <__ieee754_sqrt+0xc4>
 8006a82:	d113      	bne.n	8006aac <__ieee754_sqrt+0xe8>
 8006a84:	4290      	cmp	r0, r2
 8006a86:	d811      	bhi.n	8006aac <__ieee754_sqrt+0xe8>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	eb00 0e01 	add.w	lr, r0, r1
 8006a8e:	da57      	bge.n	8006b40 <__ieee754_sqrt+0x17c>
 8006a90:	f1be 0f00 	cmp.w	lr, #0
 8006a94:	db54      	blt.n	8006b40 <__ieee754_sqrt+0x17c>
 8006a96:	f10c 0801 	add.w	r8, ip, #1
 8006a9a:	eba3 030c 	sub.w	r3, r3, ip
 8006a9e:	4290      	cmp	r0, r2
 8006aa0:	bf88      	it	hi
 8006aa2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006aa6:	1a12      	subs	r2, r2, r0
 8006aa8:	440c      	add	r4, r1
 8006aaa:	46c4      	mov	ip, r8
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	3f01      	subs	r7, #1
 8006ab0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006ab4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006ab8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006abc:	d1dd      	bne.n	8006a7a <__ieee754_sqrt+0xb6>
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	d01b      	beq.n	8006afa <__ieee754_sqrt+0x136>
 8006ac2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006b70 <__ieee754_sqrt+0x1ac>
 8006ac6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006b74 <__ieee754_sqrt+0x1b0>
 8006aca:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ace:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ad2:	f7f9 fb7d 	bl	80001d0 <__aeabi_dsub>
 8006ad6:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 ffa9 	bl	8000a38 <__aeabi_dcmple>
 8006ae6:	b140      	cbz	r0, 8006afa <__ieee754_sqrt+0x136>
 8006ae8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006aec:	e9da 0100 	ldrd	r0, r1, [sl]
 8006af0:	e9db 2300 	ldrd	r2, r3, [fp]
 8006af4:	d126      	bne.n	8006b44 <__ieee754_sqrt+0x180>
 8006af6:	3501      	adds	r5, #1
 8006af8:	463c      	mov	r4, r7
 8006afa:	106a      	asrs	r2, r5, #1
 8006afc:	0863      	lsrs	r3, r4, #1
 8006afe:	07e9      	lsls	r1, r5, #31
 8006b00:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006b04:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006b08:	bf48      	it	mi
 8006b0a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006b0e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006b12:	461c      	mov	r4, r3
 8006b14:	e76d      	b.n	80069f2 <__ieee754_sqrt+0x2e>
 8006b16:	0ad3      	lsrs	r3, r2, #11
 8006b18:	3815      	subs	r0, #21
 8006b1a:	0552      	lsls	r2, r2, #21
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0fa      	beq.n	8006b16 <__ieee754_sqrt+0x152>
 8006b20:	02dc      	lsls	r4, r3, #11
 8006b22:	d50a      	bpl.n	8006b3a <__ieee754_sqrt+0x176>
 8006b24:	f1c1 0420 	rsb	r4, r1, #32
 8006b28:	fa22 f404 	lsr.w	r4, r2, r4
 8006b2c:	1e4d      	subs	r5, r1, #1
 8006b2e:	408a      	lsls	r2, r1
 8006b30:	4323      	orrs	r3, r4
 8006b32:	1b41      	subs	r1, r0, r5
 8006b34:	e772      	b.n	8006a1c <__ieee754_sqrt+0x58>
 8006b36:	4608      	mov	r0, r1
 8006b38:	e7f0      	b.n	8006b1c <__ieee754_sqrt+0x158>
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	3101      	adds	r1, #1
 8006b3e:	e7ef      	b.n	8006b20 <__ieee754_sqrt+0x15c>
 8006b40:	46e0      	mov	r8, ip
 8006b42:	e7aa      	b.n	8006a9a <__ieee754_sqrt+0xd6>
 8006b44:	f7f9 fb46 	bl	80001d4 <__adddf3>
 8006b48:	e9da 8900 	ldrd	r8, r9, [sl]
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 ff66 	bl	8000a24 <__aeabi_dcmplt>
 8006b58:	b120      	cbz	r0, 8006b64 <__ieee754_sqrt+0x1a0>
 8006b5a:	1ca0      	adds	r0, r4, #2
 8006b5c:	bf08      	it	eq
 8006b5e:	3501      	addeq	r5, #1
 8006b60:	3402      	adds	r4, #2
 8006b62:	e7ca      	b.n	8006afa <__ieee754_sqrt+0x136>
 8006b64:	3401      	adds	r4, #1
 8006b66:	f024 0401 	bic.w	r4, r4, #1
 8006b6a:	e7c6      	b.n	8006afa <__ieee754_sqrt+0x136>
 8006b6c:	7ff00000 	.word	0x7ff00000
 8006b70:	20000068 	.word	0x20000068
 8006b74:	20000070 	.word	0x20000070

08006b78 <_init>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr

08006b84 <_fini>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr

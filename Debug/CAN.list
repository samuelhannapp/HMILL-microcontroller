
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007108  08007108  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007110  08007110  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00017b68  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20017be0  20017be0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c252  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b87  00000000  00000000  0002c33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd0  00000000  00000000  0002dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f8  00000000  00000000  0002eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021118  00000000  00000000  0002f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cf51  00000000  00000000  000506a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdcf2  00000000  00000000  0005d5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003974  00000000  00000000  0012b2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0012ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070e0 	.word	0x080070e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080070e0 	.word	0x080070e0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e40:	f3bf 8f4f 	dsb	sy
}
 8000e44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <__NVIC_SystemReset+0x24>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e4e:	4904      	ldr	r1, [pc, #16]	; (8000e60 <__NVIC_SystemReset+0x24>)
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_SystemReset+0x28>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e56:	f3bf 8f4f 	dsb	sy
}
 8000e5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <__NVIC_SystemReset+0x20>
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	05fa0004 	.word	0x05fa0004

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f003 fc12 	bl	8004694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f82a 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 fba8 	bl	80015c8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e78:	f000 f890 	bl	8000f9c <MX_CAN1_Init>
  MX_TIM9_Init();
 8000e7c:	f000 fa28 	bl	80012d0 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000e80:	f000 fa6c 	bl	800135c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e84:	f000 fabe 	bl	8001404 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000e88:	f000 fb10 	bl	80014ac <MX_TIM12_Init>
  MX_TIM13_Init();
 8000e8c:	f000 fb52 	bl	8001534 <MX_TIM13_Init>
  MX_TIM3_Init();
 8000e90:	f000 f92a 	bl	80010e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e94:	f000 f8d4 	bl	8001040 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e98:	f000 f9a4 	bl	80011e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <main+0x58>)
 8000e9e:	f003 fe47 	bl	8004b30 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <main+0x58>)
 8000ea6:	f003 fe87 	bl	8004bb8 <HAL_CAN_ActivateNotification>

  // I changed this on 28.09.2023
  //commands&=~START_PROGRAM;
  flags_global_mc|=MACHINE_HOMED;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0x5c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <main+0x5c>)
 8000eb4:	6013      	str	r3, [r2, #0]
  //flags|=FIRST_MOVE_NO_Z;




  setup();
 8000eb6:	f000 fc9f 	bl	80017f8 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	check_command();
 8000eba:	f000 fcf5 	bl	80018a8 <check_command>
 8000ebe:	e7fc      	b.n	8000eba <main+0x52>
 8000ec0:	20000094 	.word	0x20000094
 8000ec4:	20017a18 	.word	0x20017a18

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 ffca 	bl	8006e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 fb5a 	bl	8005608 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5a:	f001 fa8f 	bl	800247c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fdbb 	bl	8005af8 <HAL_RCC_ClockConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f88:	f001 fa78 	bl	800247c <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3750      	adds	r7, #80	; 0x50
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <MX_CAN1_Init+0xa0>)
 8000fa6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fbc:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000fc0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fc8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <MX_CAN1_Init+0x9c>)
 8000ff0:	f003 fbc2 	bl	8004778 <HAL_CAN_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ffa:	f001 fa3f 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation=CAN_FILTER_ENABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank=10;
 8001002:	230a      	movs	r3, #10
 8001004:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh=0;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow=0;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh=0;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow=0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank=0;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1,&canfilterconfig);
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_CAN1_Init+0x9c>)
 800102c:	f003 fca0 	bl	8004970 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000094 	.word	0x20000094
 800103c:	40006400 	.word	0x40006400

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f005 ff0e 	bl	8006e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_TIM2_Init+0xa4>)
 800105e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_TIM2_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_TIM2_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM2_Init+0xa4>)
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM2_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_TIM2_Init+0xa4>)
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001084:	2303      	movs	r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_TIM2_Init+0xa4>)
 80010b0:	f004 ffac 	bl	800600c <HAL_TIM_Encoder_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010ba:	f001 f9df 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM2_Init+0xa4>)
 80010cc:	f005 fe40 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010d6:	f001 f9d1 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	; 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <MX_TIM3_Init+0xf4>)
 800111a:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <MX_TIM3_Init+0xf8>)
 800111c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <MX_TIM3_Init+0xf4>)
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_TIM3_Init+0xf4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800113e:	4827      	ldr	r0, [pc, #156]	; (80011dc <MX_TIM3_Init+0xf4>)
 8001140:	f004 fec6 	bl	8005ed0 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800114a:	f001 f997 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001158:	4619      	mov	r1, r3
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <MX_TIM3_Init+0xf4>)
 800115c:	f005 f9ee 	bl	800653c <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001166:	f001 f989 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM3_Init+0xf4>)
 800116c:	f004 feff 	bl	8005f6e <HAL_TIM_OC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001176:	f001 f981 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_TIM3_Init+0xf4>)
 800118a:	f005 fde1 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001194:	f001 f972 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001198:	2330      	movs	r3, #48	; 0x30
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <MX_TIM3_Init+0xf4>)
 80011b0:	f005 f968 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ba:	f001 f95f 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->ARR=60000;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_TIM3_Init+0xf8>)
 80011c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->PSC=10;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_TIM3_Init+0xf8>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM3_Init+0xf4>)
 80011ce:	f001 faff 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000104 	.word	0x20000104
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <MX_TIM4_Init+0xe8>)
 8001218:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <MX_TIM4_Init+0xe4>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800123a:	4823      	ldr	r0, [pc, #140]	; (80012c8 <MX_TIM4_Init+0xe4>)
 800123c:	f004 fe48 	bl	8005ed0 <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001246:	f001 f919 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001254:	4619      	mov	r1, r3
 8001256:	481c      	ldr	r0, [pc, #112]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001258:	f005 f970 	bl	800653c <HAL_TIM_ConfigClockSource>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001262:	f001 f90b 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001268:	f004 fe81 	bl	8005f6e <HAL_TIM_OC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001272:	f001 f903 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	4619      	mov	r1, r3
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <MX_TIM4_Init+0xe4>)
 8001286:	f005 fd63 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001290:	f001 f8f4 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001294:	2330      	movs	r3, #48	; 0x30
 8001296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM4_Init+0xe4>)
 80012ac:	f005 f8ea 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80012b6:	f001 f8e1 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM4_Init+0xe4>)
 80012bc:	f001 fa88 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 80012c0:	bf00      	nop
 80012c2:	3738      	adds	r7, #56	; 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000014c 	.word	0x2000014c
 80012cc:	40000800 	.word	0x40000800

080012d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM9_Init+0x84>)
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_TIM9_Init+0x88>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM9_Init+0x84>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_TIM9_Init+0x84>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM9_Init+0x84>)
 80012fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001300:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_TIM9_Init+0x84>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_TIM9_Init+0x84>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_TIM9_Init+0x84>)
 8001310:	f004 fe2d 	bl	8005f6e <HAL_TIM_OC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800131a:	f001 f8af 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800131e:	2330      	movs	r3, #48	; 0x30
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM9_Init+0x84>)
 8001336:	f005 f8a5 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001340:	f001 f89c 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM9_Init+0x84>)
 8001346:	f001 fa43 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000194 	.word	0x20000194
 8001358:	40014000 	.word	0x40014000

0800135c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <MX_TIM10_Init+0xa4>)
 8001378:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_TIM10_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_TIM10_Init+0xa0>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <MX_TIM10_Init+0xa0>)
 800139c:	f004 fd98 	bl	8005ed0 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80013a6:	f001 f869 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM10_Init+0xa0>)
 80013ac:	f004 fddf 	bl	8005f6e <HAL_TIM_OC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80013b6:	f001 f861 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013ba:	2330      	movs	r3, #48	; 0x30
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <MX_TIM10_Init+0xa0>)
 80013d2:	f005 f857 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013dc:	f001 f84e 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  TIM10->ARR=60000;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_TIM10_Init+0xa4>)
 80013e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM10->PSC=5;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <MX_TIM10_Init+0xa4>)
 80013ea:	2205      	movs	r2, #5
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM10_Init+0xa0>)
 80013f0:	f001 f9ee 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001dc 	.word	0x200001dc
 8001400:	40014400 	.word	0x40014400

08001404 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_TIM11_Init+0xa4>)
 8001420:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001444:	f004 fd44 	bl	8005ed0 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800144e:	f001 f815 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001454:	f004 fd8b 	bl	8005f6e <HAL_TIM_OC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800145e:	f001 f80d 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001462:	2330      	movs	r3, #48	; 0x30
 8001464:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <MX_TIM11_Init+0xa0>)
 800147a:	f005 f803 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001484:	f000 fffa 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  TIM11->ARR=60000;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_TIM11_Init+0xa4>)
 800148a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM11->PSC=3;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <MX_TIM11_Init+0xa4>)
 8001492:	2203      	movs	r2, #3
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM11_Init+0xa0>)
 8001498:	f001 f99a 	bl	80027d0 <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000224 	.word	0x20000224
 80014a8:	40014800 	.word	0x40014800

080014ac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_TIM12_Init+0x80>)
 80014c6:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <MX_TIM12_Init+0x84>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM12_Init+0x80>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_TIM12_Init+0x80>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_TIM12_Init+0x80>)
 80014d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_TIM12_Init+0x80>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_TIM12_Init+0x80>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <MX_TIM12_Init+0x80>)
 80014ec:	f004 fd3f 	bl	8005f6e <HAL_TIM_OC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80014f6:	f000 ffc1 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 65000;
 80014fe:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001502:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <MX_TIM12_Init+0x80>)
 8001514:	f004 ffb6 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800151e:	f000 ffad 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000026c 	.word	0x2000026c
 8001530:	40001800 	.word	0x40001800

08001534 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <MX_TIM13_Init+0x8c>)
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <MX_TIM13_Init+0x90>)
 8001550:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_TIM13_Init+0x8c>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_TIM13_Init+0x8c>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001572:	4813      	ldr	r0, [pc, #76]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001574:	f004 fcac 	bl	8005ed0 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800157e:	f000 ff7d 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001582:	480f      	ldr	r0, [pc, #60]	; (80015c0 <MX_TIM13_Init+0x8c>)
 8001584:	f004 fcf3 	bl	8005f6e <HAL_TIM_OC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800158e:	f000 ff75 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_TIM13_Init+0x8c>)
 80015aa:	f004 ff6b 	bl	8006484 <HAL_TIM_OC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80015b4:	f000 ff62 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002b4 	.word	0x200002b4
 80015c4:	40001c00 	.word	0x40001c00

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b62      	ldr	r3, [pc, #392]	; (800176c <MX_GPIO_Init+0x1a4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a61      	ldr	r2, [pc, #388]	; (800176c <MX_GPIO_Init+0x1a4>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <MX_GPIO_Init+0x1a4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a5a      	ldr	r2, [pc, #360]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <MX_GPIO_Init+0x1a4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <MX_GPIO_Init+0x1a4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a53      	ldr	r2, [pc, #332]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a4c      	ldr	r2, [pc, #304]	; (800176c <MX_GPIO_Init+0x1a4>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a45      	ldr	r2, [pc, #276]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_GPIO_Init+0x1a4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8001686:	2200      	movs	r2, #0
 8001688:	f24c 011f 	movw	r1, #49183	; 0xc01f
 800168c:	4838      	ldr	r0, [pc, #224]	; (8001770 <MX_GPIO_Init+0x1a8>)
 800168e:	f003 ffa1 	bl	80055d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2101      	movs	r1, #1
 8001696:	4837      	ldr	r0, [pc, #220]	; (8001774 <MX_GPIO_Init+0x1ac>)
 8001698:	f003 ff9c 	bl	80055d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800169c:	2200      	movs	r2, #0
 800169e:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016a2:	4835      	ldr	r0, [pc, #212]	; (8001778 <MX_GPIO_Init+0x1b0>)
 80016a4:	f003 ff96 	bl	80055d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 80016a8:	f24c 031f 	movw	r3, #49183	; 0xc01f
 80016ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	4619      	mov	r1, r3
 80016c0:	482b      	ldr	r0, [pc, #172]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80016c2:	f003 fdeb 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4825      	ldr	r0, [pc, #148]	; (8001774 <MX_GPIO_Init+0x1ac>)
 80016de:	f003 fddd 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	481f      	ldr	r0, [pc, #124]	; (8001774 <MX_GPIO_Init+0x1ac>)
 80016f6:	f003 fdd1 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	481b      	ldr	r0, [pc, #108]	; (800177c <MX_GPIO_Init+0x1b4>)
 8001710:	f003 fdc4 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 BOOT1_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|BOOT1_Pin|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_10;
 8001714:	f240 430e 	movw	r3, #1038	; 0x40e
 8001718:	61fb      	str	r3, [r7, #28]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4815      	ldr	r0, [pc, #84]	; (8001780 <MX_GPIO_Init+0x1b8>)
 800172a:	f003 fdb7 	bl	800529c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
*/
  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800172e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001732:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_GPIO_Init+0x1b0>)
 8001748:	f003 fda8 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7|OTG_FS_OverCurrent_Pin;
 800174c:	23e4      	movs	r3, #228	; 0xe4
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_GPIO_Init+0x1b0>)
 8001760:	f003 fd9c 	bl	800529c <HAL_GPIO_Init>

}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40021000 	.word	0x40021000
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400

08001784 <start_first_move>:

/* USER CODE BEGIN 4 */

static void start_first_move()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	//thats to reinitialize the timers
	//because before the GPIO of the Compare pins
	//where otherwise used
	MX_TIM9_Init();
 8001788:	f7ff fda2 	bl	80012d0 <MX_TIM9_Init>
	MX_TIM10_Init();
 800178c:	f7ff fde6 	bl	800135c <MX_TIM10_Init>
	MX_TIM11_Init();
 8001790:	f7ff fe38 	bl	8001404 <MX_TIM11_Init>
	MX_TIM12_Init();
 8001794:	f7ff fe8a 	bl	80014ac <MX_TIM12_Init>
	MX_TIM3_Init();
 8001798:	f7ff fca6 	bl	80010e8 <MX_TIM3_Init>
	MX_TIM4_Init();
 800179c:	f7ff fd22 	bl	80011e4 <MX_TIM4_Init>
	commands&=~START_PROGRAM_COMMAND;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <start_first_move+0x68>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017a8:	4a10      	ldr	r2, [pc, #64]	; (80017ec <start_first_move+0x68>)
 80017aa:	6013      	str	r3, [r2, #0]
	flags_global_mc&=~FIRST_MOVE_IN_PROCESS;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <start_first_move+0x6c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <start_first_move+0x6c>)
 80017b6:	6013      	str	r3, [r2, #0]
	flags_global_mc|=PROGRAM_RUNNING;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <start_first_move+0x6c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <start_first_move+0x6c>)
 80017c2:	6013      	str	r3, [r2, #0]
	flags_global_mc&=~BUFFER_FULL;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <start_first_move+0x6c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <start_first_move+0x6c>)
 80017ce:	6013      	str	r3, [r2, #0]
	//thats the timer to start everything
	init_interrupt_enable();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <start_first_move+0x70>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <start_first_move+0x70>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	60d3      	str	r3, [r2, #12]
	init_compare_enable();
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <start_first_move+0x70>)
 80017de:	2201      	movs	r2, #1
 80017e0:	621a      	str	r2, [r3, #32]
	init_timer_start();
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <start_first_move+0x70>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
	//but this is obsolete I think
	/*
	position_timer_compare_enable();
	position_timer_start();
	*/
	return;
 80017e8:	bf00      	nop
}
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20017a1c 	.word	0x20017a1c
 80017f0:	20017a18 	.word	0x20017a18
 80017f4:	40001800 	.word	0x40001800

080017f8 <setup>:

static void setup()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80017fc:	213c      	movs	r1, #60	; 0x3c
 80017fe:	4820      	ldr	r0, [pc, #128]	; (8001880 <setup+0x88>)
 8001800:	f004 fcaa 	bl	8006158 <HAL_TIM_Encoder_Start>
	//TIM2->CR1=1;

	flags_global_mc|=WRITE_CTR_UNDER_READ_CTR;
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <setup+0x8c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <setup+0x8c>)
 800180e:	6013      	str	r3, [r2, #0]
	flags_global_mc|=FIRST_MOVE;
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <setup+0x8c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <setup+0x8c>)
 800181a:	6013      	str	r3, [r2, #0]
	//thats if we don't have endswitches...
	//flags_global_mc|=MACHINE_HOMED;

	x_interrupt_enable();
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <setup+0x90>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <setup+0x90>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	60d3      	str	r3, [r2, #12]
	y_interrupt_enable();
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <setup+0x94>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <setup+0x94>)
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	60d3      	str	r3, [r2, #12]
	z_interrupt_enable();
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <setup+0x98>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <setup+0x98>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	60d3      	str	r3, [r2, #12]
	b_interrupt_enable();
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <setup+0x9c>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <setup+0x9c>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	60d3      	str	r3, [r2, #12]
	c_interrupt_enable();
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <setup+0xa0>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <setup+0xa0>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	60d3      	str	r3, [r2, #12]
	manual_interrupt_enable();
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <setup+0xa4>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <setup+0xa4>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	60d3      	str	r3, [r2, #12]
	//position_timer_interrupt_enable();



	//I have to figure out why that is so important
	tx_header.DLC=8;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <setup+0xa8>)
 8001866:	2208      	movs	r2, #8
 8001868:	611a      	str	r2, [r3, #16]
	tx_header.IDE=CAN_ID_STD;
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <setup+0xa8>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	tx_header.RTR=CAN_RTR_DATA;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <setup+0xa8>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
	CAN1->sTxMailBox->TDTR=8;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <setup+0xac>)
 8001878:	2208      	movs	r2, #8
 800187a:	605a      	str	r2, [r3, #4]
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200000bc 	.word	0x200000bc
 8001884:	20017a18 	.word	0x20017a18
 8001888:	40014000 	.word	0x40014000
 800188c:	40014400 	.word	0x40014400
 8001890:	40014800 	.word	0x40014800
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800
 800189c:	40001c00 	.word	0x40001c00
 80018a0:	200002fc 	.word	0x200002fc
 80018a4:	40006580 	.word	0x40006580

080018a8 <check_command>:

static void check_command()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
	if(!commands)
 80018ae:	4ba4      	ldr	r3, [pc, #656]	; (8001b40 <check_command+0x298>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8173 	beq.w	8001b9e <check_command+0x2f6>
		return;

	if(commands&RESET_MICROCONTROLLER_COMMAND)
 80018b8:	4ba1      	ldr	r3, [pc, #644]	; (8001b40 <check_command+0x298>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <check_command+0x20>
		NVIC_SystemReset();
 80018c4:	f7ff faba 	bl	8000e3c <__NVIC_SystemReset>

	//POSITION STANDPOINT REQUESTS
	if(commands&X_POSITION_REQUEST_COMMAND){
 80018c8:	4b9d      	ldr	r3, [pc, #628]	; (8001b40 <check_command+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00f      	beq.n	80018f4 <check_command+0x4c>
		uint32_t input_nr=(uint32_t)x_standpoint;
 80018d4:	4b9b      	ldr	r3, [pc, #620]	; (8001b44 <check_command+0x29c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	607b      	str	r3, [r7, #4]
		send_position_message(input_nr,0,CAN_ID_GET_X_POSITION_ANSWER); //from where the standpoint is should be considered!!
 80018da:	f04f 6298 	mov.w	r2, #79691776	; 0x4c00000
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fd4b 	bl	800237c <send_position_message>
		commands&=~X_POSITION_REQUEST_COMMAND;
 80018e6:	4b96      	ldr	r3, [pc, #600]	; (8001b40 <check_command+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	4a94      	ldr	r2, [pc, #592]	; (8001b40 <check_command+0x298>)
 80018f0:	6013      	str	r3, [r2, #0]
		return;
 80018f2:	e15b      	b.n	8001bac <check_command+0x304>
	}
	if(commands&Y_POSITION_REQUEST_COMMAND){
 80018f4:	4b92      	ldr	r3, [pc, #584]	; (8001b40 <check_command+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00f      	beq.n	8001920 <check_command+0x78>
		uint32_t input_nr=(uint32_t)y_standpoint;
 8001900:	4b91      	ldr	r3, [pc, #580]	; (8001b48 <check_command+0x2a0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60bb      	str	r3, [r7, #8]
		send_position_message(input_nr,0,CAN_ID_GET_Y_POSITION_ANSWER);
 8001906:	f04f 629c 	mov.w	r2, #81788928	; 0x4e00000
 800190a:	2100      	movs	r1, #0
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f000 fd35 	bl	800237c <send_position_message>
		commands&=~Y_POSITION_REQUEST_COMMAND;
 8001912:	4b8b      	ldr	r3, [pc, #556]	; (8001b40 <check_command+0x298>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0302 	bic.w	r3, r3, #2
 800191a:	4a89      	ldr	r2, [pc, #548]	; (8001b40 <check_command+0x298>)
 800191c:	6013      	str	r3, [r2, #0]
		return;
 800191e:	e145      	b.n	8001bac <check_command+0x304>
	}
	if(commands&Z_POSITION_REQUEST_COMMAND){
 8001920:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <check_command+0x298>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00f      	beq.n	800194c <check_command+0xa4>
		uint32_t input_nr=(uint32_t)z_standpoint;
 800192c:	4b87      	ldr	r3, [pc, #540]	; (8001b4c <check_command+0x2a4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
		send_position_message(input_nr,0,CAN_ID_GET_Z_POSITION_ANSWER);
 8001932:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 8001936:	2100      	movs	r1, #0
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fd1f 	bl	800237c <send_position_message>
		commands&=~Z_POSITION_REQUEST_COMMAND;
 800193e:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <check_command+0x298>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0304 	bic.w	r3, r3, #4
 8001946:	4a7e      	ldr	r2, [pc, #504]	; (8001b40 <check_command+0x298>)
 8001948:	6013      	str	r3, [r2, #0]
		return;
 800194a:	e12f      	b.n	8001bac <check_command+0x304>
		return;
	}
	*/


	if(!NO_ACTIVE_MOVE)	//that can also be switched on when a programm is runnung
 800194c:	4b80      	ldr	r3, [pc, #512]	; (8001b50 <check_command+0x2a8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <check_command+0x2ac>)
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	f040 8124 	bne.w	8001ba2 <check_command+0x2fa>
		return;

	else if(commands&HOMING_CYCLE_COMMAND){
 800195a:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <check_command+0x298>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <check_command+0xc4>
		homing_cycle();			//thats hardware goes to hardwareswitches
 8001966:	f000 fbd9 	bl	800211c <homing_cycle>
		return;
 800196a:	e11f      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&HOMING_CYCLE_SPLIT_COMMAND){
 800196c:	4b74      	ldr	r3, [pc, #464]	; (8001b40 <check_command+0x298>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <check_command+0xd6>
		homing_cycle();			//thats hardware goes to hardwareswitches
 8001978:	f000 fbd0 	bl	800211c <homing_cycle>
		return;
 800197c:	e116      	b.n	8001bac <check_command+0x304>
	}

	//that has to be done from the home_position after the machine was homed
	if(commands&MEASURE_WCS_TOOL_FLAG_COMMAND){
 800197e:	4b70      	ldr	r3, [pc, #448]	; (8001b40 <check_command+0x298>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <check_command+0xe8>
		measure_tool();
 800198a:	f000 fc8b 	bl	80022a4 <measure_tool>
		return;
 800198e:	e10d      	b.n	8001bac <check_command+0x304>
	}
	if(commands&MEASURE_ACTUAL_TOOL_FLAG_COMMAND){
 8001990:	4b6b      	ldr	r3, [pc, #428]	; (8001b40 <check_command+0x298>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <check_command+0xfa>
		measure_tool();
 800199c:	f000 fc82 	bl	80022a4 <measure_tool>
		return;
 80019a0:	e104      	b.n	8001bac <check_command+0x304>
	}

	//POSITION MOVE_REQUESTS
	else if(commands&MOVE_X_POSITIVE_COMMAND){
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <check_command+0x298>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <check_command+0x116>
		move_axis(increment,POSITIVE,'x');
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <check_command+0x2b0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2278      	movs	r2, #120	; 0x78
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f900 	bl	8001bbc <move_axis>
		return;
 80019bc:	e0f6      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_X_NEGATIVE_COMMAND){
 80019be:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <check_command+0x298>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <check_command+0x132>
		move_axis(increment,NEGATIVE,'x');
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <check_command+0x2b0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2278      	movs	r2, #120	; 0x78
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f8f2 	bl	8001bbc <move_axis>
		return;
 80019d8:	e0e8      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Y_POSITIVE_COMMAND){
 80019da:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <check_command+0x298>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <check_command+0x14e>
		move_axis(increment,POSITIVE,'y');
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <check_command+0x2b0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2279      	movs	r2, #121	; 0x79
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f8e4 	bl	8001bbc <move_axis>
		return;
 80019f4:	e0da      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Y_NEGATIVE_COMMAND){
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <check_command+0x298>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <check_command+0x16a>
		move_axis(increment,NEGATIVE,'y');
 8001a02:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <check_command+0x2b0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2279      	movs	r2, #121	; 0x79
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f8d6 	bl	8001bbc <move_axis>
		return;
 8001a10:	e0cc      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Z_POSITIVE_COMMAND){
 8001a12:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <check_command+0x298>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <check_command+0x186>
		move_axis(increment,POSITIVE,'z');
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <check_command+0x2b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	227a      	movs	r2, #122	; 0x7a
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f8c8 	bl	8001bbc <move_axis>
		return;
 8001a2c:	e0be      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Z_NEGATIVE_COMMAND){
 8001a2e:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <check_command+0x298>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <check_command+0x1a2>
		move_axis(increment,NEGATIVE,'z');
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <check_command+0x2b0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	227a      	movs	r2, #122	; 0x7a
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f8ba 	bl	8001bbc <move_axis>
		return;
 8001a48:	e0b0      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_B_POSITIVE_COMMAND){
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <check_command+0x298>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <check_command+0x1be>
		move_axis(increment,POSITIVE,'b');
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <check_command+0x2b0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2262      	movs	r2, #98	; 0x62
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f8ac 	bl	8001bbc <move_axis>
		return;
 8001a64:	e0a2      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_B_NEGATIVE_COMMAND){
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <check_command+0x298>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <check_command+0x1da>
		move_axis(increment,NEGATIVE,'b');
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <check_command+0x2b0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2262      	movs	r2, #98	; 0x62
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f89e 	bl	8001bbc <move_axis>
		return;
 8001a80:	e094      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_C_POSITIVE_COMMAND){
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <check_command+0x298>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <check_command+0x1f6>
		move_axis(increment,POSITIVE,'c');
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <check_command+0x2b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2263      	movs	r2, #99	; 0x63
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f890 	bl	8001bbc <move_axis>
		return;
 8001a9c:	e086      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_C_NEGATIVE_COMMAND){
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <check_command+0x298>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <check_command+0x212>
		move_axis(increment,NEGATIVE,'c');
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <check_command+0x2b0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2263      	movs	r2, #99	; 0x63
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f882 	bl	8001bbc <move_axis>
		return;
 8001ab8:	e078      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Y_LEFT_POS_COMMAND){
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <check_command+0x298>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <check_command+0x22e>
		move_axis(increment,POSITIVE,'l');
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <check_command+0x2b0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	226c      	movs	r2, #108	; 0x6c
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f874 	bl	8001bbc <move_axis>
		return;
 8001ad4:	e06a      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Y_LEFT_NEG_COMMAND){
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <check_command+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <check_command+0x24a>
		move_axis(increment,NEGATIVE,'l');
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <check_command+0x2b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	226c      	movs	r2, #108	; 0x6c
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f866 	bl	8001bbc <move_axis>
		return;
 8001af0:	e05c      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Y_RIGHT_POS_COMMAND){
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <check_command+0x298>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <check_command+0x266>
		move_axis(increment,POSITIVE,'r');
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <check_command+0x2b0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2272      	movs	r2, #114	; 0x72
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f858 	bl	8001bbc <move_axis>
		return;
 8001b0c:	e04e      	b.n	8001bac <check_command+0x304>
	}
	else if(commands&MOVE_Y_RIGHT_NEG_COMMAND){
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <check_command+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <check_command+0x282>
		move_axis(increment,NEGATIVE,'r');
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <check_command+0x2b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2272      	movs	r2, #114	; 0x72
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f84a 	bl	8001bbc <move_axis>
		return;
 8001b28:	e040      	b.n	8001bac <check_command+0x304>
	}

	//HOME REQUESTS
	if(commands&GO_TO_HOME_COMMAND){
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <check_command+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <check_command+0x2b4>
		go_to_home_position(0); //thats software, just goes back to targetxyz 0
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 fa68 	bl	800200c <go_to_home_position>
		return;
 8001b3c:	e036      	b.n	8001bac <check_command+0x304>
 8001b3e:	bf00      	nop
 8001b40:	20017a1c 	.word	0x20017a1c
 8001b44:	20017a54 	.word	0x20017a54
 8001b48:	20017a58 	.word	0x20017a58
 8001b4c:	20017a5c 	.word	0x20017a5c
 8001b50:	20017a18 	.word	0x20017a18
 8001b54:	00f0000c 	.word	0x00f0000c
 8001b58:	20000008 	.word	0x20000008
	}
	if(commands&GO_TO_HOME_SPLIT_COMMAND){
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <check_command+0x30c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <check_command+0x2c8>
		go_to_home_position(1); //thats software, just goes back to targetxyz 0
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 fa4f 	bl	800200c <go_to_home_position>
		return;
 8001b6e:	e01d      	b.n	8001bac <check_command+0x304>
	}


	//PROGRAM START REQUEST

	else if(commands&START_PROGRAM_COMMAND){
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <check_command+0x30c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d014      	beq.n	8001ba6 <check_command+0x2fe>
		if(!(flags_global_mc&BUFFER_FILLING_IN_PROGRESS))
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <check_command+0x310>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <check_command+0x2e4>
			start_program();
 8001b88:	f000 fa12 	bl	8001fb0 <start_program>
		if(flags_global_mc&BUFFER_FULL)
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <check_command+0x310>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <check_command+0x302>
			start_first_move();
 8001b98:	f7ff fdf4 	bl	8001784 <start_first_move>
		return;
 8001b9c:	e005      	b.n	8001baa <check_command+0x302>
		return;
 8001b9e:	bf00      	nop
 8001ba0:	e004      	b.n	8001bac <check_command+0x304>
		return;
 8001ba2:	bf00      	nop
 8001ba4:	e002      	b.n	8001bac <check_command+0x304>
	}
			
	return;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <check_command+0x304>
		return;
 8001baa:	bf00      	nop
}
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20017a1c 	.word	0x20017a1c
 8001bb8:	20017a18 	.word	0x20017a18

08001bbc <move_axis>:


static void move_axis(int32_t increment,int32_t direction,char axis)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0a2      	sub	sp, #136	; 0x88
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	71fb      	strb	r3, [r7, #7]
	if(!NO_ACTIVE_MOVE)
 8001bca:	4b98      	ldr	r3, [pc, #608]	; (8001e2c <move_axis+0x270>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b98      	ldr	r3, [pc, #608]	; (8001e30 <move_axis+0x274>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 81d6 	bne.w	8001f84 <move_axis+0x3c8>
		return;
	//delete all requests
	commands&=	~MOVE_X_POSITIVE_COMMAND&~MOVE_X_NEGATIVE_COMMAND&
 8001bd8:	4b96      	ldr	r3, [pc, #600]	; (8001e34 <move_axis+0x278>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b96      	ldr	r3, [pc, #600]	; (8001e38 <move_axis+0x27c>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a94      	ldr	r2, [pc, #592]	; (8001e34 <move_axis+0x278>)
 8001be2:	6013      	str	r3, [r2, #0]
				~MOVE_C_POSITIVE_COMMAND&~MOVE_C_NEGATIVE_COMMAND&
				~MOVE_Y_LEFT_POS_COMMAND&~MOVE_Y_LEFT_NEG_COMMAND&
				~MOVE_Y_RIGHT_POS_COMMAND&~MOVE_Y_RIGHT_NEG_COMMAND
				;

	if(axis=='c'||axis=='b')
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b63      	cmp	r3, #99	; 0x63
 8001be8:	d002      	beq.n	8001bf0 <move_axis+0x34>
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b62      	cmp	r3, #98	; 0x62
 8001bee:	d101      	bne.n	8001bf4 <move_axis+0x38>
		increment= INCREMENT_3;
 8001bf0:	2314      	movs	r3, #20
 8001bf2:	60fb      	str	r3, [r7, #12]

	if(!direction)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <move_axis+0x44>
		increment*=-1;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	60fb      	str	r3, [r7, #12]


	switch(axis){
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	3b62      	subs	r3, #98	; 0x62
 8001c04:	2b18      	cmp	r3, #24
 8001c06:	f200 81bf 	bhi.w	8001f88 <move_axis+0x3cc>
 8001c0a:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <move_axis+0x54>)
 8001c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c10:	08001d41 	.word	0x08001d41
 8001c14:	08001d85 	.word	0x08001d85
 8001c18:	08001f89 	.word	0x08001f89
 8001c1c:	08001f89 	.word	0x08001f89
 8001c20:	08001f89 	.word	0x08001f89
 8001c24:	08001f89 	.word	0x08001f89
 8001c28:	08001f89 	.word	0x08001f89
 8001c2c:	08001f89 	.word	0x08001f89
 8001c30:	08001f89 	.word	0x08001f89
 8001c34:	08001f89 	.word	0x08001f89
 8001c38:	08001dc9 	.word	0x08001dc9
 8001c3c:	08001f89 	.word	0x08001f89
 8001c40:	08001f89 	.word	0x08001f89
 8001c44:	08001f89 	.word	0x08001f89
 8001c48:	08001f89 	.word	0x08001f89
 8001c4c:	08001f89 	.word	0x08001f89
 8001c50:	08001e0d 	.word	0x08001e0d
 8001c54:	08001f89 	.word	0x08001f89
 8001c58:	08001f89 	.word	0x08001f89
 8001c5c:	08001f89 	.word	0x08001f89
 8001c60:	08001f89 	.word	0x08001f89
 8001c64:	08001f89 	.word	0x08001f89
 8001c68:	08001c75 	.word	0x08001c75
 8001c6c:	08001cb9 	.word	0x08001cb9
 8001c70:	08001cfd 	.word	0x08001cfd
		case 'x':	flags_global_mc|=X_MANUAL_MOVE;
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <move_axis+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7c:	4a6b      	ldr	r2, [pc, #428]	; (8001e2c <move_axis+0x270>)
 8001c7e:	6013      	str	r3, [r2, #0]
					if(increment)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <move_axis+0xd8>
						x_target+=increment;
 8001c86:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <move_axis+0x280>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a6b      	ldr	r2, [pc, #428]	; (8001e3c <move_axis+0x280>)
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e002      	b.n	8001c9a <move_axis+0xde>
					else
						x_target=0;
 8001c94:	4b69      	ldr	r3, [pc, #420]	; (8001e3c <move_axis+0x280>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
					motor_x_direction=direction;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <move_axis+0x284>)
 8001c9e:	6013      	str	r3, [r2, #0]
					if(direction){
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <move_axis+0xf2>
						SET_X_AXIS_POSITIVE_DIRECTION();
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <move_axis+0x288>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	619a      	str	r2, [r3, #24]
					}
					else
						SET_X_AXIS_NEGATIVE_DIRECTION();
					break;
 8001cac:	e0f2      	b.n	8001e94 <move_axis+0x2d8>
						SET_X_AXIS_NEGATIVE_DIRECTION();
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <move_axis+0x288>)
 8001cb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cb4:	619a      	str	r2, [r3, #24]
					break;
 8001cb6:	e0ed      	b.n	8001e94 <move_axis+0x2d8>
		
		case 'y':	flags_global_mc|=Y_MANUAL_MOVE;
 8001cb8:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <move_axis+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <move_axis+0x270>)
 8001cc2:	6013      	str	r3, [r2, #0]
					if(increment)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <move_axis+0x11c>
						y_target+=increment;
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <move_axis+0x28c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <move_axis+0x28c>)
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e002      	b.n	8001cde <move_axis+0x122>
					else
						y_target=0;
 8001cd8:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <move_axis+0x28c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
					motor_y_direction=direction;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <move_axis+0x290>)
 8001ce2:	6013      	str	r3, [r2, #0]
					if(direction){
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <move_axis+0x138>
						SET_Y_AXIS_POSITIVE_DIRECTION();
 8001cea:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <move_axis+0x288>)
 8001cec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf0:	619a      	str	r2, [r3, #24]
					}
					else
						SET_Y_AXIS_NEGATIVE_DIRECTION();
					break;
 8001cf2:	e0cf      	b.n	8001e94 <move_axis+0x2d8>
						SET_Y_AXIS_NEGATIVE_DIRECTION();
 8001cf4:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <move_axis+0x288>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	619a      	str	r2, [r3, #24]
					break;
 8001cfa:	e0cb      	b.n	8001e94 <move_axis+0x2d8>
		
		case 'z':	flags_global_mc|=Z_MANUAL_MOVE;
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <move_axis+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d04:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <move_axis+0x270>)
 8001d06:	6013      	str	r3, [r2, #0]
					if(increment)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <move_axis+0x160>
						z_target+=increment;
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <move_axis+0x294>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <move_axis+0x294>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e002      	b.n	8001d22 <move_axis+0x166>
					else
						z_target=0;
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <move_axis+0x294>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
					motor_z_direction=direction;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <move_axis+0x298>)
 8001d26:	6013      	str	r3, [r2, #0]
					if(direction){
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <move_axis+0x17a>
						SET_Z_AXIS_POSITIVE_DIRECTION();
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <move_axis+0x288>)
 8001d30:	2204      	movs	r2, #4
 8001d32:	619a      	str	r2, [r3, #24]
					}
					else
						SET_Z_AXIS_NEGATIVE_DIRECTION();
					break;
 8001d34:	e0ae      	b.n	8001e94 <move_axis+0x2d8>
						SET_Z_AXIS_NEGATIVE_DIRECTION();
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <move_axis+0x288>)
 8001d38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d3c:	619a      	str	r2, [r3, #24]
					break;
 8001d3e:	e0a9      	b.n	8001e94 <move_axis+0x2d8>
		case 'b':
					flags_global_mc|=B_MANUAL_MOVE;
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <move_axis+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	4a38      	ldr	r2, [pc, #224]	; (8001e2c <move_axis+0x270>)
 8001d4a:	6013      	str	r3, [r2, #0]
					if(increment)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <move_axis+0x1a4>
						b_target+=increment;
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <move_axis+0x29c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <move_axis+0x29c>)
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e002      	b.n	8001d66 <move_axis+0x1aa>
					else
						b_target=0;
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <move_axis+0x29c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
					motor_b_direction=direction;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <move_axis+0x2a0>)
 8001d6a:	6013      	str	r3, [r2, #0]
					if(direction){
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <move_axis+0x1be>
						SET_B_AXIS_POSITIVE_DIRECTION();
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <move_axis+0x288>)
 8001d74:	2208      	movs	r2, #8
 8001d76:	619a      	str	r2, [r3, #24]
					}
					else
						SET_B_AXIS_NEGATIVE_DIRECTION();
					break;
 8001d78:	e08c      	b.n	8001e94 <move_axis+0x2d8>
						SET_B_AXIS_NEGATIVE_DIRECTION();
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <move_axis+0x288>)
 8001d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d80:	619a      	str	r2, [r3, #24]
					break;
 8001d82:	e087      	b.n	8001e94 <move_axis+0x2d8>
		case 'c':

					flags_global_mc|=C_MANUAL_MOVE;
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <move_axis+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <move_axis+0x270>)
 8001d8e:	6013      	str	r3, [r2, #0]
					if(increment)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <move_axis+0x1e8>
						c_target+=increment;
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <move_axis+0x2a4>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <move_axis+0x2a4>)
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e002      	b.n	8001daa <move_axis+0x1ee>
					else
						c_target=0;
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <move_axis+0x2a4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
					motor_c_direction=direction;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <move_axis+0x2a8>)
 8001dae:	6013      	str	r3, [r2, #0]
					if(direction){
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <move_axis+0x202>
						SET_C_AXIS_POSITIVE_DIRECTION();
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <move_axis+0x288>)
 8001db8:	2210      	movs	r2, #16
 8001dba:	619a      	str	r2, [r3, #24]
					}
					else
						SET_C_AXIS_NEGATIVE_DIRECTION();
					break;
 8001dbc:	e06a      	b.n	8001e94 <move_axis+0x2d8>
						SET_C_AXIS_NEGATIVE_DIRECTION();
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <move_axis+0x288>)
 8001dc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dc4:	619a      	str	r2, [r3, #24]
					break;
 8001dc6:	e065      	b.n	8001e94 <move_axis+0x2d8>
		case 'l':	flags_global_mc|=Y_MANUAL_MOVE_LEFT;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <move_axis+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <move_axis+0x270>)
 8001dd2:	6013      	str	r3, [r2, #0]
					if(increment)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <move_axis+0x22c>
						y_target_left+=increment;
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <move_axis+0x2ac>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <move_axis+0x2ac>)
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e002      	b.n	8001dee <move_axis+0x232>
					else
						y_target_left=0;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <move_axis+0x2ac>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
					motor_y_direction=direction;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <move_axis+0x290>)
 8001df2:	6013      	str	r3, [r2, #0]
					if(direction){
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <move_axis+0x248>
						SET_Y_AXIS_POSITIVE_DIRECTION();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <move_axis+0x288>)
 8001dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e00:	619a      	str	r2, [r3, #24]
					}
					else
						SET_Y_AXIS_NEGATIVE_DIRECTION();
					break;
 8001e02:	e047      	b.n	8001e94 <move_axis+0x2d8>
						SET_Y_AXIS_NEGATIVE_DIRECTION();
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <move_axis+0x288>)
 8001e06:	2202      	movs	r2, #2
 8001e08:	619a      	str	r2, [r3, #24]
					break;
 8001e0a:	e043      	b.n	8001e94 <move_axis+0x2d8>
		case 'r':	flags_global_mc|=Y_MANUAL_MOVE_RIGHT;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <move_axis+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f043 0320 	orr.w	r3, r3, #32
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <move_axis+0x270>)
 8001e16:	6013      	str	r3, [r2, #0]
					if(increment)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d028      	beq.n	8001e70 <move_axis+0x2b4>
						y_target_right+=increment;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <move_axis+0x2b0>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <move_axis+0x2b0>)
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e024      	b.n	8001e76 <move_axis+0x2ba>
 8001e2c:	20017a18 	.word	0x20017a18
 8001e30:	00f0000c 	.word	0x00f0000c
 8001e34:	20017a1c 	.word	0x20017a1c
 8001e38:	ff08781f 	.word	0xff08781f
 8001e3c:	20017a38 	.word	0x20017a38
 8001e40:	20017a24 	.word	0x20017a24
 8001e44:	40021000 	.word	0x40021000
 8001e48:	20017a3c 	.word	0x20017a3c
 8001e4c:	20017a28 	.word	0x20017a28
 8001e50:	20017a40 	.word	0x20017a40
 8001e54:	20017a2c 	.word	0x20017a2c
 8001e58:	20017a44 	.word	0x20017a44
 8001e5c:	20017a30 	.word	0x20017a30
 8001e60:	20017a48 	.word	0x20017a48
 8001e64:	20017a34 	.word	0x20017a34
 8001e68:	20017a4c 	.word	0x20017a4c
 8001e6c:	20017a50 	.word	0x20017a50
					else
						y_target_right=0;
 8001e70:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <move_axis+0x3d4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
					motor_y_direction=direction;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <move_axis+0x3d8>)
 8001e7a:	6013      	str	r3, [r2, #0]
					if(direction){
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <move_axis+0x2d0>
						SET_Y_AXIS_POSITIVE_DIRECTION();
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <move_axis+0x3dc>)
 8001e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e88:	619a      	str	r2, [r3, #24]
					}
					else
						SET_Y_AXIS_NEGATIVE_DIRECTION();
					break;
 8001e8a:	e002      	b.n	8001e92 <move_axis+0x2d6>
						SET_Y_AXIS_NEGATIVE_DIRECTION();
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <move_axis+0x3dc>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	619a      	str	r2, [r3, #24]
					break;
 8001e92:	bf00      	nop
		default:	return;
	}

	//setup for xaxis
	GPIO_InitTypeDef gpio_init_1;
	gpio_init_1.Pin = GPIO_PIN_5;
 8001e94:	2320      	movs	r3, #32
 8001e96:	677b      	str	r3, [r7, #116]	; 0x74
	gpio_init_1.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	67bb      	str	r3, [r7, #120]	; 0x78
	gpio_init_1.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
	gpio_init_1.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	HAL_GPIO_Init(GPIOE, &gpio_init_1);
 8001ea6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eaa:	4619      	mov	r1, r3
 8001eac:	483a      	ldr	r0, [pc, #232]	; (8001f98 <move_axis+0x3dc>)
 8001eae:	f003 f9f5 	bl	800529c <HAL_GPIO_Init>

	//setup for yaxis
	GPIO_InitTypeDef gpio_init_2;
	gpio_init_2.Pin = GPIO_PIN_8;
 8001eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb6:	663b      	str	r3, [r7, #96]	; 0x60
	gpio_init_2.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	667b      	str	r3, [r7, #100]	; 0x64
	gpio_init_2.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
	gpio_init_2.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(GPIOB, &gpio_init_2);
 8001ec4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4834      	ldr	r0, [pc, #208]	; (8001f9c <move_axis+0x3e0>)
 8001ecc:	f003 f9e6 	bl	800529c <HAL_GPIO_Init>

	//setup for zaxis
	GPIO_InitTypeDef gpio_init_3;
	gpio_init_3.Pin = GPIO_PIN_9;
 8001ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
	gpio_init_3.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	653b      	str	r3, [r7, #80]	; 0x50
	gpio_init_3.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	657b      	str	r3, [r7, #84]	; 0x54
	gpio_init_3.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(GPIOB, &gpio_init_3);
 8001ee2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	482c      	ldr	r0, [pc, #176]	; (8001f9c <move_axis+0x3e0>)
 8001eea:	f003 f9d7 	bl	800529c <HAL_GPIO_Init>

	//setup for baxis
	GPIO_InitTypeDef gpio_init_4;
	gpio_init_4.Pin = GPIO_PIN_6;
 8001eee:	2340      	movs	r3, #64	; 0x40
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
	gpio_init_4.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
	gpio_init_4.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	643b      	str	r3, [r7, #64]	; 0x40
	gpio_init_4.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &gpio_init_4);
 8001efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f02:	4619      	mov	r1, r3
 8001f04:	4826      	ldr	r0, [pc, #152]	; (8001fa0 <move_axis+0x3e4>)
 8001f06:	f003 f9c9 	bl	800529c <HAL_GPIO_Init>

	//setup for caxis
	GPIO_InitTypeDef gpio_init_5;
	gpio_init_5.Pin = GPIO_PIN_6;
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_5.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_5.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio_init_5.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &gpio_init_5);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481e      	ldr	r0, [pc, #120]	; (8001f9c <move_axis+0x3e0>)
 8001f22:	f003 f9bb 	bl	800529c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &gpio_init_6);
*/
	//setup for y r axis
	//this has to be switched off for not seperate steering...
	//in other words, for seperate the 11 has to be initialized
	if(flags_global_mc&Y_MANUAL_MOVE_RIGHT){
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <move_axis+0x3e8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <move_axis+0x394>
		GPIO_InitTypeDef gpio_init_7;
		gpio_init_7.Pin = GPIO_PIN_11;
 8001f32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f36:	613b      	str	r3, [r7, #16]
		gpio_init_7.Mode = GPIO_MODE_OUTPUT_PP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
		gpio_init_7.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
		gpio_init_7.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &gpio_init_7);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4814      	ldr	r0, [pc, #80]	; (8001f9c <move_axis+0x3e0>)
 8001f4c:	f003 f9a6 	bl	800529c <HAL_GPIO_Init>
	}

	if(axis=='b'||axis=='c'){
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	2b62      	cmp	r3, #98	; 0x62
 8001f54:	d002      	beq.n	8001f5c <move_axis+0x3a0>
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b63      	cmp	r3, #99	; 0x63
 8001f5a:	d104      	bne.n	8001f66 <move_axis+0x3aa>
		TIM13->PSC=400;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <move_axis+0x3ec>)
 8001f5e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
 8001f64:	e002      	b.n	8001f6c <move_axis+0x3b0>

	}
	else
		TIM13->PSC=1;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <move_axis+0x3ec>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM13->ARR=timer_speed;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <move_axis+0x3f0>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <move_axis+0x3ec>)
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
	//x_compare_enable();
	manual_compare_enable();
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <move_axis+0x3ec>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	621a      	str	r2, [r3, #32]
	manual_timer_start();
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <move_axis+0x3ec>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
	
	return;
 8001f82:	e002      	b.n	8001f8a <move_axis+0x3ce>
		return;
 8001f84:	bf00      	nop
 8001f86:	e000      	b.n	8001f8a <move_axis+0x3ce>
		default:	return;
 8001f88:	bf00      	nop
}
 8001f8a:	3788      	adds	r7, #136	; 0x88
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20017a50 	.word	0x20017a50
 8001f94:	20017a28 	.word	0x20017a28
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	20017a18 	.word	0x20017a18
 8001fa8:	40001c00 	.word	0x40001c00
 8001fac:	20000004 	.word	0x20000004

08001fb0 <start_program>:


//is machine homed, is machine at 0, is there no manual move going on

static void start_program()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	if(MACHINE_READY_FOR_PROGRAM){
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <start_program+0x4c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11a      	bne.n	8001ff6 <start_program+0x46>
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <start_program+0x4c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d014      	beq.n	8001ff6 <start_program+0x46>
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <start_program+0x50>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d110      	bne.n	8001ff6 <start_program+0x46>
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <start_program+0x54>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10c      	bne.n	8001ff6 <start_program+0x46>
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <start_program+0x58>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <start_program+0x46>
		flags_global_mc|=BUFFER_FILLING_IN_PROGRESS;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <start_program+0x4c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fec:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <start_program+0x4c>)
 8001fee:	6013      	str	r3, [r2, #0]
		request_receiving_data();
 8001ff0:	f001 f8f4 	bl	80031dc <request_receiving_data>
	}
		
	return;
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
}
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20017a18 	.word	0x20017a18
 8002000:	20017a54 	.word	0x20017a54
 8002004:	20017a58 	.word	0x20017a58
 8002008:	20017a5c 	.word	0x20017a5c

0800200c <go_to_home_position>:

//this should be not neccesary anymore because to go every time to the end switches would be much better

void go_to_home_position(int split)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	//first home the z axis, else you could drive into the workpiece

	if(z_standpoint>0)
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <go_to_home_position+0xf8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dd05      	ble.n	8002028 <go_to_home_position+0x1c>
		move_axis(MOVE_TO_ZERO,NEGATIVE,'z');
 800201c:	227a      	movs	r2, #122	; 0x7a
 800201e:	2100      	movs	r1, #0
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fdcb 	bl	8001bbc <move_axis>
		}
	}



	return;
 8002026:	e068      	b.n	80020fa <go_to_home_position+0xee>
	else if(z_standpoint<0)
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <go_to_home_position+0xf8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	da05      	bge.n	800203c <go_to_home_position+0x30>
		move_axis(MOVE_TO_ZERO,POSITIVE,'z');
 8002030:	227a      	movs	r2, #122	; 0x7a
 8002032:	2101      	movs	r1, #1
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fdc1 	bl	8001bbc <move_axis>
	return;
 800203a:	e05e      	b.n	80020fa <go_to_home_position+0xee>
	else if(x_standpoint>0)
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <go_to_home_position+0xfc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	dd05      	ble.n	8002050 <go_to_home_position+0x44>
		move_axis(MOVE_TO_ZERO,NEGATIVE,'x');
 8002044:	2278      	movs	r2, #120	; 0x78
 8002046:	2100      	movs	r1, #0
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff fdb7 	bl	8001bbc <move_axis>
	return;
 800204e:	e054      	b.n	80020fa <go_to_home_position+0xee>
	else if(x_standpoint<0)
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <go_to_home_position+0xfc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da05      	bge.n	8002064 <go_to_home_position+0x58>
		move_axis(MOVE_TO_ZERO,POSITIVE,'x');
 8002058:	2278      	movs	r2, #120	; 0x78
 800205a:	2101      	movs	r1, #1
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fdad 	bl	8001bbc <move_axis>
	return;
 8002062:	e04a      	b.n	80020fa <go_to_home_position+0xee>
	else if(split == 1){
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d124      	bne.n	80020b4 <go_to_home_position+0xa8>
		if(y_standpoint_left>0)
 800206a:	4b28      	ldr	r3, [pc, #160]	; (800210c <go_to_home_position+0x100>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dd04      	ble.n	800207c <go_to_home_position+0x70>
			move_axis(MOVE_TO_ZERO,NEGATIVE,'l');
 8002072:	226c      	movs	r2, #108	; 0x6c
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff fda0 	bl	8001bbc <move_axis>
		if(y_standpoint_left<0)
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <go_to_home_position+0x100>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	da04      	bge.n	800208e <go_to_home_position+0x82>
			move_axis(MOVE_TO_ZERO,POSITIVE,'l');
 8002084:	226c      	movs	r2, #108	; 0x6c
 8002086:	2101      	movs	r1, #1
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fd97 	bl	8001bbc <move_axis>
		if(y_standpoint_right>0)
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <go_to_home_position+0x104>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	dd04      	ble.n	80020a0 <go_to_home_position+0x94>
			move_axis(MOVE_TO_ZERO,NEGATIVE,'r');
 8002096:	2272      	movs	r2, #114	; 0x72
 8002098:	2100      	movs	r1, #0
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff fd8e 	bl	8001bbc <move_axis>
		if(y_standpoint_right<0)
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <go_to_home_position+0x104>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da28      	bge.n	80020fa <go_to_home_position+0xee>
			move_axis(MOVE_TO_ZERO,POSITIVE,'r');
 80020a8:	2272      	movs	r2, #114	; 0x72
 80020aa:	2101      	movs	r1, #1
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fd85 	bl	8001bbc <move_axis>
	return;
 80020b2:	e022      	b.n	80020fa <go_to_home_position+0xee>
	else if(split == 0){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11f      	bne.n	80020fa <go_to_home_position+0xee>
		if(y_standpoint>0)
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <go_to_home_position+0x108>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	dd04      	ble.n	80020cc <go_to_home_position+0xc0>
			move_axis(MOVE_TO_ZERO,NEGATIVE,'y');
 80020c2:	2279      	movs	r2, #121	; 0x79
 80020c4:	2100      	movs	r1, #0
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fd78 	bl	8001bbc <move_axis>
		if(y_standpoint<0)
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <go_to_home_position+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da05      	bge.n	80020e0 <go_to_home_position+0xd4>
			move_axis(MOVE_TO_ZERO,POSITIVE,'y');
 80020d4:	2279      	movs	r2, #121	; 0x79
 80020d6:	2101      	movs	r1, #1
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff fd6f 	bl	8001bbc <move_axis>
	return;
 80020de:	e00c      	b.n	80020fa <go_to_home_position+0xee>
			commands&=~GO_TO_HOME_COMMAND;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <go_to_home_position+0x10c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 0308 	bic.w	r3, r3, #8
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <go_to_home_position+0x10c>)
 80020ea:	6013      	str	r3, [r2, #0]
			send_position_message(0,0,CAN_ID_MACHINE_HOME);
 80020ec:	f04f 620a 	mov.w	r2, #144703488	; 0x8a00000
 80020f0:	2100      	movs	r1, #0
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 f942 	bl	800237c <send_position_message>
	return;
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
}
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20017a5c 	.word	0x20017a5c
 8002108:	20017a54 	.word	0x20017a54
 800210c:	20017a68 	.word	0x20017a68
 8002110:	20017a6c 	.word	0x20017a6c
 8002114:	20017a58 	.word	0x20017a58
 8002118:	20017a1c 	.word	0x20017a1c

0800211c <homing_cycle>:

static void homing_cycle(){
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
//first home the z axis, else you could drive into the workpiece
	if(!(flags_global_mc&Z_HOMED))
 8002122:	4b57      	ldr	r3, [pc, #348]	; (8002280 <homing_cycle+0x164>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <homing_cycle+0x1e>
		move_axis(1000000,POSITIVE,'z');
 800212e:	227a      	movs	r2, #122	; 0x7a
 8002130:	2101      	movs	r1, #1
 8002132:	4854      	ldr	r0, [pc, #336]	; (8002284 <homing_cycle+0x168>)
 8002134:	f7ff fd42 	bl	8001bbc <move_axis>
		if(commands&HOMING_CYCLE_SPLIT_COMMAND)
			commands|=GO_TO_HOME_SPLIT_COMMAND;//move all axis to 0
		commands&=~HOMING_CYCLE_COMMAND;
		commands&=~HOMING_CYCLE_SPLIT_COMMAND;
	}
	return;
 8002138:	e09d      	b.n	8002276 <homing_cycle+0x15a>
	else if(!(flags_global_mc&X_HOMED))
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <homing_cycle+0x164>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d105      	bne.n	8002152 <homing_cycle+0x36>
		move_axis(1000000,NEGATIVE,'x');
 8002146:	2278      	movs	r2, #120	; 0x78
 8002148:	2100      	movs	r1, #0
 800214a:	484e      	ldr	r0, [pc, #312]	; (8002284 <homing_cycle+0x168>)
 800214c:	f7ff fd36 	bl	8001bbc <move_axis>
	return;
 8002150:	e091      	b.n	8002276 <homing_cycle+0x15a>
	else if(!(flags_global_mc&Y_HOMED)){
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <homing_cycle+0x164>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d132      	bne.n	80021c4 <homing_cycle+0xa8>
		for(int i = 0; i < 1000; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e002      	b.n	800216a <homing_cycle+0x4e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3301      	adds	r3, #1
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002170:	dbf8      	blt.n	8002164 <homing_cycle+0x48>
		if(commands&HOMING_CYCLE_SPLIT_COMMAND){
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <homing_cycle+0x16c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <homing_cycle+0x90>
			if(!(flags_global_mc&Y_HOMED_LEFT))
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <homing_cycle+0x164>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <homing_cycle+0x78>
				move_axis(1000000,NEGATIVE,'l');
 800218a:	226c      	movs	r2, #108	; 0x6c
 800218c:	2100      	movs	r1, #0
 800218e:	483d      	ldr	r0, [pc, #244]	; (8002284 <homing_cycle+0x168>)
 8002190:	f7ff fd14 	bl	8001bbc <move_axis>
			if(!(flags_global_mc&Y_HOMED_RIGHT))
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <homing_cycle+0x164>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219c:	2b00      	cmp	r3, #0
 800219e:	d16a      	bne.n	8002276 <homing_cycle+0x15a>
				move_axis(1000000,NEGATIVE,'r');
 80021a0:	2272      	movs	r2, #114	; 0x72
 80021a2:	2100      	movs	r1, #0
 80021a4:	4837      	ldr	r0, [pc, #220]	; (8002284 <homing_cycle+0x168>)
 80021a6:	f7ff fd09 	bl	8001bbc <move_axis>
	return;
 80021aa:	e064      	b.n	8002276 <homing_cycle+0x15a>
		else if(commands&HOMING_CYCLE_COMMAND)
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <homing_cycle+0x16c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05e      	beq.n	8002276 <homing_cycle+0x15a>
			move_axis(1000000,NEGATIVE,'y');
 80021b8:	2279      	movs	r2, #121	; 0x79
 80021ba:	2100      	movs	r1, #0
 80021bc:	4831      	ldr	r0, [pc, #196]	; (8002284 <homing_cycle+0x168>)
 80021be:	f7ff fcfd 	bl	8001bbc <move_axis>
	return;
 80021c2:	e058      	b.n	8002276 <homing_cycle+0x15a>
		flags_global_mc&=~Z_HOMED;
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <homing_cycle+0x164>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <homing_cycle+0x164>)
 80021ce:	6013      	str	r3, [r2, #0]
		flags_global_mc&=~X_HOMED;
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <homing_cycle+0x164>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <homing_cycle+0x164>)
 80021da:	6013      	str	r3, [r2, #0]
		flags_global_mc&=~Y_HOMED;
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <homing_cycle+0x164>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <homing_cycle+0x164>)
 80021e6:	6013      	str	r3, [r2, #0]
		flags_global_mc|=MACHINE_HOMED;
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <homing_cycle+0x164>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <homing_cycle+0x164>)
 80021f2:	6013      	str	r3, [r2, #0]
		x_standpoint=-6400;//it woudl move a bit to the right in case of go to home
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <homing_cycle+0x170>)
 80021f6:	4a26      	ldr	r2, [pc, #152]	; (8002290 <homing_cycle+0x174>)
 80021f8:	601a      	str	r2, [r3, #0]
		z_standpoint=6400;
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <homing_cycle+0x178>)
 80021fc:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002200:	601a      	str	r2, [r3, #0]
		if(commands&HOMING_CYCLE_COMMAND)
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <homing_cycle+0x16c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <homing_cycle+0xf8>
			y_standpoint=-6400;//this has to change for axis direction change...
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <homing_cycle+0x17c>)
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <homing_cycle+0x174>)
 8002212:	601a      	str	r2, [r3, #0]
		if(commands&HOMING_CYCLE_SPLIT_COMMAND){
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <homing_cycle+0x16c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <homing_cycle+0x110>
		y_standpoint_left = -6400;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <homing_cycle+0x180>)
 8002222:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <homing_cycle+0x174>)
 8002224:	601a      	str	r2, [r3, #0]
		y_standpoint_right = -6400;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <homing_cycle+0x184>)
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <homing_cycle+0x174>)
 800222a:	601a      	str	r2, [r3, #0]
		if(commands&HOMING_CYCLE_COMMAND)
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <homing_cycle+0x16c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <homing_cycle+0x128>
			commands|=GO_TO_HOME_COMMAND;//move all axis to 0
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <homing_cycle+0x16c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	4a11      	ldr	r2, [pc, #68]	; (8002288 <homing_cycle+0x16c>)
 8002242:	6013      	str	r3, [r2, #0]
		if(commands&HOMING_CYCLE_SPLIT_COMMAND)
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <homing_cycle+0x16c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <homing_cycle+0x140>
			commands|=GO_TO_HOME_SPLIT_COMMAND;//move all axis to 0
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <homing_cycle+0x16c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <homing_cycle+0x16c>)
 800225a:	6013      	str	r3, [r2, #0]
		commands&=~HOMING_CYCLE_COMMAND;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <homing_cycle+0x16c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 0310 	bic.w	r3, r3, #16
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <homing_cycle+0x16c>)
 8002266:	6013      	str	r3, [r2, #0]
		commands&=~HOMING_CYCLE_SPLIT_COMMAND;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <homing_cycle+0x16c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <homing_cycle+0x16c>)
 8002272:	6013      	str	r3, [r2, #0]
	return;
 8002274:	bf00      	nop
 8002276:	bf00      	nop
}
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20017a18 	.word	0x20017a18
 8002284:	000f4240 	.word	0x000f4240
 8002288:	20017a1c 	.word	0x20017a1c
 800228c:	20017a54 	.word	0x20017a54
 8002290:	ffffe700 	.word	0xffffe700
 8002294:	20017a5c 	.word	0x20017a5c
 8002298:	20017a58 	.word	0x20017a58
 800229c:	20017a68 	.word	0x20017a68
 80022a0:	20017a6c 	.word	0x20017a6c

080022a4 <measure_tool>:
//homeposition means all axis are at 0, that is slightly besides the endswitches, in order that they are not pressed
#define MACHINE_AT_HOME_POSITION (x_standpoint==0&&y_standpoint==0&&z_standpoint==0)

static void measure_tool()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	//if Machine is homed, and if its at xyz 0;
	//else first home or at least go xyz to 0 then measure the tool
	//
	if((flags_global_mc&MACHINE_HOMED)&&MACHINE_AT_HOME_POSITION)
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <measure_tool+0xbc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <measure_tool+0x36>
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <measure_tool+0xc0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <measure_tool+0x36>
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <measure_tool+0xc4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <measure_tool+0x36>
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <measure_tool+0xc8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <measure_tool+0x36>
		move_axis(1000000,NEGATIVE,'z');
 80022ce:	227a      	movs	r2, #122	; 0x7a
 80022d0:	2100      	movs	r1, #0
 80022d2:	4827      	ldr	r0, [pc, #156]	; (8002370 <measure_tool+0xcc>)
 80022d4:	f7ff fc72 	bl	8001bbc <move_axis>
 80022d8:	e03c      	b.n	8002354 <measure_tool+0xb0>
	else if(flags_global_mc&MEASURED_TOOL){
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <measure_tool+0xbc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d037      	beq.n	8002356 <measure_tool+0xb2>
		uint32_t input_nr=(uint32_t)z_standpoint;//if this number is -1(should not happen, than the value of the input_nr will be 0xffffffff) thats a problem, its oviously not because in the gui there is still the right value...
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <measure_tool+0xc8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	607b      	str	r3, [r7, #4]
		if(commands & MEASURE_WCS_TOOL_FLAG_COMMAND)
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <measure_tool+0xd0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <measure_tool+0x60>
			send_position_message(input_nr,0,MEASURE_WCS_TOOL_ANSWER_ID);\
 80022f8:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
 80022fc:	2100      	movs	r1, #0
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f83c 	bl	800237c <send_position_message>
		if(commands & MEASURE_ACTUAL_TOOL_FLAG_COMMAND)
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <measure_tool+0xd0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <measure_tool+0x78>
			send_position_message(input_nr,0,MEASURE_ACTUAL_TOOL_ANSWER_ID);
 8002310:	f04f 62ec 	mov.w	r2, #123731968	; 0x7600000
 8002314:	2100      	movs	r1, #0
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f830 	bl	800237c <send_position_message>
		flags_global_mc&=~MEASURED_TOOL;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <measure_tool+0xbc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <measure_tool+0xbc>)
 8002326:	6013      	str	r3, [r2, #0]
		commands&=~MEASURE_WCS_TOOL_FLAG_COMMAND;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <measure_tool+0xd0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002330:	4a10      	ldr	r2, [pc, #64]	; (8002374 <measure_tool+0xd0>)
 8002332:	6013      	str	r3, [r2, #0]
		commands&=~MEASURE_ACTUAL_TOOL_FLAG_COMMAND;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <measure_tool+0xd0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <measure_tool+0xd0>)
 800233e:	6013      	str	r3, [r2, #0]
		timer_speed=SPEED_1;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <measure_tool+0xd4>)
 8002342:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002346:	801a      	strh	r2, [r3, #0]
		commands|=GO_TO_HOME_COMMAND;//move all axis to 0
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <measure_tool+0xd0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	4a08      	ldr	r2, [pc, #32]	; (8002374 <measure_tool+0xd0>)
 8002352:	6013      	str	r3, [r2, #0]
	}

	return;
 8002354:	bf00      	nop
 8002356:	bf00      	nop

}
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20017a18 	.word	0x20017a18
 8002364:	20017a54 	.word	0x20017a54
 8002368:	20017a58 	.word	0x20017a58
 800236c:	20017a5c 	.word	0x20017a5c
 8002370:	000f4240 	.word	0x000f4240
 8002374:	20017a1c 	.word	0x20017a1c
 8002378:	20000004 	.word	0x20000004

0800237c <send_position_message>:

//the number is allways an int32_t, the identifier is 11 bit, means max2048
void send_position_message(uint32_t number_1,uint32_t number_2,uint32_t identifier)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
        int mailbox_nr=0;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
        mailbox_nr=get_mailbox();       //returns number of empty mailboxor at least lowest priority pending mailbox
 800238c:	f000 f84a 	bl	8002424 <get_mailbox>
 8002390:	6178      	str	r0, [r7, #20]

        if(is_mailbox_empty(mailbox_nr)){       //in case of an request for new data this whould be forced
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f000 f85a 	bl	800244c <is_mailbox_empty>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03b      	beq.n	8002416 <send_position_message+0x9a>
                CAN1->sTxMailBox[mailbox_nr].TDTR=(8<<CAN_TDT0R_DLC_Pos); //because its an int32_t... 4 bytes
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <send_position_message+0xa4>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3318      	adds	r3, #24
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	2208      	movs	r2, #8
 80023ac:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TDLR=number_1;
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <send_position_message+0xa4>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TDHR=number_2;
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <send_position_message+0xa4>)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TIR=0;
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <send_position_message+0xa4>)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3318      	adds	r3, #24
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	4413      	add	r3, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TIR|=identifier;
 80023dc:	4a10      	ldr	r2, [pc, #64]	; (8002420 <send_position_message+0xa4>)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3318      	adds	r3, #24
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4413      	add	r3, r2
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	490d      	ldr	r1, [pc, #52]	; (8002420 <send_position_message+0xa4>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3318      	adds	r3, #24
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	440b      	add	r3, r1
 80023f6:	601a      	str	r2, [r3, #0]
                CAN1->sTxMailBox[mailbox_nr].TIR|=CAN_TI0R_TXRQ;        //that means start to transmit the message
 80023f8:	4a09      	ldr	r2, [pc, #36]	; (8002420 <send_position_message+0xa4>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3318      	adds	r3, #24
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4906      	ldr	r1, [pc, #24]	; (8002420 <send_position_message+0xa4>)
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3318      	adds	r3, #24
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	440b      	add	r3, r1
 8002412:	601a      	str	r2, [r3, #0]
        }
        return;
 8002414:	bf00      	nop
 8002416:	bf00      	nop
}
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40006400 	.word	0x40006400

08002424 <get_mailbox>:

static int get_mailbox()
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
        int ret=0;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
        ret=CAN1->TSR&CAN_TSR_CODE;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <get_mailbox+0x24>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002436:	607b      	str	r3, [r7, #4]
        return ret;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40006400 	.word	0x40006400

0800244c <is_mailbox_empty>:

static int is_mailbox_empty(int mailbox_nr)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
        int ret=0;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
        ret=CAN1->TSR&(1<<(CAN_TSR_TME_Pos+mailbox_nr));
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <is_mailbox_empty+0x2c>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	321a      	adds	r2, #26
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
        return ret;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40006400 	.word	0x40006400

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	e7fe      	b.n	8002484 <Error_Handler+0x8>
	...

08002488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_MspInit+0x4c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024c6:	2007      	movs	r0, #7
 80024c8:	f002 fea6 	bl	8005218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_CAN_MspInit+0x94>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d133      	bne.n	8002562 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_CAN_MspInit+0x98>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_CAN_MspInit+0x98>)
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_CAN_MspInit+0x98>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_CAN_MspInit+0x98>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <HAL_CAN_MspInit+0x98>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_CAN_MspInit+0x98>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002532:	2303      	movs	r3, #3
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002542:	2309      	movs	r3, #9
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <HAL_CAN_MspInit+0x9c>)
 800254e:	f002 fea5 	bl	800529c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2014      	movs	r0, #20
 8002558:	f002 fe69 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800255c:	2014      	movs	r0, #20
 800255e:	f002 fe82 	bl	8005266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40006400 	.word	0x40006400
 8002570:	40023800 	.word	0x40023800
 8002574:	40020c00 	.word	0x40020c00

08002578 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d12b      	bne.n	80025f2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_TIM_Encoder_MspInit+0x84>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_TIM_Encoder_MspInit+0x84>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_TIM_Encoder_MspInit+0x84>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_TIM_Encoder_MspInit+0x84>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_TIM_Encoder_MspInit+0x84>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_TIM_Encoder_MspInit+0x84>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80025d2:	2322      	movs	r3, #34	; 0x22
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e2:	2301      	movs	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4804      	ldr	r0, [pc, #16]	; (8002600 <HAL_TIM_Encoder_MspInit+0x88>)
 80025ee:	f002 fe55 	bl	800529c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a46      	ldr	r2, [pc, #280]	; (800272c <HAL_TIM_Base_MspInit+0x128>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d116      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	4b45      	ldr	r3, [pc, #276]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a44      	ldr	r2, [pc, #272]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	201d      	movs	r0, #29
 8002638:	f002 fdf9 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263c:	201d      	movs	r0, #29
 800263e:	f002 fe12 	bl	8005266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002642:	e06e      	b.n	8002722 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_TIM_Base_MspInit+0x130>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d116      	bne.n	800267c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201e      	movs	r0, #30
 8002670:	f002 fddd 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002674:	201e      	movs	r0, #30
 8002676:	f002 fdf6 	bl	8005266 <HAL_NVIC_EnableIRQ>
}
 800267a:	e052      	b.n	8002722 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_TIM_Base_MspInit+0x134>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d116      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2019      	movs	r0, #25
 80026a8:	f002 fdc1 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026ac:	2019      	movs	r0, #25
 80026ae:	f002 fdda 	bl	8005266 <HAL_NVIC_EnableIRQ>
}
 80026b2:	e036      	b.n	8002722 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a20      	ldr	r2, [pc, #128]	; (800273c <HAL_TIM_Base_MspInit+0x138>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d116      	bne.n	80026ec <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 80026c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	201a      	movs	r0, #26
 80026e0:	f002 fda5 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026e4:	201a      	movs	r0, #26
 80026e6:	f002 fdbe 	bl	8005266 <HAL_NVIC_EnableIRQ>
}
 80026ea:	e01a      	b.n	8002722 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM13)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_TIM_Base_MspInit+0x13c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d115      	bne.n	8002722 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_TIM_Base_MspInit+0x12c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	202c      	movs	r0, #44	; 0x2c
 8002718:	f002 fd89 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800271c:	202c      	movs	r0, #44	; 0x2c
 800271e:	f002 fda2 	bl	8005266 <HAL_NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40000400 	.word	0x40000400
 8002730:	40023800 	.word	0x40023800
 8002734:	40000800 	.word	0x40000800
 8002738:	40014400 	.word	0x40014400
 800273c:	40014800 	.word	0x40014800
 8002740:	40001c00 	.word	0x40001c00

08002744 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_TIM_OC_MspInit+0x80>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d116      	bne.n	8002784 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_TIM_OC_MspInit+0x84>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_TIM_OC_MspInit+0x84>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_TIM_OC_MspInit+0x84>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2018      	movs	r0, #24
 8002778:	f002 fd59 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800277c:	2018      	movs	r0, #24
 800277e:	f002 fd72 	bl	8005266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002782:	e01a      	b.n	80027ba <HAL_TIM_OC_MspInit+0x76>
  else if(htim_oc->Instance==TIM12)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_TIM_OC_MspInit+0x88>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d115      	bne.n	80027ba <HAL_TIM_OC_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_TIM_OC_MspInit+0x84>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_TIM_OC_MspInit+0x84>)
 8002798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_TIM_OC_MspInit+0x84>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	202b      	movs	r0, #43	; 0x2b
 80027b0:	f002 fd3d 	bl	800522e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80027b4:	202b      	movs	r0, #43	; 0x2b
 80027b6:	f002 fd56 	bl	8005266 <HAL_NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40001800 	.word	0x40001800

080027d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5b      	ldr	r2, [pc, #364]	; (800295c <HAL_TIM_MspPostInit+0x18c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d11e      	bne.n	8002830 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800280e:	2340      	movs	r3, #64	; 0x40
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800281e:	2302      	movs	r3, #2
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	484e      	ldr	r0, [pc, #312]	; (8002964 <HAL_TIM_MspPostInit+0x194>)
 800282a:	f002 fd37 	bl	800529c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800282e:	e090      	b.n	8002952 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_TIM_MspPostInit+0x198>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11e      	bne.n	8002878 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	4b48      	ldr	r3, [pc, #288]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a47      	ldr	r2, [pc, #284]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002856:	2340      	movs	r3, #64	; 0x40
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002866:	2302      	movs	r3, #2
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	483e      	ldr	r0, [pc, #248]	; (800296c <HAL_TIM_MspPostInit+0x19c>)
 8002872:	f002 fd13 	bl	800529c <HAL_GPIO_Init>
}
 8002876:	e06c      	b.n	8002952 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM9)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <HAL_TIM_MspPostInit+0x1a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11e      	bne.n	80028c0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a35      	ldr	r2, [pc, #212]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800289e:	2320      	movs	r3, #32
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80028ae:	2303      	movs	r3, #3
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	4619      	mov	r1, r3
 80028b8:	482e      	ldr	r0, [pc, #184]	; (8002974 <HAL_TIM_MspPostInit+0x1a4>)
 80028ba:	f002 fcef 	bl	800529c <HAL_GPIO_Init>
}
 80028be:	e048      	b.n	8002952 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM10)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	; (8002978 <HAL_TIM_MspPostInit+0x1a8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d11f      	bne.n	800290a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80028f8:	2303      	movs	r3, #3
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	481a      	ldr	r0, [pc, #104]	; (800296c <HAL_TIM_MspPostInit+0x19c>)
 8002904:	f002 fcca 	bl	800529c <HAL_GPIO_Init>
}
 8002908:	e023      	b.n	8002952 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM11)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_TIM_MspPostInit+0x1ac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d11e      	bne.n	8002952 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_TIM_MspPostInit+0x190>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002942:	2303      	movs	r3, #3
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	4807      	ldr	r0, [pc, #28]	; (800296c <HAL_TIM_MspPostInit+0x19c>)
 800294e:	f002 fca5 	bl	800529c <HAL_GPIO_Init>
}
 8002952:	bf00      	nop
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40000400 	.word	0x40000400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020000 	.word	0x40020000
 8002968:	40000800 	.word	0x40000800
 800296c:	40020400 	.word	0x40020400
 8002970:	40014000 	.word	0x40014000
 8002974:	40021000 	.word	0x40021000
 8002978:	40014400 	.word	0x40014400
 800297c:	40014800 	.word	0x40014800

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <NMI_Handler+0x4>

08002986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <HardFault_Handler+0x4>

0800298c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <MemManage_Handler+0x4>

08002992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <UsageFault_Handler+0x4>

0800299e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029cc:	f001 feb4 	bl	8004738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029d8:	4806      	ldr	r0, [pc, #24]	; (80029f4 <CAN1_RX0_IRQHandler+0x20>)
 80029da:	f002 f913 	bl	8004c04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	/*if(!(CAN1->RF0R&CAN_RF0R_FOVR0))*/			//thats maybe a wast of time... (look for fifo overrun)	//thats good, but thats only for fifo mb0, there is also one more
  get_data();
 80029de:	f000 f883 	bl	8002ae8 <get_data>
	//that should be either in the handler or only here, but not in both...
  CAN1->RF0R|=CAN_RF0R_RFOM0;
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <CAN1_RX0_IRQHandler+0x24>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <CAN1_RX0_IRQHandler+0x24>)
 80029e8:	f043 0320 	orr.w	r3, r3, #32
 80029ec:	60d3      	str	r3, [r2, #12]
		flags|=CAN1_FIFO_OVERRUN; //kriese!!! alarm...
		//for nor clear the interrupt flag
		CAN1->RF0R&=~CAN_RF0R_FOVR0;
		//the stop thing supposed to be here
	}*/
	return;
 80029ee:	bf00      	nop

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000094 	.word	0x20000094
 80029f8:	40006400 	.word	0x40006400

080029fc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002a02:	f003 fc37 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  update_standpoint_x();
 8002a06:	f000 fc19 	bl	800323c <update_standpoint_x>
  check_target_reached_x();
 8002a0a:	f000 fc31 	bl	8003270 <check_target_reached_x>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000194 	.word	0x20000194

08002a18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002a1e:	f003 fc29 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  update_standpoint_y();
 8002a22:	f000 fc47 	bl	80032b4 <update_standpoint_y>
  check_target_reached_y();
 8002a26:	f000 fc5f 	bl	80032e8 <check_target_reached_y>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200001dc 	.word	0x200001dc

08002a34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a38:	4804      	ldr	r0, [pc, #16]	; (8002a4c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002a3a:	f003 fc1b 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  update_standpoint_z();
 8002a3e:	f000 fc75 	bl	800332c <update_standpoint_z>
  check_target_reached_z();
 8002a42:	f000 fc8d 	bl	8003360 <check_target_reached_z>
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000224 	.word	0x20000224

08002a50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a54:	4804      	ldr	r0, [pc, #16]	; (8002a68 <TIM3_IRQHandler+0x18>)
 8002a56:	f003 fc0d 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	update_standpoint_b();
 8002a5a:	f000 fca3 	bl	80033a4 <update_standpoint_b>
  	check_target_reached_b();
 8002a5e:	f000 fcbb 	bl	80033d8 <check_target_reached_b>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000104 	.word	0x20000104

08002a6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <TIM4_IRQHandler+0x18>)
 8002a72:	f003 fbff 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  update_standpoint_c();
 8002a76:	f000 fcd1 	bl	800341c <update_standpoint_c>
  check_target_reached_c();
 8002a7a:	f000 fce9 	bl	8003450 <check_target_reached_c>

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000014c 	.word	0x2000014c

08002a88 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */
	init_timer_stop();
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
	init_compare_disable();
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
	init_interrupt_disable();
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	60d3      	str	r3, [r2, #12]
	init_clear_interrupt();
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <TIM8_BRK_TIM12_IRQHandler+0x40>)
 8002aac:	f003 fbe2 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  check_target_reached_z();
 8002ab0:	f000 fc56 	bl	8003360 <check_target_reached_z>
  //thats that the first move function doesn't start again
  flags_global_mc&=~BUFFER_FULL;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <TIM8_BRK_TIM12_IRQHandler+0x44>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002abc:	4a03      	ldr	r2, [pc, #12]	; (8002acc <TIM8_BRK_TIM12_IRQHandler+0x44>)
 8002abe:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40001800 	.word	0x40001800
 8002ac8:	2000026c 	.word	0x2000026c
 8002acc:	20017a18 	.word	0x20017a18

08002ad0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002ad4:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8002ad6:	f003 fbcd 	bl	8006274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  manual_motor_controll();
 8002ada:	f001 f9f1 	bl	8003ec0 <manual_motor_controll>
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200002b4 	.word	0x200002b4

08002ae8 <get_data>:
/* USER CODE BEGIN 1 */
//if there are not so much options no switch should be used because of performance
//the fifo mailbox[1] has to be included in this routing!!
//and maybe every transmit should be done with the function in main.c
static inline void get_data()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	if((fifo_write_ctr<fifo_read_ctr&&(flags_global_mc&WRITE_CTR_UNDER_READ_CTR)&&(!(flags_global_mc&FIRST_MOVE_IN_PROCESS)))||(fifo_write_ctr>fifo_read_ctr)){
 8002aec:	4bae      	ldr	r3, [pc, #696]	; (8002da8 <get_data+0x2c0>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4bae      	ldr	r3, [pc, #696]	; (8002dac <get_data+0x2c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d20b      	bcs.n	8002b10 <get_data+0x28>
 8002af8:	4bad      	ldr	r3, [pc, #692]	; (8002db0 <get_data+0x2c8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <get_data+0x28>
 8002b04:	4baa      	ldr	r3, [pc, #680]	; (8002db0 <get_data+0x2c8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <get_data+0x36>
 8002b10:	4ba5      	ldr	r3, [pc, #660]	; (8002da8 <get_data+0x2c0>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4ba5      	ldr	r3, [pc, #660]	; (8002dac <get_data+0x2c4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f240 826c 	bls.w	8002ff6 <get_data+0x50e>

		switch(CAN1->sFIFOMailBox->RIR){	//look up identifier of mailbox
 8002b1e:	4ba5      	ldr	r3, [pc, #660]	; (8002db4 <get_data+0x2cc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 6f16 	cmp.w	r3, #157286400	; 0x9600000
 8002b26:	f000 823f 	beq.w	8002fa8 <get_data+0x4c0>
 8002b2a:	f1b3 6f16 	cmp.w	r3, #157286400	; 0x9600000
 8002b2e:	f200 8269 	bhi.w	8003004 <get_data+0x51c>
 8002b32:	f1b3 6f14 	cmp.w	r3, #155189248	; 0x9400000
 8002b36:	f000 81ab 	beq.w	8002e90 <get_data+0x3a8>
 8002b3a:	f1b3 6f14 	cmp.w	r3, #155189248	; 0x9400000
 8002b3e:	f200 8261 	bhi.w	8003004 <get_data+0x51c>
 8002b42:	f1b3 6f12 	cmp.w	r3, #153092096	; 0x9200000
 8002b46:	f000 8196 	beq.w	8002e76 <get_data+0x38e>
 8002b4a:	f1b3 6f12 	cmp.w	r3, #153092096	; 0x9200000
 8002b4e:	f200 8259 	bhi.w	8003004 <get_data+0x51c>
 8002b52:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002b56:	f000 8181 	beq.w	8002e5c <get_data+0x374>
 8002b5a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002b5e:	f200 8251 	bhi.w	8003004 <get_data+0x51c>
 8002b62:	f1b3 6f0e 	cmp.w	r3, #148897792	; 0x8e00000
 8002b66:	f000 816c 	beq.w	8002e42 <get_data+0x35a>
 8002b6a:	f1b3 6f0e 	cmp.w	r3, #148897792	; 0x8e00000
 8002b6e:	f200 8249 	bhi.w	8003004 <get_data+0x51c>
 8002b72:	f1b3 6f08 	cmp.w	r3, #142606336	; 0x8800000
 8002b76:	f000 80bd 	beq.w	8002cf4 <get_data+0x20c>
 8002b7a:	f1b3 6f08 	cmp.w	r3, #142606336	; 0x8800000
 8002b7e:	f200 8241 	bhi.w	8003004 <get_data+0x51c>
 8002b82:	f1b3 6ffc 	cmp.w	r3, #132120576	; 0x7e00000
 8002b86:	f000 814f 	beq.w	8002e28 <get_data+0x340>
 8002b8a:	f1b3 6ffc 	cmp.w	r3, #132120576	; 0x7e00000
 8002b8e:	f200 8239 	bhi.w	8003004 <get_data+0x51c>
 8002b92:	f1b3 6ff8 	cmp.w	r3, #130023424	; 0x7c00000
 8002b96:	f000 813a 	beq.w	8002e0e <get_data+0x326>
 8002b9a:	f1b3 6ff8 	cmp.w	r3, #130023424	; 0x7c00000
 8002b9e:	f200 8231 	bhi.w	8003004 <get_data+0x51c>
 8002ba2:	f1b3 6ff4 	cmp.w	r3, #127926272	; 0x7a00000
 8002ba6:	f000 8125 	beq.w	8002df4 <get_data+0x30c>
 8002baa:	f1b3 6ff4 	cmp.w	r3, #127926272	; 0x7a00000
 8002bae:	f200 8229 	bhi.w	8003004 <get_data+0x51c>
 8002bb2:	f1b3 6ff0 	cmp.w	r3, #125829120	; 0x7800000
 8002bb6:	f000 8110 	beq.w	8002dda <get_data+0x2f2>
 8002bba:	f1b3 6ff0 	cmp.w	r3, #125829120	; 0x7800000
 8002bbe:	f200 8221 	bhi.w	8003004 <get_data+0x51c>
 8002bc2:	f1b3 6fe4 	cmp.w	r3, #119537664	; 0x7200000
 8002bc6:	f000 819b 	beq.w	8002f00 <get_data+0x418>
 8002bca:	f1b3 6fe4 	cmp.w	r3, #119537664	; 0x7200000
 8002bce:	f200 8219 	bhi.w	8003004 <get_data+0x51c>
 8002bd2:	f1b3 6fcc 	cmp.w	r3, #106954752	; 0x6600000
 8002bd6:	f000 8201 	beq.w	8002fdc <get_data+0x4f4>
 8002bda:	f1b3 6fcc 	cmp.w	r3, #106954752	; 0x6600000
 8002bde:	f200 8211 	bhi.w	8003004 <get_data+0x51c>
 8002be2:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
 8002be6:	f000 81ec 	beq.w	8002fc2 <get_data+0x4da>
 8002bea:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
 8002bee:	f200 8209 	bhi.w	8003004 <get_data+0x51c>
 8002bf2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002bf6:	f000 81ca 	beq.w	8002f8e <get_data+0x4a6>
 8002bfa:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002bfe:	f200 8201 	bhi.w	8003004 <get_data+0x51c>
 8002c02:	f1b3 6fa4 	cmp.w	r3, #85983232	; 0x5200000
 8002c06:	f000 81b5 	beq.w	8002f74 <get_data+0x48c>
 8002c0a:	f1b3 6fa4 	cmp.w	r3, #85983232	; 0x5200000
 8002c0e:	f200 81f9 	bhi.w	8003004 <get_data+0x51c>
 8002c12:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
 8002c16:	f000 81a0 	beq.w	8002f5a <get_data+0x472>
 8002c1a:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
 8002c1e:	f200 81f1 	bhi.w	8003004 <get_data+0x51c>
 8002c22:	f1b3 6f84 	cmp.w	r3, #69206016	; 0x4200000
 8002c26:	f000 818b 	beq.w	8002f40 <get_data+0x458>
 8002c2a:	f1b3 6f84 	cmp.w	r3, #69206016	; 0x4200000
 8002c2e:	f200 81e9 	bhi.w	8003004 <get_data+0x51c>
 8002c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c36:	f000 8176 	beq.w	8002f26 <get_data+0x43e>
 8002c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3e:	f200 81e1 	bhi.w	8003004 <get_data+0x51c>
 8002c42:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 8002c46:	f000 814d 	beq.w	8002ee4 <get_data+0x3fc>
 8002c4a:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 8002c4e:	f200 81d9 	bhi.w	8003004 <get_data+0x51c>
 8002c52:	f1b3 7f58 	cmp.w	r3, #56623104	; 0x3600000
 8002c56:	f000 8137 	beq.w	8002ec8 <get_data+0x3e0>
 8002c5a:	f1b3 7f58 	cmp.w	r3, #56623104	; 0x3600000
 8002c5e:	f200 81d1 	bhi.w	8003004 <get_data+0x51c>
 8002c62:	f1b3 7f50 	cmp.w	r3, #54525952	; 0x3400000
 8002c66:	f000 8120 	beq.w	8002eaa <get_data+0x3c2>
 8002c6a:	f1b3 7f50 	cmp.w	r3, #54525952	; 0x3400000
 8002c6e:	f200 81c9 	bhi.w	8003004 <get_data+0x51c>
 8002c72:	f1b3 7f48 	cmp.w	r3, #52428800	; 0x3200000
 8002c76:	f000 80a3 	beq.w	8002dc0 <get_data+0x2d8>
 8002c7a:	f1b3 7f48 	cmp.w	r3, #52428800	; 0x3200000
 8002c7e:	f200 81c1 	bhi.w	8003004 <get_data+0x51c>
 8002c82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c86:	f000 8082 	beq.w	8002d8e <get_data+0x2a6>
 8002c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c8e:	f200 81b9 	bhi.w	8003004 <get_data+0x51c>
 8002c92:	f1b3 7f38 	cmp.w	r3, #48234496	; 0x2e00000
 8002c96:	d06d      	beq.n	8002d74 <get_data+0x28c>
 8002c98:	f1b3 7f38 	cmp.w	r3, #48234496	; 0x2e00000
 8002c9c:	f200 81b2 	bhi.w	8003004 <get_data+0x51c>
 8002ca0:	f1b3 7f30 	cmp.w	r3, #46137344	; 0x2c00000
 8002ca4:	d059      	beq.n	8002d5a <get_data+0x272>
 8002ca6:	f1b3 7f30 	cmp.w	r3, #46137344	; 0x2c00000
 8002caa:	f200 81ab 	bhi.w	8003004 <get_data+0x51c>
 8002cae:	f1b3 7f28 	cmp.w	r3, #44040192	; 0x2a00000
 8002cb2:	d045      	beq.n	8002d40 <get_data+0x258>
 8002cb4:	f1b3 7f28 	cmp.w	r3, #44040192	; 0x2a00000
 8002cb8:	f200 81a4 	bhi.w	8003004 <get_data+0x51c>
 8002cbc:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 8002cc0:	d031      	beq.n	8002d26 <get_data+0x23e>
 8002cc2:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 8002cc6:	f200 819d 	bhi.w	8003004 <get_data+0x51c>
 8002cca:	f1b3 7fd0 	cmp.w	r3, #27262976	; 0x1a00000
 8002cce:	d027      	beq.n	8002d20 <get_data+0x238>
 8002cd0:	f1b3 7fd0 	cmp.w	r3, #27262976	; 0x1a00000
 8002cd4:	f200 8196 	bhi.w	8003004 <get_data+0x51c>
 8002cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cdc:	d01d      	beq.n	8002d1a <get_data+0x232>
 8002cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce2:	f200 818f 	bhi.w	8003004 <get_data+0x51c>
 8002ce6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cea:	d010      	beq.n	8002d0e <get_data+0x226>
 8002cec:	f1b3 7fb0 	cmp.w	r3, #23068672	; 0x1600000
 8002cf0:	d010      	beq.n	8002d14 <get_data+0x22c>
								CAN1->RF0R|=CAN_RF0R_RFOM0;
								return;
			case CAN_ID_MEASURE_ACTUAL_TOOL: commands|=MEASURE_ACTUAL_TOOL_FLAG_COMMAND;
								CAN1->RF0R|=CAN_RF0R_RFOM0;
								return;
			default:				return;
 8002cf2:	e187      	b.n	8003004 <get_data+0x51c>
				CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <get_data+0x2d0>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <get_data+0x2d0>)
 8002cfa:	f043 0320 	orr.w	r3, r3, #32
 8002cfe:	60d3      	str	r3, [r2, #12]
				commands |= RESET_MICROCONTROLLER_COMMAND;
 8002d00:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <get_data+0x2d4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <get_data+0x2d4>)
 8002d0a:	6013      	str	r3, [r2, #0]
				return;
 8002d0c:	e17b      	b.n	8003006 <get_data+0x51e>
			case MC_DATA_PART_1_ID:	handle_mc_data_part_1();
 8002d0e:	f000 f985 	bl	800301c <handle_mc_data_part_1>
									return;
 8002d12:	e178      	b.n	8003006 <get_data+0x51e>
			case MC_DATA_PART_2_ID:	handle_mc_data_part_2();
 8002d14:	f000 f9aa 	bl	800306c <handle_mc_data_part_2>
									return;
 8002d18:	e175      	b.n	8003006 <get_data+0x51e>
									handle_mc_data_part_3();
 8002d1a:	f000 f9d1 	bl	80030c0 <handle_mc_data_part_3>
									return;
 8002d1e:	e172      	b.n	8003006 <get_data+0x51e>
									handle_mc_data_part_4();
 8002d20:	f000 f9f6 	bl	8003110 <handle_mc_data_part_4>
									return;
 8002d24:	e16f      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_X_POS: commands|=MOVE_X_POSITIVE_COMMAND;
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <get_data+0x2d4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f043 0320 	orr.w	r3, r3, #32
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <get_data+0x2d4>)
 8002d30:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <get_data+0x2d0>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <get_data+0x2d0>)
 8002d38:	f043 0320 	orr.w	r3, r3, #32
 8002d3c:	60d3      	str	r3, [r2, #12]
						return;
 8002d3e:	e162      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_X_NEG: commands|=MOVE_X_NEGATIVE_COMMAND;
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <get_data+0x2d4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <get_data+0x2d4>)
 8002d4a:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <get_data+0x2d0>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <get_data+0x2d0>)
 8002d52:	f043 0320 	orr.w	r3, r3, #32
 8002d56:	60d3      	str	r3, [r2, #12]
						return;
 8002d58:	e155      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Y_POS: commands|=MOVE_Y_POSITIVE_COMMAND;
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <get_data+0x2d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <get_data+0x2d4>)
 8002d64:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <get_data+0x2d0>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <get_data+0x2d0>)
 8002d6c:	f043 0320 	orr.w	r3, r3, #32
 8002d70:	60d3      	str	r3, [r2, #12]
						return;
 8002d72:	e148      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Y_NEG: commands|=MOVE_Y_NEGATIVE_COMMAND;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <get_data+0x2d4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <get_data+0x2d4>)
 8002d7e:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <get_data+0x2d0>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <get_data+0x2d0>)
 8002d86:	f043 0320 	orr.w	r3, r3, #32
 8002d8a:	60d3      	str	r3, [r2, #12]
						return;
 8002d8c:	e13b      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Z_POS: commands|=MOVE_Z_POSITIVE_COMMAND;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <get_data+0x2d4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <get_data+0x2d4>)
 8002d98:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <get_data+0x2d0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <get_data+0x2d0>)
 8002da0:	f043 0320 	orr.w	r3, r3, #32
 8002da4:	60d3      	str	r3, [r2, #12]
						return;
 8002da6:	e12e      	b.n	8003006 <get_data+0x51e>
 8002da8:	20017a14 	.word	0x20017a14
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20017a18 	.word	0x20017a18
 8002db4:	400065b0 	.word	0x400065b0
 8002db8:	40006400 	.word	0x40006400
 8002dbc:	20017a1c 	.word	0x20017a1c
			case CAN_ID_MOVE_Z_NEG: commands|=MOVE_Z_NEGATIVE_COMMAND;
 8002dc0:	4b91      	ldr	r3, [pc, #580]	; (8003008 <get_data+0x520>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc8:	4a8f      	ldr	r2, [pc, #572]	; (8003008 <get_data+0x520>)
 8002dca:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002dcc:	4b8f      	ldr	r3, [pc, #572]	; (800300c <get_data+0x524>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a8e      	ldr	r2, [pc, #568]	; (800300c <get_data+0x524>)
 8002dd2:	f043 0320 	orr.w	r3, r3, #32
 8002dd6:	60d3      	str	r3, [r2, #12]
						return;
 8002dd8:	e115      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_B_POS: commands|=MOVE_B_POSITIVE_COMMAND;
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <get_data+0x520>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	4a89      	ldr	r2, [pc, #548]	; (8003008 <get_data+0x520>)
 8002de4:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002de6:	4b89      	ldr	r3, [pc, #548]	; (800300c <get_data+0x524>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a88      	ldr	r2, [pc, #544]	; (800300c <get_data+0x524>)
 8002dec:	f043 0320 	orr.w	r3, r3, #32
 8002df0:	60d3      	str	r3, [r2, #12]
						return;
 8002df2:	e108      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_B_NEG: commands|=MOVE_B_NEGATIVE_COMMAND;
 8002df4:	4b84      	ldr	r3, [pc, #528]	; (8003008 <get_data+0x520>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	4a82      	ldr	r2, [pc, #520]	; (8003008 <get_data+0x520>)
 8002dfe:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e00:	4b82      	ldr	r3, [pc, #520]	; (800300c <get_data+0x524>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a81      	ldr	r2, [pc, #516]	; (800300c <get_data+0x524>)
 8002e06:	f043 0320 	orr.w	r3, r3, #32
 8002e0a:	60d3      	str	r3, [r2, #12]
						return;
 8002e0c:	e0fb      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_C_POS: commands|=MOVE_C_POSITIVE_COMMAND;
 8002e0e:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <get_data+0x520>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e16:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <get_data+0x520>)
 8002e18:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <get_data+0x524>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a7b      	ldr	r2, [pc, #492]	; (800300c <get_data+0x524>)
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	60d3      	str	r3, [r2, #12]
						return;
 8002e26:	e0ee      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_C_NEG: commands|=MOVE_C_NEGATIVE_COMMAND;
 8002e28:	4b77      	ldr	r3, [pc, #476]	; (8003008 <get_data+0x520>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e30:	4a75      	ldr	r2, [pc, #468]	; (8003008 <get_data+0x520>)
 8002e32:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e34:	4b75      	ldr	r3, [pc, #468]	; (800300c <get_data+0x524>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a74      	ldr	r2, [pc, #464]	; (800300c <get_data+0x524>)
 8002e3a:	f043 0320 	orr.w	r3, r3, #32
 8002e3e:	60d3      	str	r3, [r2, #12]
						return;
 8002e40:	e0e1      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Y_LEFT_POS: commands|=MOVE_Y_LEFT_POS_COMMAND;
 8002e42:	4b71      	ldr	r3, [pc, #452]	; (8003008 <get_data+0x520>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4a:	4a6f      	ldr	r2, [pc, #444]	; (8003008 <get_data+0x520>)
 8002e4c:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	; (800300c <get_data+0x524>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a6e      	ldr	r2, [pc, #440]	; (800300c <get_data+0x524>)
 8002e54:	f043 0320 	orr.w	r3, r3, #32
 8002e58:	60d3      	str	r3, [r2, #12]
						return;
 8002e5a:	e0d4      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Y_LEFT_NEG: commands|=MOVE_Y_LEFT_NEG_COMMAND;
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <get_data+0x520>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e64:	4a68      	ldr	r2, [pc, #416]	; (8003008 <get_data+0x520>)
 8002e66:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <get_data+0x524>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a67      	ldr	r2, [pc, #412]	; (800300c <get_data+0x524>)
 8002e6e:	f043 0320 	orr.w	r3, r3, #32
 8002e72:	60d3      	str	r3, [r2, #12]
						return;
 8002e74:	e0c7      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Y_RIGHT_POS: commands|=MOVE_Y_RIGHT_POS_COMMAND;
 8002e76:	4b64      	ldr	r3, [pc, #400]	; (8003008 <get_data+0x520>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e7e:	4a62      	ldr	r2, [pc, #392]	; (8003008 <get_data+0x520>)
 8002e80:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <get_data+0x524>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a61      	ldr	r2, [pc, #388]	; (800300c <get_data+0x524>)
 8002e88:	f043 0320 	orr.w	r3, r3, #32
 8002e8c:	60d3      	str	r3, [r2, #12]
						return;
 8002e8e:	e0ba      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_Y_RIGHT_NEG: commands|=MOVE_Y_RIGHT_NEG_COMMAND;
 8002e90:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <get_data+0x520>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e98:	4a5b      	ldr	r2, [pc, #364]	; (8003008 <get_data+0x520>)
 8002e9a:	6013      	str	r3, [r2, #0]
						CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002e9c:	4b5b      	ldr	r3, [pc, #364]	; (800300c <get_data+0x524>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a5a      	ldr	r2, [pc, #360]	; (800300c <get_data+0x524>)
 8002ea2:	f043 0320 	orr.w	r3, r3, #32
 8002ea6:	60d3      	str	r3, [r2, #12]
						return;
 8002ea8:	e0ad      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_SPEED_1: 	timer_speed=SPEED_1;
 8002eaa:	4b59      	ldr	r3, [pc, #356]	; (8003010 <get_data+0x528>)
 8002eac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002eb0:	801a      	strh	r2, [r3, #0]
										increment=INCREMENT_1;
 8002eb2:	4b58      	ldr	r3, [pc, #352]	; (8003014 <get_data+0x52c>)
 8002eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eb8:	601a      	str	r2, [r3, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <get_data+0x524>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	; (800300c <get_data+0x524>)
 8002ec0:	f043 0320 	orr.w	r3, r3, #32
 8002ec4:	60d3      	str	r3, [r2, #12]
							return;
 8002ec6:	e09e      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_SPEED_2: 	timer_speed=SPEED_2;
 8002ec8:	4b51      	ldr	r3, [pc, #324]	; (8003010 <get_data+0x528>)
 8002eca:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002ece:	801a      	strh	r2, [r3, #0]
										increment=INCREMENT_2;
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <get_data+0x52c>)
 8002ed2:	2264      	movs	r2, #100	; 0x64
 8002ed4:	601a      	str	r2, [r3, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <get_data+0x524>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a4c      	ldr	r2, [pc, #304]	; (800300c <get_data+0x524>)
 8002edc:	f043 0320 	orr.w	r3, r3, #32
 8002ee0:	60d3      	str	r3, [r2, #12]
							return;
 8002ee2:	e090      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MOVE_SPEED_3: 	timer_speed=SPEED_3;
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <get_data+0x528>)
 8002ee6:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002eea:	801a      	strh	r2, [r3, #0]
										increment=INCREMENT_3;
 8002eec:	4b49      	ldr	r3, [pc, #292]	; (8003014 <get_data+0x52c>)
 8002eee:	2214      	movs	r2, #20
 8002ef0:	601a      	str	r2, [r3, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <get_data+0x524>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a45      	ldr	r2, [pc, #276]	; (800300c <get_data+0x524>)
 8002ef8:	f043 0320 	orr.w	r3, r3, #32
 8002efc:	60d3      	str	r3, [r2, #12]
							return;
 8002efe:	e082      	b.n	8003006 <get_data+0x51e>
							if(!(flags_global_mc&PROGRAM_RUNNING))
 8002f00:	4b45      	ldr	r3, [pc, #276]	; (8003018 <get_data+0x530>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <get_data+0x430>
								commands|=START_PROGRAM_COMMAND;
 8002f0c:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <get_data+0x520>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f14:	4a3c      	ldr	r2, [pc, #240]	; (8003008 <get_data+0x520>)
 8002f16:	6013      	str	r3, [r2, #0]
							CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002f18:	4b3c      	ldr	r3, [pc, #240]	; (800300c <get_data+0x524>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a3b      	ldr	r2, [pc, #236]	; (800300c <get_data+0x524>)
 8002f1e:	f043 0320 	orr.w	r3, r3, #32
 8002f22:	60d3      	str	r3, [r2, #12]
							return;
 8002f24:	e06f      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_GET_X_POSITION_REQUEST: 	commands|=X_POSITION_REQUEST_COMMAND;
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <get_data+0x520>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	4a36      	ldr	r2, [pc, #216]	; (8003008 <get_data+0x520>)
 8002f30:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002f32:	4b36      	ldr	r3, [pc, #216]	; (800300c <get_data+0x524>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a35      	ldr	r2, [pc, #212]	; (800300c <get_data+0x524>)
 8002f38:	f043 0320 	orr.w	r3, r3, #32
 8002f3c:	60d3      	str	r3, [r2, #12]
								return;
 8002f3e:	e062      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_GET_Y_POSITION_REQUEST: 	commands|=Y_POSITION_REQUEST_COMMAND;
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <get_data+0x520>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <get_data+0x520>)
 8002f4a:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <get_data+0x524>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a2e      	ldr	r2, [pc, #184]	; (800300c <get_data+0x524>)
 8002f52:	f043 0320 	orr.w	r3, r3, #32
 8002f56:	60d3      	str	r3, [r2, #12]
								return;
 8002f58:	e055      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_GET_Z_POSITION_REQUEST: 	commands|=Z_POSITION_REQUEST_COMMAND;
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <get_data+0x520>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <get_data+0x520>)
 8002f64:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <get_data+0x524>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <get_data+0x524>)
 8002f6c:	f043 0320 	orr.w	r3, r3, #32
 8002f70:	60d3      	str	r3, [r2, #12]
								return;
 8002f72:	e048      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_GO_TO_MACHINE_ZERO:	commands|=GO_TO_HOME_COMMAND;
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <get_data+0x520>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	4a22      	ldr	r2, [pc, #136]	; (8003008 <get_data+0x520>)
 8002f7e:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <get_data+0x524>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a21      	ldr	r2, [pc, #132]	; (800300c <get_data+0x524>)
 8002f86:	f043 0320 	orr.w	r3, r3, #32
 8002f8a:	60d3      	str	r3, [r2, #12]
								return;
 8002f8c:	e03b      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_HOMING_CYCLE:		commands|=HOMING_CYCLE_COMMAND;
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <get_data+0x520>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f043 0310 	orr.w	r3, r3, #16
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <get_data+0x520>)
 8002f98:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <get_data+0x524>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	; (800300c <get_data+0x524>)
 8002fa0:	f043 0320 	orr.w	r3, r3, #32
 8002fa4:	60d3      	str	r3, [r2, #12]
								return;
 8002fa6:	e02e      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_HOMING_CYCLE_SPLIT:	commands|=HOMING_CYCLE_SPLIT_COMMAND;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <get_data+0x520>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	4a15      	ldr	r2, [pc, #84]	; (8003008 <get_data+0x520>)
 8002fb2:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <get_data+0x524>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <get_data+0x524>)
 8002fba:	f043 0320 	orr.w	r3, r3, #32
 8002fbe:	60d3      	str	r3, [r2, #12]
								return;
 8002fc0:	e021      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MEASURE_WCS_TOOL: commands|=MEASURE_WCS_TOOL_FLAG_COMMAND;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <get_data+0x520>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fca:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <get_data+0x520>)
 8002fcc:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <get_data+0x524>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <get_data+0x524>)
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	60d3      	str	r3, [r2, #12]
								return;
 8002fda:	e014      	b.n	8003006 <get_data+0x51e>
			case CAN_ID_MEASURE_ACTUAL_TOOL: commands|=MEASURE_ACTUAL_TOOL_FLAG_COMMAND;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <get_data+0x520>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fe4:	4a08      	ldr	r2, [pc, #32]	; (8003008 <get_data+0x520>)
 8002fe6:	6013      	str	r3, [r2, #0]
								CAN1->RF0R|=CAN_RF0R_RFOM0;
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <get_data+0x524>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <get_data+0x524>)
 8002fee:	f043 0320 	orr.w	r3, r3, #32
 8002ff2:	60d3      	str	r3, [r2, #12]
								return;
 8002ff4:	e007      	b.n	8003006 <get_data+0x51e>
		}
	}
	else{
		//thats impossible allmost
		flags_global_mc|=BUFFER_NOT_EMPTY;
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <get_data+0x530>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ffe:	4a06      	ldr	r2, [pc, #24]	; (8003018 <get_data+0x530>)
 8003000:	6013      	str	r3, [r2, #0]
		//flags|=BUFFER_FULL;
		//put_data_into_emergency_buffer();
	}
	return;
 8003002:	e000      	b.n	8003006 <get_data+0x51e>
			default:				return;
 8003004:	bf00      	nop
}
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20017a1c 	.word	0x20017a1c
 800300c:	40006400 	.word	0x40006400
 8003010:	20000004 	.word	0x20000004
 8003014:	20000008 	.word	0x20000008
 8003018:	20017a18 	.word	0x20017a18

0800301c <handle_mc_data_part_1>:

static inline void handle_mc_data_part_1()
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].x_coordinate=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <handle_mc_data_part_1+0x40>)
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <handle_mc_data_part_1+0x44>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4611      	mov	r1, r2
 800302a:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <handle_mc_data_part_1+0x48>)
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	4413      	add	r3, r2
 8003030:	6019      	str	r1, [r3, #0]
	fifo_buffer[fifo_write_ctr].y_coordinate=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <handle_mc_data_part_1+0x40>)
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <handle_mc_data_part_1+0x44>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4611      	mov	r1, r2
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <handle_mc_data_part_1+0x48>)
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	6019      	str	r1, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <handle_mc_data_part_1+0x4c>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <handle_mc_data_part_1+0x4c>)
 800304c:	f043 0320 	orr.w	r3, r3, #32
 8003050:	60d3      	str	r3, [r2, #12]
	return;
 8003052:	bf00      	nop
}
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	400065b0 	.word	0x400065b0
 8003060:	20017a14 	.word	0x20017a14
 8003064:	20000314 	.word	0x20000314
 8003068:	40006400 	.word	0x40006400

0800306c <handle_mc_data_part_2>:

static inline void handle_mc_data_part_2()
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].z_coordinate=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <handle_mc_data_part_2+0x44>)
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <handle_mc_data_part_2+0x48>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4611      	mov	r1, r2
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <handle_mc_data_part_2+0x4c>)
 800307c:	015b      	lsls	r3, r3, #5
 800307e:	4413      	add	r3, r2
 8003080:	3308      	adds	r3, #8
 8003082:	6019      	str	r1, [r3, #0]
	fifo_buffer[fifo_write_ctr].B_axis=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <handle_mc_data_part_2+0x44>)
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <handle_mc_data_part_2+0x48>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4611      	mov	r1, r2
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <handle_mc_data_part_2+0x4c>)
 8003090:	015b      	lsls	r3, r3, #5
 8003092:	4413      	add	r3, r2
 8003094:	330c      	adds	r3, #12
 8003096:	6019      	str	r1, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <handle_mc_data_part_2+0x50>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a07      	ldr	r2, [pc, #28]	; (80030bc <handle_mc_data_part_2+0x50>)
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	60d3      	str	r3, [r2, #12]
	return;
 80030a4:	bf00      	nop
}
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	400065b0 	.word	0x400065b0
 80030b4:	20017a14 	.word	0x20017a14
 80030b8:	20000314 	.word	0x20000314
 80030bc:	40006400 	.word	0x40006400

080030c0 <handle_mc_data_part_3>:

static inline void handle_mc_data_part_3()
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].C_axis=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <handle_mc_data_part_3+0x40>)
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <handle_mc_data_part_3+0x44>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <handle_mc_data_part_3+0x48>)
 80030d0:	015b      	lsls	r3, r3, #5
 80030d2:	4413      	add	r3, r2
 80030d4:	3310      	adds	r3, #16
 80030d6:	6019      	str	r1, [r3, #0]
	fifo_buffer[fifo_write_ctr].feedrate=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 80030d8:	4a09      	ldr	r2, [pc, #36]	; (8003100 <handle_mc_data_part_3+0x40>)
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <handle_mc_data_part_3+0x44>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68d2      	ldr	r2, [r2, #12]
 80030e0:	4909      	ldr	r1, [pc, #36]	; (8003108 <handle_mc_data_part_3+0x48>)
 80030e2:	015b      	lsls	r3, r3, #5
 80030e4:	440b      	add	r3, r1
 80030e6:	3314      	adds	r3, #20
 80030e8:	601a      	str	r2, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <handle_mc_data_part_3+0x4c>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <handle_mc_data_part_3+0x4c>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	60d3      	str	r3, [r2, #12]
	return;
 80030f6:	bf00      	nop
}
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	400065b0 	.word	0x400065b0
 8003104:	20017a14 	.word	0x20017a14
 8003108:	20000314 	.word	0x20000314
 800310c:	40006400 	.word	0x40006400

08003110 <handle_mc_data_part_4>:

static inline void handle_mc_data_part_4()
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	fifo_buffer[fifo_write_ctr].flags=CAN1->sFIFOMailBox->RDLR;	//read low word of can fifo buffer
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <handle_mc_data_part_4+0xb0>)
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6892      	ldr	r2, [r2, #8]
 800311c:	492a      	ldr	r1, [pc, #168]	; (80031c8 <handle_mc_data_part_4+0xb8>)
 800311e:	015b      	lsls	r3, r3, #5
 8003120:	440b      	add	r3, r1
 8003122:	3318      	adds	r3, #24
 8003124:	601a      	str	r2, [r3, #0]
	fifo_buffer[fifo_write_ctr].gcode_line=CAN1->sFIFOMailBox->RDHR;	//read high word of can fifo buffer
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <handle_mc_data_part_4+0xb0>)
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	4926      	ldr	r1, [pc, #152]	; (80031c8 <handle_mc_data_part_4+0xb8>)
 8003130:	015b      	lsls	r3, r3, #5
 8003132:	440b      	add	r3, r1
 8003134:	331c      	adds	r3, #28
 8003136:	601a      	str	r2, [r3, #0]
	CAN1->RF0R|=CAN_RF0R_RFOM0; 	//acknowlege that message box was empitied;
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <handle_mc_data_part_4+0xbc>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <handle_mc_data_part_4+0xbc>)
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	60d3      	str	r3, [r2, #12]
	if(++fifo_write_ctr>=FIFO_BUFFER_SIZE){
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003152:	4293      	cmp	r3, r2
 8003154:	d914      	bls.n	8003180 <handle_mc_data_part_4+0x70>
		//if(fifo_read_ctr>0){
			fifo_write_ctr=0;
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
			//this has to be cleared when the fifo_read_ctr goes to 0
			flags_global_mc|=WRITE_CTR_UNDER_READ_CTR;
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <handle_mc_data_part_4+0xc0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003164:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <handle_mc_data_part_4+0xc0>)
 8003166:	6013      	str	r3, [r2, #0]
		//}
		//if(fifo_read_ctr == 0)
			//send_position_message(c_data.step_count,n_line_data,MC_DATA_PART_3_ID);
		if(flags_global_mc&FIRST_MOVE){
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <handle_mc_data_part_4+0xc0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <handle_mc_data_part_4+0x70>
			flags_global_mc|=BUFFER_FULL;
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <handle_mc_data_part_4+0xc0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <handle_mc_data_part_4+0xc0>)
 800317e:	6013      	str	r3, [r2, #0]
			//flags&=~FIRST_MOVE;
		}

		//stop_receiving_data();
	}
	if((flags_global_mc&FIRST_MOVE)&&(fifo_write_ctr!=0)){
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <handle_mc_data_part_4+0xc0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d016      	beq.n	80031ba <handle_mc_data_part_4+0xaa>
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d012      	beq.n	80031ba <handle_mc_data_part_4+0xaa>
		if(!(fifo_write_ctr%100)){	//this 100 should be named frame_size
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <handle_mc_data_part_4+0xb4>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <handle_mc_data_part_4+0xc4>)
 800319a:	fba3 1302 	umull	r1, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2164      	movs	r1, #100	; 0x64
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <handle_mc_data_part_4+0xaa>
			request_receiving_data();
 80031ac:	f000 f816 	bl	80031dc <request_receiving_data>
			debug_ctr++;
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <handle_mc_data_part_4+0xc8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <handle_mc_data_part_4+0xc8>)
 80031b8:	6013      	str	r3, [r2, #0]
		}
	}
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	400065b0 	.word	0x400065b0
 80031c4:	20017a14 	.word	0x20017a14
 80031c8:	20000314 	.word	0x20000314
 80031cc:	40006400 	.word	0x40006400
 80031d0:	20017a18 	.word	0x20017a18
 80031d4:	51eb851f 	.word	0x51eb851f
 80031d8:	20017a8c 	.word	0x20017a8c

080031dc <request_receiving_data>:
		}
	}
}

void request_receiving_data()
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
		  	  ;
	  }
	  */


		CAN1->sTxMailBox[0].TDTR=(8<<CAN_TDT0R_DLC_Pos); //because its an int32_t... 4 bytes
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <request_receiving_data+0x54>)
 80031e2:	2208      	movs	r2, #8
 80031e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		CAN1->sTxMailBox[0].TDLR=fifo_write_ctr;
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <request_receiving_data+0x54>)
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <request_receiving_data+0x58>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		CAN1->sTxMailBox[0].TDHR=fifo_read_ctr;
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <request_receiving_data+0x54>)
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <request_receiving_data+0x5c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
		CAN1->sTxMailBox[0].TIR=0;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <request_receiving_data+0x54>)
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		CAN1->sTxMailBox[0].TIR|=CONTINUE_RECEIVING_DATA_IDENTIFIER;
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <request_receiving_data+0x54>)
 8003206:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <request_receiving_data+0x54>)
 800320c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003210:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
		CAN1->sTxMailBox[0].TIR|=CAN_TI0R_TXRQ;        //that means start to transmit the message
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <request_receiving_data+0x54>)
 8003216:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800321a:	4a05      	ldr	r2, [pc, #20]	; (8003230 <request_receiving_data+0x54>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
		CAN1->sTxMailBox[0].TDTR=0;
		CAN1->sTxMailBox[0].TIR=0;
		CAN1->sTxMailBox[0].TIR=CONTINUE_RECEIVING_DATA_IDENTIFIER;
		CAN1->sTxMailBox[0].TIR|=CAN_TI0R_TXRQ;
		*/
	  return;
 8003224:	bf00      	nop
}
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40006400 	.word	0x40006400
 8003234:	20017a14 	.word	0x20017a14
 8003238:	20000000 	.word	0x20000000

0800323c <update_standpoint_x>:

//maybe all the is motordirections could be made a seperate
static inline void update_standpoint_x()
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
		if(X_AXIS_POSITIV)
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <update_standpoint_x+0x2c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <update_standpoint_x+0x18>
			x_standpoint++;
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <update_standpoint_x+0x30>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <update_standpoint_x+0x30>)
 8003250:	6013      	str	r3, [r2, #0]
		else
			x_standpoint--;
		return;
 8003252:	e005      	b.n	8003260 <update_standpoint_x+0x24>
			x_standpoint--;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <update_standpoint_x+0x30>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <update_standpoint_x+0x30>)
 800325c:	6013      	str	r3, [r2, #0]
		return;
 800325e:	bf00      	nop
}
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	20017a24 	.word	0x20017a24
 800326c:	20017a54 	.word	0x20017a54

08003270 <check_target_reached_x>:
static inline void check_target_reached_x()
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
if(x_standpoint==x_target){
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <check_target_reached_x+0x34>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <check_target_reached_x+0x38>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d10f      	bne.n	80032a0 <check_target_reached_x+0x30>
		x_timer_stop();
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <check_target_reached_x+0x3c>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <check_target_reached_x+0x40>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <check_target_reached_x+0x40>)
 8003290:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <check_target_reached_x+0x40>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <check_target_reached_x+0x30>
			prepare_next_move();
 800329a:	f000 f8fb 	bl	8003494 <prepare_next_move>
	}
	return;
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
}
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20017a54 	.word	0x20017a54
 80032a8:	20017a38 	.word	0x20017a38
 80032ac:	40014000 	.word	0x40014000
 80032b0:	20017a20 	.word	0x20017a20

080032b4 <update_standpoint_y>:

static inline void update_standpoint_y()
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
	if(Y_AXIS_POSITIV)
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <update_standpoint_y+0x2c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <update_standpoint_y+0x18>
		y_standpoint++;
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <update_standpoint_y+0x30>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <update_standpoint_y+0x30>)
 80032c8:	6013      	str	r3, [r2, #0]
	else
		y_standpoint--;
	return;
 80032ca:	e005      	b.n	80032d8 <update_standpoint_y+0x24>
		y_standpoint--;
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <update_standpoint_y+0x30>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <update_standpoint_y+0x30>)
 80032d4:	6013      	str	r3, [r2, #0]
	return;
 80032d6:	bf00      	nop
}
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	20017a28 	.word	0x20017a28
 80032e4:	20017a58 	.word	0x20017a58

080032e8 <check_target_reached_y>:
static inline void check_target_reached_y()
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	if(y_standpoint==y_target){
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <check_target_reached_y+0x34>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <check_target_reached_y+0x38>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10f      	bne.n	8003318 <check_target_reached_y+0x30>
		y_timer_stop();
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <check_target_reached_y+0x3c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <check_target_reached_y+0x40>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 0302 	bic.w	r3, r3, #2
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <check_target_reached_y+0x40>)
 8003308:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <check_target_reached_y+0x40>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <check_target_reached_y+0x30>
			prepare_next_move();
 8003312:	f000 f8bf 	bl	8003494 <prepare_next_move>
	}
	return;
 8003316:	bf00      	nop
 8003318:	bf00      	nop
}
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20017a58 	.word	0x20017a58
 8003320:	20017a3c 	.word	0x20017a3c
 8003324:	40014400 	.word	0x40014400
 8003328:	20017a20 	.word	0x20017a20

0800332c <update_standpoint_z>:
static inline void update_standpoint_z()
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
	if(Z_AXIS_POSITIV)
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <update_standpoint_z+0x2c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <update_standpoint_z+0x18>
		z_standpoint++;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <update_standpoint_z+0x30>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <update_standpoint_z+0x30>)
 8003340:	6013      	str	r3, [r2, #0]
	else
		z_standpoint--;
	return;
 8003342:	e005      	b.n	8003350 <update_standpoint_z+0x24>
		z_standpoint--;
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <update_standpoint_z+0x30>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <update_standpoint_z+0x30>)
 800334c:	6013      	str	r3, [r2, #0]
	return;
 800334e:	bf00      	nop
}
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	20017a2c 	.word	0x20017a2c
 800335c:	20017a5c 	.word	0x20017a5c

08003360 <check_target_reached_z>:
static inline void check_target_reached_z()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
	if(z_standpoint==z_target){
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <check_target_reached_z+0x34>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <check_target_reached_z+0x38>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d10f      	bne.n	8003390 <check_target_reached_z+0x30>
			z_timer_stop();
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <check_target_reached_z+0x3c>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <check_target_reached_z+0x40>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <check_target_reached_z+0x40>)
 8003380:	6013      	str	r3, [r2, #0]
			if(ALL_MOTORS_STOPPED)
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <check_target_reached_z+0x40>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <check_target_reached_z+0x30>
				prepare_next_move();
 800338a:	f000 f883 	bl	8003494 <prepare_next_move>
		}
	return;
 800338e:	bf00      	nop
 8003390:	bf00      	nop
}
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20017a5c 	.word	0x20017a5c
 8003398:	20017a40 	.word	0x20017a40
 800339c:	40014800 	.word	0x40014800
 80033a0:	20017a20 	.word	0x20017a20

080033a4 <update_standpoint_b>:
static inline void update_standpoint_b()
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
	if(B_AXIS_POSITIV)
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <update_standpoint_b+0x2c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <update_standpoint_b+0x18>
		b_standpoint++;
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <update_standpoint_b+0x30>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <update_standpoint_b+0x30>)
 80033b8:	6013      	str	r3, [r2, #0]
	else
		b_standpoint--;
	return;
 80033ba:	e005      	b.n	80033c8 <update_standpoint_b+0x24>
		b_standpoint--;
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <update_standpoint_b+0x30>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <update_standpoint_b+0x30>)
 80033c4:	6013      	str	r3, [r2, #0]
	return;
 80033c6:	bf00      	nop
}
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	20017a30 	.word	0x20017a30
 80033d4:	20017a60 	.word	0x20017a60

080033d8 <check_target_reached_b>:

static inline void check_target_reached_b()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	if(b_standpoint==b_target){
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <check_target_reached_b+0x34>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <check_target_reached_b+0x38>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10f      	bne.n	8003408 <check_target_reached_b+0x30>
		b_timer_stop();
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <check_target_reached_b+0x3c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <check_target_reached_b+0x40>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0308 	bic.w	r3, r3, #8
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <check_target_reached_b+0x40>)
 80033f8:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <check_target_reached_b+0x40>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <check_target_reached_b+0x30>
			prepare_next_move();
 8003402:	f000 f847 	bl	8003494 <prepare_next_move>
	}
	return;
 8003406:	bf00      	nop
 8003408:	bf00      	nop
}
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20017a60 	.word	0x20017a60
 8003410:	20017a44 	.word	0x20017a44
 8003414:	40000400 	.word	0x40000400
 8003418:	20017a20 	.word	0x20017a20

0800341c <update_standpoint_c>:
static inline void update_standpoint_c()
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
	if(C_AXIS_POSITIV)
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <update_standpoint_c+0x2c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <update_standpoint_c+0x18>
		c_standpoint++;
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <update_standpoint_c+0x30>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <update_standpoint_c+0x30>)
 8003430:	6013      	str	r3, [r2, #0]
	else
		c_standpoint--;
	return;
 8003432:	e005      	b.n	8003440 <update_standpoint_c+0x24>
		c_standpoint--;
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <update_standpoint_c+0x30>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3b01      	subs	r3, #1
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <update_standpoint_c+0x30>)
 800343c:	6013      	str	r3, [r2, #0]
	return;
 800343e:	bf00      	nop
}
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	20017a34 	.word	0x20017a34
 800344c:	20017a64 	.word	0x20017a64

08003450 <check_target_reached_c>:

static inline void check_target_reached_c()
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
	if(c_standpoint==c_target){
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <check_target_reached_c+0x34>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <check_target_reached_c+0x38>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d10f      	bne.n	8003480 <check_target_reached_c+0x30>
		c_timer_stop();
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <check_target_reached_c+0x3c>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <check_target_reached_c+0x40>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <check_target_reached_c+0x40>)
 8003470:	6013      	str	r3, [r2, #0]
		if(ALL_MOTORS_STOPPED)
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <check_target_reached_c+0x40>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <check_target_reached_c+0x30>
			prepare_next_move();
 800347a:	f000 f80b 	bl	8003494 <prepare_next_move>
	}
	return ;
 800347e:	bf00      	nop
 8003480:	bf00      	nop
}
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20017a64 	.word	0x20017a64
 8003488:	20017a48 	.word	0x20017a48
 800348c:	40000800 	.word	0x40000800
 8003490:	20017a20 	.word	0x20017a20

08003494 <prepare_next_move>:

static inline void prepare_next_move()
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
	beginning:

	fifo_read_ctr++;
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <prepare_next_move+0x104>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <prepare_next_move+0x104>)
 80034a2:	6013      	str	r3, [r2, #0]
	if(fifo_read_ctr>=(FIFO_BUFFER_SIZE-1))
 80034a4:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <prepare_next_move+0x104>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f640 32b6 	movw	r2, #2998	; 0xbb6
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d902      	bls.n	80034b6 <prepare_next_move+0x22>
		fifo_read_ctr=0;
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <prepare_next_move+0x104>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

	//lets delete this, let's see...
	if((!((fifo_write_ctr==0)&&(fifo_read_ctr==0)))&&(!(fifo_read_ctr%100))){ //this shoudl come maybe first
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <prepare_next_move+0x108>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <prepare_next_move+0x32>
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <prepare_next_move+0x104>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <prepare_next_move+0x4e>
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <prepare_next_move+0x104>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <prepare_next_move+0x10c>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2164      	movs	r1, #100	; 0x64
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <prepare_next_move+0x4e>
		//wether the counter is incrementing always only one,
		//if the difference of the previous counter would be bigger than -1,
		//than the process on the computer would know, it missed
		//one or more requests from the computer...
		//
		request_receiving_data();
 80034de:	f7ff fe7d 	bl	80031dc <request_receiving_data>
		//send_position_message(0 ,gcode_line_number,MC_DATA_PART_3_ID);
		//gcode_line_number_temp = gcode_line_number;
	//}

	//send_position_message(fifo_buffer[fifo_read_ctr].mc_data_part_3_HIGH,CAN_ID_GET_X_POSITION_ANSWER); //that was for debugging
	if(fifo_buffer[fifo_read_ctr].flags&(1<<FILE_END_BIT)){
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <prepare_next_move+0x104>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <prepare_next_move+0x110>)
 80034e8:	015b      	lsls	r3, r3, #5
 80034ea:	4413      	add	r3, r2
 80034ec:	3318      	adds	r3, #24
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d016      	beq.n	8003526 <prepare_next_move+0x92>
		send_position_message(0,0,CAN_ID_PROGRAM_FINISHED);
 80034f8:	f04f 62c4 	mov.w	r2, #102760448	; 0x6200000
 80034fc:	2100      	movs	r1, #0
 80034fe:	2000      	movs	r0, #0
 8003500:	f7fe ff3c 	bl	800237c <send_position_message>
		//flags|=PROGRAM_FINISHED;
		for(int i=0;i<1000000;i++) //wait to send the message before reseting the microcontroller
 8003504:	2300      	movs	r3, #0
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	e002      	b.n	8003510 <prepare_next_move+0x7c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3301      	adds	r3, #1
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <prepare_next_move+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	ddf8      	ble.n	800350a <prepare_next_move+0x76>
			;
		commands|=RESET_MICROCONTROLLER_COMMAND;
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <prepare_next_move+0x118>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <prepare_next_move+0x118>)
 8003522:	6013      	str	r3, [r2, #0]
		return;
 8003524:	e035      	b.n	8003592 <prepare_next_move+0xfe>
	}

	if((fifo_read_ctr<fifo_write_ctr)||((fifo_read_ctr>fifo_write_ctr)&&(flags_global_mc&WRITE_CTR_UNDER_READ_CTR))||flags_global_mc&FIRST_MOVE){
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <prepare_next_move+0x104>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <prepare_next_move+0x108>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d311      	bcc.n	8003556 <prepare_next_move+0xc2>
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <prepare_next_move+0x104>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <prepare_next_move+0x108>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d905      	bls.n	800354a <prepare_next_move+0xb6>
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <prepare_next_move+0x11c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <prepare_next_move+0xc2>
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <prepare_next_move+0x11c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <prepare_next_move+0xf0>
		flags_global_mc&=~FIRST_MOVE;
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <prepare_next_move+0x11c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355e:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <prepare_next_move+0x11c>)
 8003560:	6013      	str	r3, [r2, #0]
		save_targets();
 8003562:	f000 fc7d 	bl	8003e60 <save_targets>
		set_targets();
 8003566:	f000 fa99 	bl	8003a9c <set_targets>
		int ret=0;
 800356a:	2300      	movs	r3, #0
 800356c:	603b      	str	r3, [r7, #0]
		ret=set_timer_speeds();//directions included, maybe also motor_start could be included
 800356e:	f000 f821 	bl	80035b4 <set_timer_speeds>
 8003572:	6038      	str	r0, [r7, #0]
		if(ret){
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d000      	beq.n	800357c <prepare_next_move+0xe8>
			goto beginning;
 800357a:	e78e      	b.n	800349a <prepare_next_move+0x6>
		}
		//set_directions();
		start_motors();
 800357c:	f000 fb3a 	bl	8003bf4 <start_motors>
	if((fifo_read_ctr<fifo_write_ctr)||((fifo_read_ctr>fifo_write_ctr)&&(flags_global_mc&WRITE_CTR_UNDER_READ_CTR))||flags_global_mc&FIRST_MOVE){
 8003580:	bf00      	nop
	}
	else{
		flags_global_mc|=BUFFER_NOT_READY;
	}

	return;
 8003582:	e005      	b.n	8003590 <prepare_next_move+0xfc>
		flags_global_mc|=BUFFER_NOT_READY;
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <prepare_next_move+0x11c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <prepare_next_move+0x11c>)
 800358e:	6013      	str	r3, [r2, #0]
	return;
 8003590:	bf00      	nop
}
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000000 	.word	0x20000000
 800359c:	20017a14 	.word	0x20017a14
 80035a0:	51eb851f 	.word	0x51eb851f
 80035a4:	20000314 	.word	0x20000314
 80035a8:	000f423f 	.word	0x000f423f
 80035ac:	20017a1c 	.word	0x20017a1c
 80035b0:	20017a18 	.word	0x20017a18

080035b4 <set_timer_speeds>:
//this has to be done with the floating point unit of the microcontroller!!!
//this is bad because it not only sets timer speeds but also the directions...
//this should be not the task of this function
static int set_timer_speeds()
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08e      	sub	sp, #56	; 0x38
 80035b8:	af00      	add	r7, sp, #0
	int32_t axis_not_starting=0;//if all dont start we have a problem
 80035ba:	2300      	movs	r3, #0
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
	//uint8_t motor_start_pc=((fifo_buffer[fifo_read_ctr].mc_data_part_4_LOW)>>8);
	float speed=fifo_buffer[fifo_read_ctr].feedrate;
 80035be:	4ba5      	ldr	r3, [pc, #660]	; (8003854 <set_timer_speeds+0x2a0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4aa5      	ldr	r2, [pc, #660]	; (8003858 <set_timer_speeds+0x2a4>)
 80035c4:	015b      	lsls	r3, r3, #5
 80035c6:	4413      	add	r3, r2
 80035c8:	3314      	adds	r3, #20
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d4:	edc7 7a06 	vstr	s15, [r7, #24]
	float x_line=0;
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
	float y_line=0;
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	float z_line=0;
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
	//if(motor_start_pc&(1<<0))
	x_line=(float)(((float)x_target)-((float)x_standpoint_previous));
 80035ea:	4b9c      	ldr	r3, [pc, #624]	; (800385c <set_timer_speeds+0x2a8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f6:	4b9a      	ldr	r3, [pc, #616]	; (8003860 <set_timer_speeds+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003606:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	//if(motor_start_pc&(1<<1))
	y_line=(float)(((float)y_target)-((float)y_standpoint_previous));
 800360a:	4b96      	ldr	r3, [pc, #600]	; (8003864 <set_timer_speeds+0x2b0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003616:	4b94      	ldr	r3, [pc, #592]	; (8003868 <set_timer_speeds+0x2b4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003626:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	//if(motor_start_pc&(1<<2))
	z_line=(float)(((float)z_target)-((float)z_standpoint_previous));
 800362a:	4b90      	ldr	r3, [pc, #576]	; (800386c <set_timer_speeds+0x2b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003636:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <set_timer_speeds+0x2bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003646:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float real_line=sqrt((x_line*x_line)+(y_line*y_line)+(z_line*z_line));
 800364a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800364e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003652:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003656:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800365a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800365e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003662:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	ee17 0a90 	vmov	r0, s15
 800366e:	f7fc ff0f 	bl	8000490 <__aeabi_f2d>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	ec43 2b10 	vmov	d0, r2, r3
 800367a:	f003 fc2b 	bl	8006ed4 <sqrt>
 800367e:	ec53 2b10 	vmov	r2, r3, d0
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	f7fd fa0b 	bl	8000aa0 <__aeabi_d2f>
 800368a:	4603      	mov	r3, r0
 800368c:	617b      	str	r3, [r7, #20]


	motor_start=0;
 800368e:	4b79      	ldr	r3, [pc, #484]	; (8003874 <set_timer_speeds+0x2c0>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

	motor_b_direction=0;
 8003694:	4b78      	ldr	r3, [pc, #480]	; (8003878 <set_timer_speeds+0x2c4>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
	motor_c_direction=0;
 800369a:	4b78      	ldr	r3, [pc, #480]	; (800387c <set_timer_speeds+0x2c8>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

	if(real_line==0){
 80036a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	d155      	bne.n	800375a <set_timer_speeds+0x1a6>
		//if(b_target > 0)
			//b_target -= 6400;
		//if(c_target > 0)
			//c_target -= 6400;
		int b_move=b_target-b_standpoint_previous;
 80036ae:	4b74      	ldr	r3, [pc, #464]	; (8003880 <set_timer_speeds+0x2cc>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b74      	ldr	r3, [pc, #464]	; (8003884 <set_timer_speeds+0x2d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	607b      	str	r3, [r7, #4]
		int c_move=c_target-c_standpoint_previous;
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <set_timer_speeds+0x2d4>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b73      	ldr	r3, [pc, #460]	; (800388c <set_timer_speeds+0x2d8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	603b      	str	r3, [r7, #0]
		if(b_move||c_move){
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <set_timer_speeds+0x11e>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d041      	beq.n	8003756 <set_timer_speeds+0x1a2>
			if(b_move){
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <set_timer_speeds+0x150>
				motor_start|=B_START;
 80036d8:	4b66      	ldr	r3, [pc, #408]	; (8003874 <set_timer_speeds+0x2c0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	4a64      	ldr	r2, [pc, #400]	; (8003874 <set_timer_speeds+0x2c0>)
 80036e2:	6013      	str	r3, [r2, #0]
				if(b_move<0)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da03      	bge.n	80036f2 <set_timer_speeds+0x13e>
					SET_B_AXIS_NEGATIVE_DIRECTION();
 80036ea:	4b69      	ldr	r3, [pc, #420]	; (8003890 <set_timer_speeds+0x2dc>)
 80036ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036f0:	619a      	str	r2, [r3, #24]
				if(b_move>0){
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dd05      	ble.n	8003704 <set_timer_speeds+0x150>
					SET_B_AXIS_POSITIVE_DIRECTION();
 80036f8:	4b65      	ldr	r3, [pc, #404]	; (8003890 <set_timer_speeds+0x2dc>)
 80036fa:	2208      	movs	r2, #8
 80036fc:	619a      	str	r2, [r3, #24]
					motor_b_direction=1;
 80036fe:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <set_timer_speeds+0x2c4>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
				}
			}
			if(c_move){
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d015      	beq.n	8003736 <set_timer_speeds+0x182>
				motor_start|=C_START;
 800370a:	4b5a      	ldr	r3, [pc, #360]	; (8003874 <set_timer_speeds+0x2c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f043 0310 	orr.w	r3, r3, #16
 8003712:	4a58      	ldr	r2, [pc, #352]	; (8003874 <set_timer_speeds+0x2c0>)
 8003714:	6013      	str	r3, [r2, #0]
				if(c_move<0)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	da03      	bge.n	8003724 <set_timer_speeds+0x170>
					SET_C_AXIS_NEGATIVE_DIRECTION();
 800371c:	4b5c      	ldr	r3, [pc, #368]	; (8003890 <set_timer_speeds+0x2dc>)
 800371e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003722:	619a      	str	r2, [r3, #24]
				if(c_move>0){
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	dd05      	ble.n	8003736 <set_timer_speeds+0x182>
					SET_C_AXIS_POSITIVE_DIRECTION();
 800372a:	4b59      	ldr	r3, [pc, #356]	; (8003890 <set_timer_speeds+0x2dc>)
 800372c:	2210      	movs	r2, #16
 800372e:	619a      	str	r2, [r3, #24]
					motor_c_direction=1;
 8003730:	4b52      	ldr	r3, [pc, #328]	; (800387c <set_timer_speeds+0x2c8>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]
				}
			}
			TIM3->ARR=65000;//just determine a slow speed
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <set_timer_speeds+0x2e0>)
 8003738:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->PSC=4;
 800373e:	4b55      	ldr	r3, [pc, #340]	; (8003894 <set_timer_speeds+0x2e0>)
 8003740:	2204      	movs	r2, #4
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
			TIM4->ARR=65000;
 8003744:	4b54      	ldr	r3, [pc, #336]	; (8003898 <set_timer_speeds+0x2e4>)
 8003746:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC=4;
 800374c:	4b52      	ldr	r3, [pc, #328]	; (8003898 <set_timer_speeds+0x2e4>)
 800374e:	2204      	movs	r2, #4
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
			return 0;
 8003752:	2300      	movs	r3, #0
 8003754:	e18d      	b.n	8003a72 <set_timer_speeds+0x4be>
		}
		return 1;
 8003756:	2301      	movs	r3, #1
 8003758:	e18b      	b.n	8003a72 <set_timer_speeds+0x4be>
	}

	float x_ratio=0;
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
	float y_ratio=0;
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
	float z_ratio=0;
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
	motor_x_direction=0;
 800376c:	4b4b      	ldr	r3, [pc, #300]	; (800389c <set_timer_speeds+0x2e8>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
	motor_y_direction=0;
 8003772:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <set_timer_speeds+0x2ec>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
	motor_z_direction=0;
 8003778:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <set_timer_speeds+0x2f0>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
	//there has to be a solution for if no motor starts!
	if(x_line){
 800377e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003782:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	d033      	beq.n	80037f4 <set_timer_speeds+0x240>
		if(x_line<0){
 800378c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d50a      	bpl.n	80037b0 <set_timer_speeds+0x1fc>
			SET_X_AXIS_NEGATIVE_DIRECTION();
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <set_timer_speeds+0x2dc>)
 800379c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037a0:	619a      	str	r2, [r3, #24]
			x_line*=-1;
 80037a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80037a6:	eef1 7a67 	vneg.f32	s15, s15
 80037aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80037ae:	e005      	b.n	80037bc <set_timer_speeds+0x208>
		}
		else{
			SET_X_AXIS_POSITIVE_DIRECTION();
 80037b0:	4b37      	ldr	r3, [pc, #220]	; (8003890 <set_timer_speeds+0x2dc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	619a      	str	r2, [r3, #24]
			motor_x_direction=1;
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <set_timer_speeds+0x2e8>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
		}
		if(x_line>1.0){//could be also >=1.0
 80037bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80037c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037cc:	dd06      	ble.n	80037dc <set_timer_speeds+0x228>
			//if(motor_start_pc&(1<<0)){
				motor_start|=X_START;
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <set_timer_speeds+0x2c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	4a27      	ldr	r2, [pc, #156]	; (8003874 <set_timer_speeds+0x2c0>)
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e003      	b.n	80037e4 <set_timer_speeds+0x230>
			//}
		}
		else
			axis_not_starting|=(1<<0);
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34

		x_ratio=real_line/x_line;
 80037e4:	edd7 6a05 	vldr	s13, [r7, #20]
 80037e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80037ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	if(y_line){
 80037f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	d05e      	beq.n	80038c0 <set_timer_speeds+0x30c>
		//motor_start|=Y_START; //whats that???!!!
		if(y_line<0){
 8003802:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	d509      	bpl.n	8003824 <set_timer_speeds+0x270>
			SET_Y_AXIS_NEGATIVE_DIRECTION();
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <set_timer_speeds+0x2dc>)
 8003812:	2202      	movs	r2, #2
 8003814:	619a      	str	r2, [r3, #24]
			y_line*=-1;
 8003816:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800381a:	eef1 7a67 	vneg.f32	s15, s15
 800381e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8003822:	e006      	b.n	8003832 <set_timer_speeds+0x27e>
		}
		else{
			SET_Y_AXIS_POSITIVE_DIRECTION();
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <set_timer_speeds+0x2dc>)
 8003826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382a:	619a      	str	r2, [r3, #24]
			motor_y_direction=1;
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <set_timer_speeds+0x2ec>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
		}
		if(y_line>1.0){
 8003832:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	dd31      	ble.n	80038a8 <set_timer_speeds+0x2f4>
			//if(motor_start_pc&(1<<1)){
				motor_start|=Y_START;
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <set_timer_speeds+0x2c0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <set_timer_speeds+0x2c0>)
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e02e      	b.n	80038b0 <set_timer_speeds+0x2fc>
 8003852:	bf00      	nop
 8003854:	20000000 	.word	0x20000000
 8003858:	20000314 	.word	0x20000314
 800385c:	20017a38 	.word	0x20017a38
 8003860:	20017a74 	.word	0x20017a74
 8003864:	20017a3c 	.word	0x20017a3c
 8003868:	20017a78 	.word	0x20017a78
 800386c:	20017a40 	.word	0x20017a40
 8003870:	20017a7c 	.word	0x20017a7c
 8003874:	20017a88 	.word	0x20017a88
 8003878:	20017a30 	.word	0x20017a30
 800387c:	20017a34 	.word	0x20017a34
 8003880:	20017a44 	.word	0x20017a44
 8003884:	20017a80 	.word	0x20017a80
 8003888:	20017a48 	.word	0x20017a48
 800388c:	20017a84 	.word	0x20017a84
 8003890:	40021000 	.word	0x40021000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	20017a24 	.word	0x20017a24
 80038a0:	20017a28 	.word	0x20017a28
 80038a4:	20017a2c 	.word	0x20017a2c
			//}
		}
		else
			axis_not_starting|=(1<<1);
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34

		y_ratio=real_line/y_line;
 80038b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80038b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80038b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038bc:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	if(z_line){
 80038c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	d033      	beq.n	8003936 <set_timer_speeds+0x382>
		//motor_start|=Z_START; //whats that??????!!!!!
		if(z_line<0){
 80038ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d50a      	bpl.n	80038f2 <set_timer_speeds+0x33e>
			SET_Z_AXIS_NEGATIVE_DIRECTION();
 80038dc:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <set_timer_speeds+0x4c8>)
 80038de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80038e2:	619a      	str	r2, [r3, #24]
			z_line*=-1;
 80038e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80038e8:	eef1 7a67 	vneg.f32	s15, s15
 80038ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80038f0:	e005      	b.n	80038fe <set_timer_speeds+0x34a>
		}
		else{
			SET_Z_AXIS_POSITIVE_DIRECTION();
 80038f2:	4b62      	ldr	r3, [pc, #392]	; (8003a7c <set_timer_speeds+0x4c8>)
 80038f4:	2204      	movs	r2, #4
 80038f6:	619a      	str	r2, [r3, #24]
			motor_z_direction=1;
 80038f8:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <set_timer_speeds+0x4cc>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
		}
		if(z_line>1.0){
 80038fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	dd06      	ble.n	800391e <set_timer_speeds+0x36a>
			//if(motor_start_pc&(1<<2)){
				motor_start|=Z_START;
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <set_timer_speeds+0x4d0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <set_timer_speeds+0x4d0>)
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e003      	b.n	8003926 <set_timer_speeds+0x372>
			//}
		}
		else
			axis_not_starting|=(1<<2);
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	637b      	str	r3, [r7, #52]	; 0x34

		z_ratio=real_line/z_line;
 8003926:	edd7 6a05 	vldr	s13, [r7, #20]
 800392a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800392e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003932:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if(axis_not_starting==7){
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	2b07      	cmp	r3, #7
 800393a:	d104      	bne.n	8003946 <set_timer_speeds+0x392>
		motor_start=0;//now we got a problem
 800393c:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <set_timer_speeds+0x4d0>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
		return 1;
 8003942:	2301      	movs	r3, #1
 8003944:	e095      	b.n	8003a72 <set_timer_speeds+0x4be>
		motor_start&=~Z_START;
		flags&=~FIRST_MOVE_NO_Z;
	}
	*/

	if(x_line > 1000 || y_line > 1000)
 8003946:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800394a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003a88 <set_timer_speeds+0x4d4>
 800394e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	dc08      	bgt.n	800396a <set_timer_speeds+0x3b6>
 8003958:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800395c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003a88 <set_timer_speeds+0x4d4>
 8003960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	dd01      	ble.n	800396e <set_timer_speeds+0x3ba>
		wait();
 800396a:	f000 fe45 	bl	80045f8 <wait>


	float x_speed=speed*x_ratio;
 800396e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003972:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a04 	vstr	s15, [r7, #16]
	float y_speed=speed*y_ratio;
 800397e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003982:	edd7 7a08 	vldr	s15, [r7, #32]
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	edc7 7a03 	vstr	s15, [r7, #12]
	float z_speed=speed*z_ratio;
 800398e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003992:	edd7 7a07 	vldr	s15, [r7, #28]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a02 	vstr	s15, [r7, #8]
	if(x_speed<65535){
 800399e:	edd7 7a04 	vldr	s15, [r7, #16]
 80039a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003a8c <set_timer_speeds+0x4d8>
 80039a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ae:	d50b      	bpl.n	80039c8 <set_timer_speeds+0x414>
		TIM9->ARR=x_speed;
 80039b0:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <set_timer_speeds+0x4dc>)
 80039b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ba:	ee17 2a90 	vmov	r2, s15
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM9->PSC=0;
 80039c0:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <set_timer_speeds+0x4dc>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
 80039c6:	e00d      	b.n	80039e4 <set_timer_speeds+0x430>
	}
	else if(x_line > 1)
 80039c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80039cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	dd04      	ble.n	80039e4 <set_timer_speeds+0x430>
		calc_prescaler(x_speed,9);
 80039da:	2009      	movs	r0, #9
 80039dc:	ed97 0a04 	vldr	s0, [r7, #16]
 80039e0:	f000 f8a8 	bl	8003b34 <calc_prescaler>

	if(y_speed<65535){
 80039e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003a8c <set_timer_speeds+0x4d8>
 80039ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d50b      	bpl.n	8003a0e <set_timer_speeds+0x45a>
		TIM10->ARR=y_speed;
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <set_timer_speeds+0x4e0>)
 80039f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a00:	ee17 2a90 	vmov	r2, s15
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM10->PSC=0;
 8003a06:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <set_timer_speeds+0x4e0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a0c:	e00d      	b.n	8003a2a <set_timer_speeds+0x476>
	}
	else if(y_line > 1)
 8003a0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	dd04      	ble.n	8003a2a <set_timer_speeds+0x476>
		calc_prescaler(y_speed,10);
 8003a20:	200a      	movs	r0, #10
 8003a22:	ed97 0a03 	vldr	s0, [r7, #12]
 8003a26:	f000 f885 	bl	8003b34 <calc_prescaler>

	if(z_speed<65535){
 8003a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a2e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003a8c <set_timer_speeds+0x4d8>
 8003a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3a:	d50b      	bpl.n	8003a54 <set_timer_speeds+0x4a0>
		TIM11->ARR=z_speed;
 8003a3c:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <set_timer_speeds+0x4e4>)
 8003a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a46:	ee17 2a90 	vmov	r2, s15
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM11->PSC=0;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <set_timer_speeds+0x4e4>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	629a      	str	r2, [r3, #40]	; 0x28
 8003a52:	e00d      	b.n	8003a70 <set_timer_speeds+0x4bc>
	}
	else if(z_line > 1)
 8003a54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a64:	dd04      	ble.n	8003a70 <set_timer_speeds+0x4bc>
		calc_prescaler(z_speed,11);
 8003a66:	200b      	movs	r0, #11
 8003a68:	ed97 0a02 	vldr	s0, [r7, #8]
 8003a6c:	f000 f862 	bl	8003b34 <calc_prescaler>
	send_position_message(x_line, y_line,CAN_ID_TIMER_SPEED_2);
	for(int i = 0; i < 10000; i++)
		wait();
*/

	return 0;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3738      	adds	r7, #56	; 0x38
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	20017a2c 	.word	0x20017a2c
 8003a84:	20017a88 	.word	0x20017a88
 8003a88:	447a0000 	.word	0x447a0000
 8003a8c:	477fff00 	.word	0x477fff00
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800

08003a9c <set_targets>:

static inline void set_targets()
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
	x_target=fifo_buffer[fifo_read_ctr].x_coordinate;
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <set_targets+0x78>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <set_targets+0x7c>)
 8003aa6:	015b      	lsls	r3, r3, #5
 8003aa8:	4413      	add	r3, r2
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <set_targets+0x80>)
 8003aae:	6013      	str	r3, [r2, #0]
	y_target=fifo_buffer[fifo_read_ctr].y_coordinate;
 8003ab0:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <set_targets+0x78>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <set_targets+0x7c>)
 8003ab6:	015b      	lsls	r3, r3, #5
 8003ab8:	4413      	add	r3, r2
 8003aba:	3304      	adds	r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <set_targets+0x84>)
 8003ac0:	6013      	str	r3, [r2, #0]
	z_target=fifo_buffer[fifo_read_ctr].z_coordinate;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <set_targets+0x78>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <set_targets+0x7c>)
 8003ac8:	015b      	lsls	r3, r3, #5
 8003aca:	4413      	add	r3, r2
 8003acc:	3308      	adds	r3, #8
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <set_targets+0x88>)
 8003ad2:	6013      	str	r3, [r2, #0]
	b_target=fifo_buffer[fifo_read_ctr].B_axis;
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <set_targets+0x78>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <set_targets+0x7c>)
 8003ada:	015b      	lsls	r3, r3, #5
 8003adc:	4413      	add	r3, r2
 8003ade:	330c      	adds	r3, #12
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <set_targets+0x8c>)
 8003ae4:	6013      	str	r3, [r2, #0]
	c_target=fifo_buffer[fifo_read_ctr].C_axis;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <set_targets+0x78>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <set_targets+0x7c>)
 8003aec:	015b      	lsls	r3, r3, #5
 8003aee:	4413      	add	r3, r2
 8003af0:	3310      	adds	r3, #16
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <set_targets+0x90>)
 8003af6:	6013      	str	r3, [r2, #0]
	gcode_line_number=fifo_buffer[fifo_read_ctr].gcode_line;
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <set_targets+0x78>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <set_targets+0x7c>)
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	4413      	add	r3, r2
 8003b02:	331c      	adds	r3, #28
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <set_targets+0x94>)
 8003b08:	6013      	str	r3, [r2, #0]

	return;
 8003b0a:	bf00      	nop
}
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	20000000 	.word	0x20000000
 8003b18:	20000314 	.word	0x20000314
 8003b1c:	20017a38 	.word	0x20017a38
 8003b20:	20017a3c 	.word	0x20017a3c
 8003b24:	20017a40 	.word	0x20017a40
 8003b28:	20017a44 	.word	0x20017a44
 8003b2c:	20017a48 	.word	0x20017a48
 8003b30:	20017a70 	.word	0x20017a70

08003b34 <calc_prescaler>:

static void calc_prescaler(float frequency,int timer)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b3e:	6038      	str	r0, [r7, #0]
	float divisor=frequency/65535.0;
 8003b40:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b44:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003be4 <calc_prescaler+0xb0>
 8003b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b4c:	edc7 7a05 	vstr	s15, [r7, #20]
	divisor+=1;
 8003b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b5c:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t prescaler=(uint16_t)divisor;
 8003b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b68:	ee17 3a90 	vmov	r3, s15
 8003b6c:	827b      	strh	r3, [r7, #18]
	//prescaler*=1000;//experiment for debugging
	float timer_value=frequency/prescaler;
 8003b6e:	8a7b      	ldrh	r3, [r7, #18]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b78:	edd7 6a01 	vldr	s13, [r7, #4]
 8003b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b80:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t timer_value_int=(int16_t)timer_value;
 8003b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b8c:	ee17 3a90 	vmov	r3, s15
 8003b90:	b21b      	sxth	r3, r3
 8003b92:	817b      	strh	r3, [r7, #10]
	if(timer==9){
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b09      	cmp	r3, #9
 8003b98:	d107      	bne.n	8003baa <calc_prescaler+0x76>
		TIM9->PSC=prescaler - 1;
 8003b9a:	8a7b      	ldrh	r3, [r7, #18]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <calc_prescaler+0xb4>)
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28
		TIM9->ARR=timer_value_int;
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <calc_prescaler+0xb4>)
 8003ba4:	897b      	ldrh	r3, [r7, #10]
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
	else if(timer==11){
			TIM11->PSC=prescaler - 1;
			TIM11->ARR=timer_value_int;
		}
	return;
 8003ba8:	e015      	b.n	8003bd6 <calc_prescaler+0xa2>
	else if(timer==10){
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b0a      	cmp	r3, #10
 8003bae:	d107      	bne.n	8003bc0 <calc_prescaler+0x8c>
		TIM10->PSC=prescaler - 1;
 8003bb0:	8a7b      	ldrh	r3, [r7, #18]
 8003bb2:	1e5a      	subs	r2, r3, #1
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <calc_prescaler+0xb8>)
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
		TIM10->ARR=timer_value_int;
 8003bb8:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <calc_prescaler+0xb8>)
 8003bba:	897b      	ldrh	r3, [r7, #10]
 8003bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
	return;
 8003bbe:	e00a      	b.n	8003bd6 <calc_prescaler+0xa2>
	else if(timer==11){
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b0b      	cmp	r3, #11
 8003bc4:	d107      	bne.n	8003bd6 <calc_prescaler+0xa2>
			TIM11->PSC=prescaler - 1;
 8003bc6:	8a7b      	ldrh	r3, [r7, #18]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <calc_prescaler+0xbc>)
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
			TIM11->ARR=timer_value_int;
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <calc_prescaler+0xbc>)
 8003bd0:	897b      	ldrh	r3, [r7, #10]
 8003bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
	return;
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
}
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	477fff00 	.word	0x477fff00
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <start_motors>:
	return;
}
*/

static inline void start_motors()
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	TIM9->CNT = 0;
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <start_motors+0xa4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24
	TIM10->CNT = 0;
 8003bfe:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <start_motors+0xa8>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
	TIM11->CNT = 0;
 8003c04:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <start_motors+0xac>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
	switch(motor_start){
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <start_motors+0xb0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	2b0f      	cmp	r3, #15
 8003c12:	d83f      	bhi.n	8003c94 <start_motors+0xa0>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <start_motors+0x28>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c81 	.word	0x08003c81
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003c63 	.word	0x08003c63
 8003c28:	08003c7b 	.word	0x08003c7b
 8003c2c:	08003c69 	.word	0x08003c69
 8003c30:	08003c6f 	.word	0x08003c6f
 8003c34:	08003c5d 	.word	0x08003c5d
 8003c38:	08003c87 	.word	0x08003c87
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003c95 	.word	0x08003c95
 8003c4c:	08003c95 	.word	0x08003c95
 8003c50:	08003c95 	.word	0x08003c95
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c8d 	.word	0x08003c8d
	 	 case 0b00000111:        xyz_axis_start();break;
 8003c5c:	f000 f8b4 	bl	8003dc8 <xyz_axis_start>
 8003c60:	e017      	b.n	8003c92 <start_motors+0x9e>

	 	 case 0b00000011:        xy_axis_start();break;
 8003c62:	f000 f85d 	bl	8003d20 <xy_axis_start>
 8003c66:	e014      	b.n	8003c92 <start_motors+0x9e>

	 	 case 0b00000101:        xz_axis_start();break;
 8003c68:	f000 f876 	bl	8003d58 <xz_axis_start>
 8003c6c:	e011      	b.n	8003c92 <start_motors+0x9e>

	 	 case 0b00000110:        yz_axis_start();break;
 8003c6e:	f000 f88f 	bl	8003d90 <yz_axis_start>
 8003c72:	e00e      	b.n	8003c92 <start_motors+0x9e>

	     case 0b00000010:        y_axis_start();break;
 8003c74:	f000 f82c 	bl	8003cd0 <y_axis_start>
 8003c78:	e00b      	b.n	8003c92 <start_motors+0x9e>

	     case 0b00000100:        z_axis_start();break;
 8003c7a:	f000 f83d 	bl	8003cf8 <z_axis_start>
 8003c7e:	e008      	b.n	8003c92 <start_motors+0x9e>

	     case 0b00000001:        x_axis_start();break;
 8003c80:	f000 f812 	bl	8003ca8 <x_axis_start>
 8003c84:	e005      	b.n	8003c92 <start_motors+0x9e>

	     case 0b00001000:		 b_axis_start();break;
 8003c86:	f000 f8c3 	bl	8003e10 <b_axis_start>
 8003c8a:	e002      	b.n	8003c92 <start_motors+0x9e>

	     case 0b00010000:		 c_axis_start();break;
 8003c8c:	f000 f8d4 	bl	8003e38 <c_axis_start>
 8003c90:	bf00      	nop
	}
	return;
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
}
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800
 8003ca4:	20017a88 	.word	0x20017a88

08003ca8 <x_axis_start>:

static inline void x_axis_start(void){
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <x_axis_start+0x20>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <x_axis_start+0x20>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000001;
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <x_axis_start+0x24>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	20017a20 	.word	0x20017a20

08003cd0 <y_axis_start>:
static inline void y_axis_start(void){
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
        y_compare_enable();
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <y_axis_start+0x20>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	621a      	str	r2, [r3, #32]
        y_timer_start();
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <y_axis_start+0x20>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000010;
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <y_axis_start+0x24>)
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40014400 	.word	0x40014400
 8003cf4:	20017a20 	.word	0x20017a20

08003cf8 <z_axis_start>:
static inline void z_axis_start(void){
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
        z_compare_enable();
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <z_axis_start+0x20>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	621a      	str	r2, [r3, #32]
        z_timer_start();
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <z_axis_start+0x20>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000100;
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <z_axis_start+0x24>)
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	20017a20 	.word	0x20017a20

08003d20 <xy_axis_start>:
static inline void xy_axis_start(void){
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <xy_axis_start+0x2c>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	621a      	str	r2, [r3, #32]
        y_compare_enable();
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <xy_axis_start+0x30>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <xy_axis_start+0x2c>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
        y_timer_start();
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <xy_axis_start+0x30>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000011;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <xy_axis_start+0x34>)
 8003d3e:	2203      	movs	r2, #3
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	20017a20 	.word	0x20017a20

08003d58 <xz_axis_start>:
static inline void xz_axis_start(void){
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <xz_axis_start+0x2c>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	621a      	str	r2, [r3, #32]
        z_compare_enable();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <xz_axis_start+0x30>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <xz_axis_start+0x2c>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
        z_timer_start();
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <xz_axis_start+0x30>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000101;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <xz_axis_start+0x34>)
 8003d76:	2205      	movs	r2, #5
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	20017a20 	.word	0x20017a20

08003d90 <yz_axis_start>:
static inline void yz_axis_start(void){
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
        y_compare_enable();
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <yz_axis_start+0x2c>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	621a      	str	r2, [r3, #32]
        z_compare_enable();
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <yz_axis_start+0x30>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	621a      	str	r2, [r3, #32]
        y_timer_start();
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <yz_axis_start+0x2c>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
        z_timer_start();
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <yz_axis_start+0x30>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000110;
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <yz_axis_start+0x34>)
 8003dae:	2206      	movs	r2, #6
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	20017a20 	.word	0x20017a20

08003dc8 <xyz_axis_start>:
static inline void xyz_axis_start(void){
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
        x_compare_enable();
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <xyz_axis_start+0x38>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	621a      	str	r2, [r3, #32]
        y_compare_enable();
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <xyz_axis_start+0x3c>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	621a      	str	r2, [r3, #32]
        z_compare_enable();
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <xyz_axis_start+0x40>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	621a      	str	r2, [r3, #32]
        x_timer_start();
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <xyz_axis_start+0x38>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
        y_timer_start();
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <xyz_axis_start+0x3c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
        z_timer_start();
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <xyz_axis_start+0x40>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
        motor_start_status=0b00000111;
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <xyz_axis_start+0x44>)
 8003df2:	2207      	movs	r2, #7
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	20017a20 	.word	0x20017a20

08003e10 <b_axis_start>:

static inline void b_axis_start(void){
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
	b_compare_enable();
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <b_axis_start+0x20>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	621a      	str	r2, [r3, #32]
	b_timer_start();
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <b_axis_start+0x20>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
	motor_start_status=0b00001000;
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <b_axis_start+0x24>)
 8003e22:	2208      	movs	r2, #8
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40000400 	.word	0x40000400
 8003e34:	20017a20 	.word	0x20017a20

08003e38 <c_axis_start>:

static inline void c_axis_start(void){
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
	c_compare_enable();
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <c_axis_start+0x20>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	621a      	str	r2, [r3, #32]
	c_timer_start();
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <c_axis_start+0x20>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
	motor_start_status=0b00010000;
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <c_axis_start+0x24>)
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	601a      	str	r2, [r3, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40000800 	.word	0x40000800
 8003e5c:	20017a20 	.word	0x20017a20

08003e60 <save_targets>:

static inline void save_targets()
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
	x_standpoint_previous=x_standpoint;
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <save_targets+0x38>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <save_targets+0x3c>)
 8003e6a:	6013      	str	r3, [r2, #0]
	y_standpoint_previous=y_standpoint;
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <save_targets+0x40>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <save_targets+0x44>)
 8003e72:	6013      	str	r3, [r2, #0]
	z_standpoint_previous=z_standpoint;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <save_targets+0x48>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <save_targets+0x4c>)
 8003e7a:	6013      	str	r3, [r2, #0]
	b_standpoint_previous=b_standpoint;
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <save_targets+0x50>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <save_targets+0x54>)
 8003e82:	6013      	str	r3, [r2, #0]
	c_standpoint_previous=c_standpoint;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <save_targets+0x58>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <save_targets+0x5c>)
 8003e8a:	6013      	str	r3, [r2, #0]
	return;
 8003e8c:	bf00      	nop
}
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20017a54 	.word	0x20017a54
 8003e9c:	20017a74 	.word	0x20017a74
 8003ea0:	20017a58 	.word	0x20017a58
 8003ea4:	20017a78 	.word	0x20017a78
 8003ea8:	20017a5c 	.word	0x20017a5c
 8003eac:	20017a7c 	.word	0x20017a7c
 8003eb0:	20017a60 	.word	0x20017a60
 8003eb4:	20017a80 	.word	0x20017a80
 8003eb8:	20017a64 	.word	0x20017a64
 8003ebc:	20017a84 	.word	0x20017a84

08003ec0 <manual_motor_controll>:

static inline void manual_motor_controll()
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
	if(flags_global_mc&X_MANUAL_MOVE)
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <manual_motor_controll+0x80>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <manual_motor_controll+0x16>
		toggle_pin_x_axis();
 8003ed0:	f000 f838 	bl	8003f44 <toggle_pin_x_axis>
 8003ed4:	e022      	b.n	8003f1c <manual_motor_controll+0x5c>
	else if(flags_global_mc&Y_MANUAL_MOVE)
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <manual_motor_controll+0x80>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <manual_motor_controll+0x28>
		toggle_pin_y_axis();
 8003ee2:	f000 f8a7 	bl	8004034 <toggle_pin_y_axis>
 8003ee6:	e019      	b.n	8003f1c <manual_motor_controll+0x5c>
	else if(flags_global_mc&Z_MANUAL_MOVE)
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <manual_motor_controll+0x80>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <manual_motor_controll+0x3a>
		toggle_pin_z_axis();
 8003ef4:	f000 f910 	bl	8004118 <toggle_pin_z_axis>
 8003ef8:	e010      	b.n	8003f1c <manual_motor_controll+0x5c>
	else if(flags_global_mc&B_MANUAL_MOVE)
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <manual_motor_controll+0x80>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <manual_motor_controll+0x4c>
		toggle_pin_b_axis();
 8003f06:	f000 f9bd 	bl	8004284 <toggle_pin_b_axis>
 8003f0a:	e007      	b.n	8003f1c <manual_motor_controll+0x5c>
	else if(flags_global_mc&C_MANUAL_MOVE)
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <manual_motor_controll+0x80>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <manual_motor_controll+0x5c>
		toggle_pin_c_axis();
 8003f18:	f000 f9f4 	bl	8004304 <toggle_pin_c_axis>
	//these two are not exclusive...
	if(flags_global_mc&Y_MANUAL_MOVE_LEFT)
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <manual_motor_controll+0x80>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <manual_motor_controll+0x6c>
		toggle_pin_y_left_axis();
 8003f28:	f000 fa30 	bl	800438c <toggle_pin_y_left_axis>
	if(flags_global_mc&Y_MANUAL_MOVE_RIGHT)
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <manual_motor_controll+0x80>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <manual_motor_controll+0x7c>
		toggle_pin_y_right_axis();
 8003f38:	f000 fac4 	bl	80044c4 <toggle_pin_y_right_axis>
}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20017a18 	.word	0x20017a18

08003f44 <toggle_pin_x_axis>:

static inline void toggle_pin_x_axis()
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0

	if(GPIOE->ODR&GPIO_ODR_OD5)
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <toggle_pin_x_axis+0xcc>)
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <toggle_pin_x_axis+0x1e>
		GPIOE->BSRR|=GPIO_BSRR_BR5;
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <toggle_pin_x_axis+0xcc>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <toggle_pin_x_axis+0xcc>)
 8003f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	e005      	b.n	8003f6e <toggle_pin_x_axis+0x2a>
	else
		GPIOE->BSRR|=GPIO_BSRR_BS5;
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <toggle_pin_x_axis+0xcc>)
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <toggle_pin_x_axis+0xcc>)
 8003f68:	f043 0320 	orr.w	r3, r3, #32
 8003f6c:	6193      	str	r3, [r2, #24]

	if(motor_x_direction)
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <toggle_pin_x_axis+0xd0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <toggle_pin_x_axis+0x3e>
		x_standpoint++;
 8003f76:	4b28      	ldr	r3, [pc, #160]	; (8004018 <toggle_pin_x_axis+0xd4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <toggle_pin_x_axis+0xd4>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e004      	b.n	8003f8c <toggle_pin_x_axis+0x48>
	else
		x_standpoint--;
 8003f82:	4b25      	ldr	r3, [pc, #148]	; (8004018 <toggle_pin_x_axis+0xd4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <toggle_pin_x_axis+0xd4>)
 8003f8a:	6013      	str	r3, [r2, #0]
	if(commands&HOMING_CYCLE_COMMAND || commands&HOMING_CYCLE_SPLIT_COMMAND){
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <toggle_pin_x_axis+0xd8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <toggle_pin_x_axis+0x60>
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <toggle_pin_x_axis+0xd8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d017      	beq.n	8003fd4 <toggle_pin_x_axis+0x90>
		if((GPIOB->IDR&(1<<1))){//if the endswitch of the x_axis is pressed
 8003fa4:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <toggle_pin_x_axis+0xdc>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d011      	beq.n	8003fd4 <toggle_pin_x_axis+0x90>
			wait();
 8003fb0:	f000 fb22 	bl	80045f8 <wait>
			if((GPIOB->IDR&(1<<1))){
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <toggle_pin_x_axis+0xdc>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <toggle_pin_x_axis+0x90>
				x_standpoint=x_target;//that will make the motor stop
 8003fc0:	4b18      	ldr	r3, [pc, #96]	; (8004024 <toggle_pin_x_axis+0xe0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	; (8004018 <toggle_pin_x_axis+0xd4>)
 8003fc6:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				flags_global_mc|=X_HOMED;
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <toggle_pin_x_axis+0xe4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <toggle_pin_x_axis+0xe4>)
 8003fd2:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if(x_standpoint==x_target){
 8003fd4:	4b10      	ldr	r3, [pc, #64]	; (8004018 <toggle_pin_x_axis+0xd4>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <toggle_pin_x_axis+0xe0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d108      	bne.n	8003ff2 <toggle_pin_x_axis+0xae>
		//send_data();
		manual_timer_stop();
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <toggle_pin_x_axis+0xe8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
		//manual_compare_disable(); //why in the world is this here???
		flags_global_mc&=~X_MANUAL_MOVE;
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <toggle_pin_x_axis+0xe4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fee:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <toggle_pin_x_axis+0xe4>)
 8003ff0:	6013      	str	r3, [r2, #0]
	}
	static int delay_ctr = 0;
	delay_ctr++;
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <toggle_pin_x_axis+0xec>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <toggle_pin_x_axis+0xec>)
 8003ffa:	6013      	str	r3, [r2, #0]
	if(delay_ctr == 40){
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <toggle_pin_x_axis+0xec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b28      	cmp	r3, #40	; 0x28
 8004002:	d102      	bne.n	800400a <toggle_pin_x_axis+0xc6>
		delay_ctr = 0;
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <toggle_pin_x_axis+0xec>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
		//send_data();
	}
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	20017a24 	.word	0x20017a24
 8004018:	20017a54 	.word	0x20017a54
 800401c:	20017a1c 	.word	0x20017a1c
 8004020:	40020400 	.word	0x40020400
 8004024:	20017a38 	.word	0x20017a38
 8004028:	20017a18 	.word	0x20017a18
 800402c:	40001c00 	.word	0x40001c00
 8004030:	20017a90 	.word	0x20017a90

08004034 <toggle_pin_y_axis>:


static inline void toggle_pin_y_axis()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD8)
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <toggle_pin_y_axis+0xc0>)
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <toggle_pin_y_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR8;
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <toggle_pin_y_axis+0xc0>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <toggle_pin_y_axis+0xc0>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	e005      	b.n	800405e <toggle_pin_y_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS8;
 8004052:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <toggle_pin_y_axis+0xc0>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <toggle_pin_y_axis+0xc0>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6193      	str	r3, [r2, #24]

	if(motor_y_direction)
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <toggle_pin_y_axis+0xc4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <toggle_pin_y_axis+0x3e>
		y_standpoint++;
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <toggle_pin_y_axis+0xc8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <toggle_pin_y_axis+0xc8>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e004      	b.n	800407c <toggle_pin_y_axis+0x48>
	else
		y_standpoint--;
 8004072:	4b22      	ldr	r3, [pc, #136]	; (80040fc <toggle_pin_y_axis+0xc8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3b01      	subs	r3, #1
 8004078:	4a20      	ldr	r2, [pc, #128]	; (80040fc <toggle_pin_y_axis+0xc8>)
 800407a:	6013      	str	r3, [r2, #0]
	if(commands&HOMING_CYCLE_COMMAND){
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <toggle_pin_y_axis+0xcc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <toggle_pin_y_axis+0x84>
		if((GPIOD->IDR&(1<<2))){//if the endswitch of the x_axis is pressed
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <toggle_pin_y_axis+0xd0>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d011      	beq.n	80040b8 <toggle_pin_y_axis+0x84>
			wait();
 8004094:	f000 fab0 	bl	80045f8 <wait>
			if((GPIOD->IDR&(1<<2))){
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <toggle_pin_y_axis+0xd0>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <toggle_pin_y_axis+0x84>
				y_standpoint=y_target;//that will make the motor stop
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <toggle_pin_y_axis+0xd4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <toggle_pin_y_axis+0xc8>)
 80040aa:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				flags_global_mc|=Y_HOMED;
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <toggle_pin_y_axis+0xd8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <toggle_pin_y_axis+0xd8>)
 80040b6:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if(y_standpoint==y_target){
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <toggle_pin_y_axis+0xc8>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <toggle_pin_y_axis+0xd4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d108      	bne.n	80040d6 <toggle_pin_y_axis+0xa2>
		//send_data();
		manual_timer_stop();
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <toggle_pin_y_axis+0xdc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
		flags_global_mc&=~Y_MANUAL_MOVE;
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <toggle_pin_y_axis+0xd8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80040d2:	4a0e      	ldr	r2, [pc, #56]	; (800410c <toggle_pin_y_axis+0xd8>)
 80040d4:	6013      	str	r3, [r2, #0]
	}
	static int delay_ctr = 0;
	delay_ctr++;
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <toggle_pin_y_axis+0xe0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <toggle_pin_y_axis+0xe0>)
 80040de:	6013      	str	r3, [r2, #0]
	if(delay_ctr == 40){
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <toggle_pin_y_axis+0xe0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b28      	cmp	r3, #40	; 0x28
 80040e6:	d102      	bne.n	80040ee <toggle_pin_y_axis+0xba>
		delay_ctr = 0;
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <toggle_pin_y_axis+0xe0>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
		//send_data();
	}
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40020400 	.word	0x40020400
 80040f8:	20017a28 	.word	0x20017a28
 80040fc:	20017a58 	.word	0x20017a58
 8004100:	20017a1c 	.word	0x20017a1c
 8004104:	40020c00 	.word	0x40020c00
 8004108:	20017a3c 	.word	0x20017a3c
 800410c:	20017a18 	.word	0x20017a18
 8004110:	40001c00 	.word	0x40001c00
 8004114:	20017a94 	.word	0x20017a94

08004118 <toggle_pin_z_axis>:

static inline void toggle_pin_z_axis()
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD9)
 800411c:	4b50      	ldr	r3, [pc, #320]	; (8004260 <toggle_pin_z_axis+0x148>)
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d006      	beq.n	8004136 <toggle_pin_z_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR9;
 8004128:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <toggle_pin_z_axis+0x148>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	4a4c      	ldr	r2, [pc, #304]	; (8004260 <toggle_pin_z_axis+0x148>)
 800412e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004132:	6193      	str	r3, [r2, #24]
 8004134:	e005      	b.n	8004142 <toggle_pin_z_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS9;
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <toggle_pin_z_axis+0x148>)
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	4a49      	ldr	r2, [pc, #292]	; (8004260 <toggle_pin_z_axis+0x148>)
 800413c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004140:	6193      	str	r3, [r2, #24]

	if(motor_z_direction)
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <toggle_pin_z_axis+0x14c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <toggle_pin_z_axis+0x3e>
		z_standpoint++;
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <toggle_pin_z_axis+0x150>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	4a45      	ldr	r2, [pc, #276]	; (8004268 <toggle_pin_z_axis+0x150>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e004      	b.n	8004160 <toggle_pin_z_axis+0x48>
	else
		z_standpoint--;
 8004156:	4b44      	ldr	r3, [pc, #272]	; (8004268 <toggle_pin_z_axis+0x150>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3b01      	subs	r3, #1
 800415c:	4a42      	ldr	r2, [pc, #264]	; (8004268 <toggle_pin_z_axis+0x150>)
 800415e:	6013      	str	r3, [r2, #0]
	if(commands&HOMING_CYCLE_COMMAND || commands&HOMING_CYCLE_SPLIT_COMMAND){
 8004160:	4b42      	ldr	r3, [pc, #264]	; (800426c <toggle_pin_z_axis+0x154>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <toggle_pin_z_axis+0x60>
 800416c:	4b3f      	ldr	r3, [pc, #252]	; (800426c <toggle_pin_z_axis+0x154>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <toggle_pin_z_axis+0x90>
		if((GPIOB->IDR&(1<<3))){//if the endswitch of the x_axis is pressed
 8004178:	4b39      	ldr	r3, [pc, #228]	; (8004260 <toggle_pin_z_axis+0x148>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <toggle_pin_z_axis+0x90>
			wait();
 8004184:	f000 fa38 	bl	80045f8 <wait>
			if((GPIOB->IDR&(1<<3))){
 8004188:	4b35      	ldr	r3, [pc, #212]	; (8004260 <toggle_pin_z_axis+0x148>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <toggle_pin_z_axis+0x90>
				z_standpoint=z_target;//that will make the motor stop
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <toggle_pin_z_axis+0x158>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a33      	ldr	r2, [pc, #204]	; (8004268 <toggle_pin_z_axis+0x150>)
 800419a:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				flags_global_mc|=Z_HOMED;
 800419c:	4b35      	ldr	r3, [pc, #212]	; (8004274 <toggle_pin_z_axis+0x15c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <toggle_pin_z_axis+0x15c>)
 80041a6:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if(commands & MEASURE_WCS_TOOL_FLAG_COMMAND || commands & MEASURE_ACTUAL_TOOL_FLAG_COMMAND){
 80041a8:	4b30      	ldr	r3, [pc, #192]	; (800426c <toggle_pin_z_axis+0x154>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <toggle_pin_z_axis+0xa8>
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <toggle_pin_z_axis+0x154>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d031      	beq.n	8004224 <toggle_pin_z_axis+0x10c>
		if(z_standpoint==-332400)
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <toggle_pin_z_axis+0x150>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <toggle_pin_z_axis+0x160>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d103      	bne.n	80041d2 <toggle_pin_z_axis+0xba>
			TIM13->ARR=SPEED_2; //that direct change in hardware register, because there is no function for that yet
 80041ca:	4b2c      	ldr	r3, [pc, #176]	; (800427c <toggle_pin_z_axis+0x164>)
 80041cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
		if(!(GPIOB->IDR&(1<<2))){//if the endswitch of the x_axis is pressed
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <toggle_pin_z_axis+0x148>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d122      	bne.n	8004224 <toggle_pin_z_axis+0x10c>
			wait();
 80041de:	f000 fa0b 	bl	80045f8 <wait>
			if(!(GPIOB->IDR&(1<<2))){
 80041e2:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <toggle_pin_z_axis+0x148>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11a      	bne.n	8004224 <toggle_pin_z_axis+0x10c>
				if(commands & MEASURE_WCS_TOOL_FLAG_COMMAND || commands & MEASURE_ACTUAL_TOOL_FLAG_COMMAND){
 80041ee:	4b1f      	ldr	r3, [pc, #124]	; (800426c <toggle_pin_z_axis+0x154>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <toggle_pin_z_axis+0xee>
 80041fa:	4b1c      	ldr	r3, [pc, #112]	; (800426c <toggle_pin_z_axis+0x154>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <toggle_pin_z_axis+0x10c>
					flags_global_mc|=MEASURED_TOOL;
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <toggle_pin_z_axis+0x15c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800420e:	4a19      	ldr	r2, [pc, #100]	; (8004274 <toggle_pin_z_axis+0x15c>)
 8004210:	6013      	str	r3, [r2, #0]
					manual_timer_stop();
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <toggle_pin_z_axis+0x164>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
					flags_global_mc&=~Z_MANUAL_MOVE;
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <toggle_pin_z_axis+0x15c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004220:	4a14      	ldr	r2, [pc, #80]	; (8004274 <toggle_pin_z_axis+0x15c>)
 8004222:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}

	if(z_standpoint==z_target){
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <toggle_pin_z_axis+0x150>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <toggle_pin_z_axis+0x158>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d109      	bne.n	8004244 <toggle_pin_z_axis+0x12c>
		manual_timer_stop();
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <toggle_pin_z_axis+0x164>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
		flags_global_mc&=~Z_MANUAL_MOVE;
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <toggle_pin_z_axis+0x15c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800423e:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <toggle_pin_z_axis+0x15c>)
 8004240:	6013      	str	r3, [r2, #0]
		return;
 8004242:	e00b      	b.n	800425c <toggle_pin_z_axis+0x144>
	}
	static int delay_ctr = 0;
	delay_ctr++;
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <toggle_pin_z_axis+0x168>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <toggle_pin_z_axis+0x168>)
 800424c:	6013      	str	r3, [r2, #0]
	if(delay_ctr == 40){
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <toggle_pin_z_axis+0x168>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b28      	cmp	r3, #40	; 0x28
 8004254:	d102      	bne.n	800425c <toggle_pin_z_axis+0x144>
		delay_ctr = 0;
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <toggle_pin_z_axis+0x168>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
		//send_data();
	}
}
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40020400 	.word	0x40020400
 8004264:	20017a2c 	.word	0x20017a2c
 8004268:	20017a5c 	.word	0x20017a5c
 800426c:	20017a1c 	.word	0x20017a1c
 8004270:	20017a40 	.word	0x20017a40
 8004274:	20017a18 	.word	0x20017a18
 8004278:	fffaed90 	.word	0xfffaed90
 800427c:	40001c00 	.word	0x40001c00
 8004280:	20017a98 	.word	0x20017a98

08004284 <toggle_pin_b_axis>:

static inline void toggle_pin_b_axis()
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
	if(GPIOA->ODR&GPIO_ODR_OD6)
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <toggle_pin_b_axis+0x6c>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d006      	beq.n	80042a2 <toggle_pin_b_axis+0x1e>
		GPIOA->BSRR|=GPIO_BSRR_BR6;
 8004294:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <toggle_pin_b_axis+0x6c>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <toggle_pin_b_axis+0x6c>)
 800429a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	e005      	b.n	80042ae <toggle_pin_b_axis+0x2a>
	else
		GPIOA->BSRR|=GPIO_BSRR_BS6;
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <toggle_pin_b_axis+0x6c>)
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <toggle_pin_b_axis+0x6c>)
 80042a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ac:	6193      	str	r3, [r2, #24]

	if(motor_b_direction)
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <toggle_pin_b_axis+0x70>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <toggle_pin_b_axis+0x3e>
		b_standpoint++;
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <toggle_pin_b_axis+0x74>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3301      	adds	r3, #1
 80042bc:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <toggle_pin_b_axis+0x74>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e004      	b.n	80042cc <toggle_pin_b_axis+0x48>
	else
		b_standpoint--;
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <toggle_pin_b_axis+0x74>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a0b      	ldr	r2, [pc, #44]	; (80042f8 <toggle_pin_b_axis+0x74>)
 80042ca:	6013      	str	r3, [r2, #0]
			}
		}
	}
	*/

	if(b_standpoint==b_target){
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <toggle_pin_b_axis+0x74>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <toggle_pin_b_axis+0x78>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d105      	bne.n	80042e4 <toggle_pin_b_axis+0x60>

		flags_global_mc&=~B_MANUAL_MOVE;
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <toggle_pin_b_axis+0x7c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	4a07      	ldr	r2, [pc, #28]	; (8004300 <toggle_pin_b_axis+0x7c>)
 80042e2:	6013      	str	r3, [r2, #0]
	}
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40020000 	.word	0x40020000
 80042f4:	20017a30 	.word	0x20017a30
 80042f8:	20017a60 	.word	0x20017a60
 80042fc:	20017a44 	.word	0x20017a44
 8004300:	20017a18 	.word	0x20017a18

08004304 <toggle_pin_c_axis>:

static inline void toggle_pin_c_axis()
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD9)
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <toggle_pin_c_axis+0x70>)
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <toggle_pin_c_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR9;
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <toggle_pin_c_axis+0x70>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4a16      	ldr	r2, [pc, #88]	; (8004374 <toggle_pin_c_axis+0x70>)
 800431a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800431e:	6193      	str	r3, [r2, #24]
 8004320:	e005      	b.n	800432e <toggle_pin_c_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS6;
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <toggle_pin_c_axis+0x70>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	4a13      	ldr	r2, [pc, #76]	; (8004374 <toggle_pin_c_axis+0x70>)
 8004328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800432c:	6193      	str	r3, [r2, #24]

	if(motor_c_direction)
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <toggle_pin_c_axis+0x74>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <toggle_pin_c_axis+0x3e>
		c_standpoint++;
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <toggle_pin_c_axis+0x78>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	4a0f      	ldr	r2, [pc, #60]	; (800437c <toggle_pin_c_axis+0x78>)
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e004      	b.n	800434c <toggle_pin_c_axis+0x48>
	else
		c_standpoint--;
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <toggle_pin_c_axis+0x78>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a0c      	ldr	r2, [pc, #48]	; (800437c <toggle_pin_c_axis+0x78>)
 800434a:	6013      	str	r3, [r2, #0]
			}
		}
	}
	*/

	if(c_standpoint==c_target){
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <toggle_pin_c_axis+0x78>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <toggle_pin_c_axis+0x7c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d108      	bne.n	800436a <toggle_pin_c_axis+0x66>
		manual_timer_stop();
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <toggle_pin_c_axis+0x80>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
		flags_global_mc&=~C_MANUAL_MOVE;
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <toggle_pin_c_axis+0x84>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0308 	bic.w	r3, r3, #8
 8004366:	4a08      	ldr	r2, [pc, #32]	; (8004388 <toggle_pin_c_axis+0x84>)
 8004368:	6013      	str	r3, [r2, #0]
	}
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40020400 	.word	0x40020400
 8004378:	20017a34 	.word	0x20017a34
 800437c:	20017a64 	.word	0x20017a64
 8004380:	20017a48 	.word	0x20017a48
 8004384:	40001c00 	.word	0x40001c00
 8004388:	20017a18 	.word	0x20017a18

0800438c <toggle_pin_y_left_axis>:

static inline void toggle_pin_y_left_axis()
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD8)
 8004390:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <toggle_pin_y_left_axis+0x114>)
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <toggle_pin_y_left_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR8;
 800439c:	4b40      	ldr	r3, [pc, #256]	; (80044a0 <toggle_pin_y_left_axis+0x114>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	4a3f      	ldr	r2, [pc, #252]	; (80044a0 <toggle_pin_y_left_axis+0x114>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a6:	6193      	str	r3, [r2, #24]
 80043a8:	e005      	b.n	80043b6 <toggle_pin_y_left_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS8;
 80043aa:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <toggle_pin_y_left_axis+0x114>)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <toggle_pin_y_left_axis+0x114>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6193      	str	r3, [r2, #24]

	if(motor_y_direction)
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <toggle_pin_y_left_axis+0x118>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <toggle_pin_y_left_axis+0x3e>
		y_standpoint_left++;
 80043be:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3301      	adds	r3, #1
 80043c4:	4a38      	ldr	r2, [pc, #224]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	e004      	b.n	80043d4 <toggle_pin_y_left_axis+0x48>
	else
		y_standpoint_left--;
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 80043d2:	6013      	str	r3, [r2, #0]
	//here we need two endswitches
	if(commands&HOMING_CYCLE_SPLIT_COMMAND){
 80043d4:	4b35      	ldr	r3, [pc, #212]	; (80044ac <toggle_pin_y_left_axis+0x120>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d025      	beq.n	800442c <toggle_pin_y_left_axis+0xa0>
	//this is the same endswitch, as in the general y axis...
		if((GPIOD->IDR&(1<<2))){//if the endswitch of the x_axis is pressed
 80043e0:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <toggle_pin_y_left_axis+0x124>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01f      	beq.n	800442c <toggle_pin_y_left_axis+0xa0>
		//if((GPIOB->IDR&(1<<10))){//if the endswitch of the x_axis is pressed
			wait();
 80043ec:	f000 f904 	bl	80045f8 <wait>
			if((GPIOD->IDR&(1<<2))){
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <toggle_pin_y_left_axis+0x124>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d017      	beq.n	800442c <toggle_pin_y_left_axis+0xa0>
			//if((GPIOB->IDR&(1<<10))){
				send_position_message(y_standpoint_left ,0,CAN_ID_Y_LEFT_DIFFERENCE);
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f04f 626e 	mov.w	r2, #249561088	; 0xee00000
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd ffb8 	bl	800237c <send_position_message>
				y_standpoint_left=y_target_left;//that will make the motor stop
 800440c:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <toggle_pin_y_left_axis+0x128>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 8004412:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				flags_global_mc&=~Y_MANUAL_MOVE_LEFT;
 8004414:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 0310 	bic.w	r3, r3, #16
 800441c:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 800441e:	6013      	str	r3, [r2, #0]
				flags_global_mc|=Y_HOMED_LEFT;
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 800442a:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if(y_standpoint_left==y_target_left){
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <toggle_pin_y_left_axis+0x11c>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <toggle_pin_y_left_axis+0x128>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d124      	bne.n	8004482 <toggle_pin_y_left_axis+0xf6>
		//send_data();
		if((commands & HOMING_CYCLE_SPLIT_COMMAND) && (flags_global_mc&Y_HOMED_LEFT) && (flags_global_mc& Y_HOMED_RIGHT)){
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <toggle_pin_y_left_axis+0x120>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <toggle_pin_y_left_axis+0xe4>
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00f      	beq.n	8004470 <toggle_pin_y_left_axis+0xe4>
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <toggle_pin_y_left_axis+0xe4>
			manual_timer_stop();
 800445c:	4b17      	ldr	r3, [pc, #92]	; (80044bc <toggle_pin_y_left_axis+0x130>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
			flags_global_mc|=Y_HOMED;
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e008      	b.n	8004482 <toggle_pin_y_left_axis+0xf6>
		}
		else{
			manual_timer_stop();
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <toggle_pin_y_left_axis+0x130>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
			flags_global_mc&=~Y_MANUAL_MOVE_LEFT;
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 0310 	bic.w	r3, r3, #16
 800447e:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <toggle_pin_y_left_axis+0x12c>)
 8004480:	6013      	str	r3, [r2, #0]
		}
	}
	static int delay_ctr = 0;
	delay_ctr++;
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <toggle_pin_y_left_axis+0x134>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <toggle_pin_y_left_axis+0x134>)
 800448a:	6013      	str	r3, [r2, #0]
	if(delay_ctr == 40){
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <toggle_pin_y_left_axis+0x134>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b28      	cmp	r3, #40	; 0x28
 8004492:	d102      	bne.n	800449a <toggle_pin_y_left_axis+0x10e>
		delay_ctr = 0;
 8004494:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <toggle_pin_y_left_axis+0x134>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
		//send_data();
	}
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40020400 	.word	0x40020400
 80044a4:	20017a28 	.word	0x20017a28
 80044a8:	20017a68 	.word	0x20017a68
 80044ac:	20017a1c 	.word	0x20017a1c
 80044b0:	40020c00 	.word	0x40020c00
 80044b4:	20017a4c 	.word	0x20017a4c
 80044b8:	20017a18 	.word	0x20017a18
 80044bc:	40001c00 	.word	0x40001c00
 80044c0:	20017a9c 	.word	0x20017a9c

080044c4 <toggle_pin_y_right_axis>:
// we could for example use here the same line for the tool length measurement
static inline void toggle_pin_y_right_axis()
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
	if(GPIOB->ODR&GPIO_ODR_OD11)
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <toggle_pin_y_right_axis+0x1e>
		GPIOB->BSRR|=GPIO_BSRR_BR11;
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	4a3f      	ldr	r2, [pc, #252]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 80044da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044de:	6193      	str	r3, [r2, #24]
 80044e0:	e005      	b.n	80044ee <toggle_pin_y_right_axis+0x2a>
	else
		GPIOB->BSRR|=GPIO_BSRR_BS11;
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 80044e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ec:	6193      	str	r3, [r2, #24]

	if(motor_y_direction)
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <toggle_pin_y_right_axis+0x118>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <toggle_pin_y_right_axis+0x3e>
		y_standpoint_right++;
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e004      	b.n	800450c <toggle_pin_y_right_axis+0x48>
	else
		y_standpoint_right--;
 8004502:	4b37      	ldr	r3, [pc, #220]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3b01      	subs	r3, #1
 8004508:	4a35      	ldr	r2, [pc, #212]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 800450a:	6013      	str	r3, [r2, #0]
	//here we need two endswitches...
	if(commands & HOMING_CYCLE_SPLIT_COMMAND){
 800450c:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <toggle_pin_y_right_axis+0x120>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d025      	beq.n	8004564 <toggle_pin_y_right_axis+0xa0>
		if((GPIOB->IDR&(1<<10))){//if the endswitch of the x_axis is pressed
 8004518:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01f      	beq.n	8004564 <toggle_pin_y_right_axis+0xa0>
		//if((GPIOD->IDR&(1<<2))){
			wait();
 8004524:	f000 f868 	bl	80045f8 <wait>
			if((GPIOB->IDR&(1<<10))){
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <toggle_pin_y_right_axis+0x114>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d017      	beq.n	8004564 <toggle_pin_y_right_axis+0xa0>
			//if((GPIOD->IDR&(1<<2))){
				send_position_message(y_standpoint_right ,0,CAN_ID_Y_RIGHT_DIFFERENCE);
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800453c:	2100      	movs	r1, #0
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd ff1c 	bl	800237c <send_position_message>
				y_standpoint_right=y_target_right;//that will make the motor stop
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <toggle_pin_y_right_axis+0x124>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 800454a:	6013      	str	r3, [r2, #0]
				flags_global_mc&=~Y_MANUAL_MOVE_RIGHT;
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 0320 	bic.w	r3, r3, #32
 8004554:	4a25      	ldr	r2, [pc, #148]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 8004556:	6013      	str	r3, [r2, #0]
				//but it would be not good to stop at a uneven standpointnumber because that would be a half executed step
				flags_global_mc|=Y_HOMED_RIGHT;
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 8004562:	6013      	str	r3, [r2, #0]
			}
		}
	}
	if(y_standpoint_right==y_target_right){
 8004564:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <toggle_pin_y_right_axis+0x11c>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <toggle_pin_y_right_axis+0x124>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d124      	bne.n	80045ba <toggle_pin_y_right_axis+0xf6>
		//send_data();
		if((commands&HOMING_CYCLE_SPLIT_COMMAND) && (flags_global_mc&Y_HOMED_LEFT) && (flags_global_mc&Y_HOMED_RIGHT)){
 8004570:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <toggle_pin_y_right_axis+0x120>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <toggle_pin_y_right_axis+0xe4>
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00f      	beq.n	80045a8 <toggle_pin_y_right_axis+0xe4>
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <toggle_pin_y_right_axis+0xe4>
			manual_timer_stop();
 8004594:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <toggle_pin_y_right_axis+0x12c>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
			flags_global_mc|=Y_HOMED;
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e008      	b.n	80045ba <toggle_pin_y_right_axis+0xf6>
		}
		else{
			manual_timer_stop();
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <toggle_pin_y_right_axis+0x12c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
			flags_global_mc&=~Y_MANUAL_MOVE_RIGHT;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0320 	bic.w	r3, r3, #32
 80045b6:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <toggle_pin_y_right_axis+0x128>)
 80045b8:	6013      	str	r3, [r2, #0]
		}
	}
	static int delay_ctr = 0;
	delay_ctr++;
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <toggle_pin_y_right_axis+0x130>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <toggle_pin_y_right_axis+0x130>)
 80045c2:	6013      	str	r3, [r2, #0]
	if(delay_ctr == 40){
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <toggle_pin_y_right_axis+0x130>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b28      	cmp	r3, #40	; 0x28
 80045ca:	d102      	bne.n	80045d2 <toggle_pin_y_right_axis+0x10e>
		delay_ctr = 0;
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <toggle_pin_y_right_axis+0x130>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
		//send_data();
	}
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40020400 	.word	0x40020400
 80045dc:	20017a28 	.word	0x20017a28
 80045e0:	20017a6c 	.word	0x20017a6c
 80045e4:	20017a1c 	.word	0x20017a1c
 80045e8:	20017a50 	.word	0x20017a50
 80045ec:	20017a18 	.word	0x20017a18
 80045f0:	40001c00 	.word	0x40001c00
 80045f4:	20017aa0 	.word	0x20017aa0

080045f8 <wait>:

static inline void wait()
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	for(int i=0;i<20;i++)
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	e002      	b.n	800460a <wait+0x12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3301      	adds	r3, #1
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b13      	cmp	r3, #19
 800460e:	ddf9      	ble.n	8004604 <wait+0xc>
		;
	return;
 8004610:	bf00      	nop
}
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <SystemInit+0x20>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	4a05      	ldr	r2, [pc, #20]	; (800463c <SystemInit+0x20>)
 8004628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800462c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8004640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004644:	480d      	ldr	r0, [pc, #52]	; (800467c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004646:	490e      	ldr	r1, [pc, #56]	; (8004680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004648:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800464c:	e002      	b.n	8004654 <LoopCopyDataInit>

0800464e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800464e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004652:	3304      	adds	r3, #4

08004654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004658:	d3f9      	bcc.n	800464e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800465a:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800465c:	4c0b      	ldr	r4, [pc, #44]	; (800468c <LoopFillZerobss+0x26>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004660:	e001      	b.n	8004666 <LoopFillZerobss>

08004662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004664:	3204      	adds	r2, #4

08004666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004668:	d3fb      	bcc.n	8004662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800466a:	f7ff ffd7 	bl	800461c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800466e:	f002 fc0d 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004672:	f7fc fbf9 	bl	8000e68 <main>
  bx  lr    
 8004676:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8004678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800467c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004680:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004684:	08007118 	.word	0x08007118
  ldr r2, =_sbss
 8004688:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800468c:	20017be0 	.word	0x20017be0

08004690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004690:	e7fe      	b.n	8004690 <ADC_IRQHandler>
	...

08004694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004698:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_Init+0x40>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <HAL_Init+0x40>)
 800469e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_Init+0x40>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <HAL_Init+0x40>)
 80046aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046b0:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_Init+0x40>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <HAL_Init+0x40>)
 80046b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046bc:	2003      	movs	r0, #3
 80046be:	f000 fdab 	bl	8005218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046c2:	2000      	movs	r0, #0
 80046c4:	f000 f808 	bl	80046d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046c8:	f7fd fede 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023c00 	.word	0x40023c00

080046d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_InitTick+0x54>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_InitTick+0x58>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	4619      	mov	r1, r3
 80046ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fdc3 	bl	8005282 <HAL_SYSTICK_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e00e      	b.n	8004724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d80a      	bhi.n	8004722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800470c:	2200      	movs	r2, #0
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	f000 fd8b 	bl	800522e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004718:	4a06      	ldr	r2, [pc, #24]	; (8004734 <HAL_InitTick+0x5c>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	2000000c 	.word	0x2000000c
 8004730:	20000014 	.word	0x20000014
 8004734:	20000010 	.word	0x20000010

08004738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_IncTick+0x20>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_IncTick+0x24>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4413      	add	r3, r2
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_IncTick+0x24>)
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000014 	.word	0x20000014
 800475c:	20017aa4 	.word	0x20017aa4

08004760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return uwTick;
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_GetTick+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20017aa4 	.word	0x20017aa4

08004778 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0ed      	b.n	8004966 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd fe9e 	bl	80024d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ac:	f7ff ffd8 	bl	8004760 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047b2:	e012      	b.n	80047da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047b4:	f7ff ffd4 	bl	8004760 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b0a      	cmp	r3, #10
 80047c0:	d90b      	bls.n	80047da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2205      	movs	r2, #5
 80047d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0c5      	b.n	8004966 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0e5      	beq.n	80047b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0202 	bic.w	r2, r2, #2
 80047f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f8:	f7ff ffb2 	bl	8004760 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047fe:	e012      	b.n	8004826 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004800:	f7ff ffae 	bl	8004760 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b0a      	cmp	r3, #10
 800480c:	d90b      	bls.n	8004826 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2205      	movs	r2, #5
 800481e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e09f      	b.n	8004966 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7e1b      	ldrb	r3, [r3, #24]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d108      	bne.n	800484e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e007      	b.n	800485e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d108      	bne.n	8004878 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e007      	b.n	8004888 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004886:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7e9b      	ldrb	r3, [r3, #26]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d108      	bne.n	80048a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0220 	orr.w	r2, r2, #32
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e007      	b.n	80048b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0220 	bic.w	r2, r2, #32
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7edb      	ldrb	r3, [r3, #27]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d108      	bne.n	80048cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0210 	bic.w	r2, r2, #16
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e007      	b.n	80048dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0210 	orr.w	r2, r2, #16
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7f1b      	ldrb	r3, [r3, #28]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d108      	bne.n	80048f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0208 	orr.w	r2, r2, #8
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e007      	b.n	8004906 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0208 	bic.w	r2, r2, #8
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7f5b      	ldrb	r3, [r3, #29]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d108      	bne.n	8004920 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0204 	orr.w	r2, r2, #4
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e007      	b.n	8004930 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	1e5a      	subs	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004986:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d003      	beq.n	8004996 <HAL_CAN_ConfigFilter+0x26>
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b02      	cmp	r3, #2
 8004992:	f040 80be 	bne.w	8004b12 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004996:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <HAL_CAN_ConfigFilter+0x1bc>)
 8004998:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	431a      	orrs	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2201      	movs	r2, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	401a      	ands	r2, r3
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d123      	bne.n	8004a40 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	401a      	ands	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3248      	adds	r2, #72	; 0x48
 8004a20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	3348      	adds	r3, #72	; 0x48
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d122      	bne.n	8004a8e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	3248      	adds	r2, #72	; 0x48
 8004a6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a84:	6979      	ldr	r1, [r7, #20]
 8004a86:	3348      	adds	r3, #72	; 0x48
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	440b      	add	r3, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004aa8:	e007      	b.n	8004aba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43db      	mvns	r3, r3
 8004acc:	401a      	ands	r2, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004ad4:	e007      	b.n	8004ae6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b04:	f023 0201 	bic.w	r2, r3, #1
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e006      	b.n	8004b20 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
  }
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40006400 	.word	0x40006400

08004b30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d12e      	bne.n	8004ba2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7ff fe00 	bl	8004760 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b62:	e012      	b.n	8004b8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b64:	f7ff fdfc 	bl	8004760 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b0a      	cmp	r3, #10
 8004b70:	d90b      	bls.n	8004b8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2205      	movs	r2, #5
 8004b82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e012      	b.n	8004bb0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e006      	b.n	8004bb0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d002      	beq.n	8004bd6 <HAL_CAN_ActivateNotification+0x1e>
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d109      	bne.n	8004bea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6959      	ldr	r1, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e006      	b.n	8004bf8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d07c      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d023      	beq.n	8004c9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f983 	bl	8004f72 <HAL_CAN_TxMailbox0CompleteCallback>
 8004c6c:	e016      	b.n	8004c9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	e00c      	b.n	8004c9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
 8004c94:	e002      	b.n	8004c9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f989 	bl	8004fae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d024      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f963 	bl	8004f86 <HAL_CAN_TxMailbox1CompleteCallback>
 8004cc0:	e016      	b.n	8004cf0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	e00c      	b.n	8004cf0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce8:	e002      	b.n	8004cf0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f969 	bl	8004fc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d024      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f943 	bl	8004f9a <HAL_CAN_TxMailbox2CompleteCallback>
 8004d14:	e016      	b.n	8004d44 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e00c      	b.n	8004d44 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3c:	e002      	b.n	8004d44 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f949 	bl	8004fd6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2210      	movs	r2, #16
 8004d66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f93a 	bl	8004ffe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f921 	bl	8004fea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00c      	beq.n	8004dcc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d006      	beq.n	8004dee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2208      	movs	r2, #8
 8004de6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f91c 	bl	8005026 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f903 	bl	8005012 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2210      	movs	r2, #16
 8004e26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f906 	bl	800503a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00b      	beq.n	8004e50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2208      	movs	r2, #8
 8004e48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8ff 	bl	800504e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d07b      	beq.n	8004f52 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d072      	beq.n	8004f4a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f043 0302 	orr.w	r3, r3, #2
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d043      	beq.n	8004f4a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d03e      	beq.n	8004f4a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ed2:	2b60      	cmp	r3, #96	; 0x60
 8004ed4:	d02b      	beq.n	8004f2e <HAL_CAN_IRQHandler+0x32a>
 8004ed6:	2b60      	cmp	r3, #96	; 0x60
 8004ed8:	d82e      	bhi.n	8004f38 <HAL_CAN_IRQHandler+0x334>
 8004eda:	2b50      	cmp	r3, #80	; 0x50
 8004edc:	d022      	beq.n	8004f24 <HAL_CAN_IRQHandler+0x320>
 8004ede:	2b50      	cmp	r3, #80	; 0x50
 8004ee0:	d82a      	bhi.n	8004f38 <HAL_CAN_IRQHandler+0x334>
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d019      	beq.n	8004f1a <HAL_CAN_IRQHandler+0x316>
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d826      	bhi.n	8004f38 <HAL_CAN_IRQHandler+0x334>
 8004eea:	2b30      	cmp	r3, #48	; 0x30
 8004eec:	d010      	beq.n	8004f10 <HAL_CAN_IRQHandler+0x30c>
 8004eee:	2b30      	cmp	r3, #48	; 0x30
 8004ef0:	d822      	bhi.n	8004f38 <HAL_CAN_IRQHandler+0x334>
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d002      	beq.n	8004efc <HAL_CAN_IRQHandler+0x2f8>
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d005      	beq.n	8004f06 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004efa:	e01d      	b.n	8004f38 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	f043 0308 	orr.w	r3, r3, #8
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f04:	e019      	b.n	8004f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	f043 0310 	orr.w	r3, r3, #16
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f0e:	e014      	b.n	8004f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f043 0320 	orr.w	r3, r3, #32
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f18:	e00f      	b.n	8004f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f22:	e00a      	b.n	8004f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f2c:	e005      	b.n	8004f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f36:	e000      	b.n	8004f3a <HAL_CAN_IRQHandler+0x336>
            break;
 8004f38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f87c 	bl	8005062 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3728      	adds	r7, #40	; 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <__NVIC_SetPriorityGrouping>:
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <__NVIC_SetPriorityGrouping+0x44>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005094:	4013      	ands	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050aa:	4a04      	ldr	r2, [pc, #16]	; (80050bc <__NVIC_SetPriorityGrouping+0x44>)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	60d3      	str	r3, [r2, #12]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000ed00 	.word	0xe000ed00

080050c0 <__NVIC_GetPriorityGrouping>:
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <__NVIC_GetPriorityGrouping+0x18>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	f003 0307 	and.w	r3, r3, #7
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <__NVIC_EnableIRQ>:
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	db0b      	blt.n	8005106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	f003 021f 	and.w	r2, r3, #31
 80050f4:	4907      	ldr	r1, [pc, #28]	; (8005114 <__NVIC_EnableIRQ+0x38>)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	2001      	movs	r0, #1
 80050fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	e000e100 	.word	0xe000e100

08005118 <__NVIC_SetPriority>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	6039      	str	r1, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	db0a      	blt.n	8005142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	490c      	ldr	r1, [pc, #48]	; (8005164 <__NVIC_SetPriority+0x4c>)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	440b      	add	r3, r1
 800513c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005140:	e00a      	b.n	8005158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4908      	ldr	r1, [pc, #32]	; (8005168 <__NVIC_SetPriority+0x50>)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	3b04      	subs	r3, #4
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	440b      	add	r3, r1
 8005156:	761a      	strb	r2, [r3, #24]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	e000e100 	.word	0xe000e100
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <NVIC_EncodePriority>:
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	; 0x24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f1c3 0307 	rsb	r3, r3, #7
 8005186:	2b04      	cmp	r3, #4
 8005188:	bf28      	it	cs
 800518a:	2304      	movcs	r3, #4
 800518c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3304      	adds	r3, #4
 8005192:	2b06      	cmp	r3, #6
 8005194:	d902      	bls.n	800519c <NVIC_EncodePriority+0x30>
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3b03      	subs	r3, #3
 800519a:	e000      	b.n	800519e <NVIC_EncodePriority+0x32>
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43da      	mvns	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	401a      	ands	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b4:	f04f 31ff 	mov.w	r1, #4294967295
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	43d9      	mvns	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c4:	4313      	orrs	r3, r2
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3724      	adds	r7, #36	; 0x24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3b01      	subs	r3, #1
 80051e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051e4:	d301      	bcc.n	80051ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00f      	b.n	800520a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <SysTick_Config+0x40>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051f2:	210f      	movs	r1, #15
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	f7ff ff8e 	bl	8005118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <SysTick_Config+0x40>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005202:	4b04      	ldr	r3, [pc, #16]	; (8005214 <SysTick_Config+0x40>)
 8005204:	2207      	movs	r2, #7
 8005206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	e000e010 	.word	0xe000e010

08005218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff29 	bl	8005078 <__NVIC_SetPriorityGrouping>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	4603      	mov	r3, r0
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005240:	f7ff ff3e 	bl	80050c0 <__NVIC_GetPriorityGrouping>
 8005244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f7ff ff8e 	bl	800516c <NVIC_EncodePriority>
 8005250:	4602      	mov	r2, r0
 8005252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff5d 	bl	8005118 <__NVIC_SetPriority>
}
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff31 	bl	80050dc <__NVIC_EnableIRQ>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ffa2 	bl	80051d4 <SysTick_Config>
 8005290:	4603      	mov	r3, r0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e16b      	b.n	8005590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052b8:	2201      	movs	r2, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f040 815a 	bne.w	800558a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d005      	beq.n	80052ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d130      	bne.n	8005350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	2203      	movs	r2, #3
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005324:	2201      	movs	r2, #1
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4013      	ands	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 0201 	and.w	r2, r3, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b03      	cmp	r3, #3
 800535a:	d017      	beq.n	800538c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	2203      	movs	r2, #3
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d123      	bne.n	80053e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	08da      	lsrs	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3208      	adds	r2, #8
 80053a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	220f      	movs	r2, #15
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	08da      	lsrs	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3208      	adds	r2, #8
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2203      	movs	r2, #3
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80b4 	beq.w	800558a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	4b60      	ldr	r3, [pc, #384]	; (80055a8 <HAL_GPIO_Init+0x30c>)
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	4a5f      	ldr	r2, [pc, #380]	; (80055a8 <HAL_GPIO_Init+0x30c>)
 800542c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005430:	6453      	str	r3, [r2, #68]	; 0x44
 8005432:	4b5d      	ldr	r3, [pc, #372]	; (80055a8 <HAL_GPIO_Init+0x30c>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800543e:	4a5b      	ldr	r2, [pc, #364]	; (80055ac <HAL_GPIO_Init+0x310>)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	3302      	adds	r3, #2
 8005446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	220f      	movs	r2, #15
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a52      	ldr	r2, [pc, #328]	; (80055b0 <HAL_GPIO_Init+0x314>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <HAL_GPIO_Init+0x226>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a51      	ldr	r2, [pc, #324]	; (80055b4 <HAL_GPIO_Init+0x318>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d025      	beq.n	80054be <HAL_GPIO_Init+0x222>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a50      	ldr	r2, [pc, #320]	; (80055b8 <HAL_GPIO_Init+0x31c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x21e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a4f      	ldr	r2, [pc, #316]	; (80055bc <HAL_GPIO_Init+0x320>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x21a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a4e      	ldr	r2, [pc, #312]	; (80055c0 <HAL_GPIO_Init+0x324>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x216>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a4d      	ldr	r2, [pc, #308]	; (80055c4 <HAL_GPIO_Init+0x328>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x212>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4c      	ldr	r2, [pc, #304]	; (80055c8 <HAL_GPIO_Init+0x32c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x20e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4b      	ldr	r2, [pc, #300]	; (80055cc <HAL_GPIO_Init+0x330>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x20a>
 80054a2:	2307      	movs	r3, #7
 80054a4:	e00e      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054a6:	2308      	movs	r3, #8
 80054a8:	e00c      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054aa:	2306      	movs	r3, #6
 80054ac:	e00a      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054ae:	2305      	movs	r3, #5
 80054b0:	e008      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054b2:	2304      	movs	r3, #4
 80054b4:	e006      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054b6:	2303      	movs	r3, #3
 80054b8:	e004      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e002      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_GPIO_Init+0x228>
 80054c2:	2300      	movs	r3, #0
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	f002 0203 	and.w	r2, r2, #3
 80054ca:	0092      	lsls	r2, r2, #2
 80054cc:	4093      	lsls	r3, r2
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054d4:	4935      	ldr	r1, [pc, #212]	; (80055ac <HAL_GPIO_Init+0x310>)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	3302      	adds	r3, #2
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054e2:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <HAL_GPIO_Init+0x334>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4013      	ands	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005506:	4a32      	ldr	r2, [pc, #200]	; (80055d0 <HAL_GPIO_Init+0x334>)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800550c:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <HAL_GPIO_Init+0x334>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005530:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <HAL_GPIO_Init+0x334>)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <HAL_GPIO_Init+0x334>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_GPIO_Init+0x334>)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005560:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <HAL_GPIO_Init+0x334>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005584:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <HAL_GPIO_Init+0x334>)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	f67f ae90 	bls.w	80052b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3724      	adds	r7, #36	; 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40013800 	.word	0x40013800
 80055b0:	40020000 	.word	0x40020000
 80055b4:	40020400 	.word	0x40020400
 80055b8:	40020800 	.word	0x40020800
 80055bc:	40020c00 	.word	0x40020c00
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40021400 	.word	0x40021400
 80055c8:	40021800 	.word	0x40021800
 80055cc:	40021c00 	.word	0x40021c00
 80055d0:	40013c00 	.word	0x40013c00

080055d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	807b      	strh	r3, [r7, #2]
 80055e0:	4613      	mov	r3, r2
 80055e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055e4:	787b      	ldrb	r3, [r7, #1]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ea:	887a      	ldrh	r2, [r7, #2]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055f0:	e003      	b.n	80055fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	041a      	lsls	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	619a      	str	r2, [r3, #24]
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e267      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d075      	beq.n	8005712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005626:	4b88      	ldr	r3, [pc, #544]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b04      	cmp	r3, #4
 8005630:	d00c      	beq.n	800564c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005632:	4b85      	ldr	r3, [pc, #532]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800563a:	2b08      	cmp	r3, #8
 800563c:	d112      	bne.n	8005664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563e:	4b82      	ldr	r3, [pc, #520]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800564a:	d10b      	bne.n	8005664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	4b7e      	ldr	r3, [pc, #504]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05b      	beq.n	8005710 <HAL_RCC_OscConfig+0x108>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d157      	bne.n	8005710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e242      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x74>
 800566e:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a75      	ldr	r2, [pc, #468]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e01d      	b.n	80056b8 <HAL_RCC_OscConfig+0xb0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x98>
 8005686:	4b70      	ldr	r3, [pc, #448]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a6f      	ldr	r2, [pc, #444]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800568c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6c      	ldr	r2, [pc, #432]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0xb0>
 80056a0:	4b69      	ldr	r3, [pc, #420]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a68      	ldr	r2, [pc, #416]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a65      	ldr	r2, [pc, #404]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7ff f84e 	bl	8004760 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c8:	f7ff f84a 	bl	8004760 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	; 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e207      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	4b5b      	ldr	r3, [pc, #364]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0xc0>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7ff f83a 	bl	8004760 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056f0:	f7ff f836 	bl	8004760 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e1f3      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005702:	4b51      	ldr	r3, [pc, #324]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0xe8>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d063      	beq.n	80057e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005732:	2b08      	cmp	r3, #8
 8005734:	d11c      	bne.n	8005770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005736:	4b44      	ldr	r3, [pc, #272]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d116      	bne.n	8005770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_RCC_OscConfig+0x152>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e1c7      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4937      	ldr	r1, [pc, #220]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800576a:	4313      	orrs	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576e:	e03a      	b.n	80057e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005778:	4b34      	ldr	r3, [pc, #208]	; (800584c <HAL_RCC_OscConfig+0x244>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fe ffef 	bl	8004760 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005786:	f7fe ffeb 	bl	8004760 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e1a8      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005798:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a4:	4b28      	ldr	r3, [pc, #160]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4925      	ldr	r1, [pc, #148]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]
 80057b8:	e015      	b.n	80057e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <HAL_RCC_OscConfig+0x244>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fe ffce 	bl	8004760 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057c8:	f7fe ffca 	bl	8004760 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e187      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d036      	beq.n	8005860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057fa:	4b15      	ldr	r3, [pc, #84]	; (8005850 <HAL_RCC_OscConfig+0x248>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fe ffae 	bl	8004760 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005808:	f7fe ffaa 	bl	8004760 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e167      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_OscConfig+0x240>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x200>
 8005826:	e01b      	b.n	8005860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005828:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_OscConfig+0x248>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582e:	f7fe ff97 	bl	8004760 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005834:	e00e      	b.n	8005854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005836:	f7fe ff93 	bl	8004760 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d907      	bls.n	8005854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e150      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
 8005848:	40023800 	.word	0x40023800
 800584c:	42470000 	.word	0x42470000
 8005850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005854:	4b88      	ldr	r3, [pc, #544]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ea      	bne.n	8005836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8097 	beq.w	800599c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005872:	4b81      	ldr	r3, [pc, #516]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	4b7d      	ldr	r3, [pc, #500]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a7c      	ldr	r2, [pc, #496]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b7a      	ldr	r3, [pc, #488]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589e:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058aa:	4b74      	ldr	r3, [pc, #464]	; (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a73      	ldr	r2, [pc, #460]	; (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fe ff53 	bl	8004760 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fe ff4f 	bl	8004760 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e10c      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b6a      	ldr	r3, [pc, #424]	; (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x2ea>
 80058e4:	4b64      	ldr	r3, [pc, #400]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	4a63      	ldr	r2, [pc, #396]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6713      	str	r3, [r2, #112]	; 0x70
 80058f0:	e01c      	b.n	800592c <HAL_RCC_OscConfig+0x324>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x30c>
 80058fa:	4b5f      	ldr	r3, [pc, #380]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	4a5e      	ldr	r2, [pc, #376]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	6713      	str	r3, [r2, #112]	; 0x70
 8005906:	4b5c      	ldr	r3, [pc, #368]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	4a5b      	ldr	r2, [pc, #364]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6713      	str	r3, [r2, #112]	; 0x70
 8005912:	e00b      	b.n	800592c <HAL_RCC_OscConfig+0x324>
 8005914:	4b58      	ldr	r3, [pc, #352]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	4a57      	ldr	r2, [pc, #348]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	6713      	str	r3, [r2, #112]	; 0x70
 8005920:	4b55      	ldr	r3, [pc, #340]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a54      	ldr	r2, [pc, #336]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005926:	f023 0304 	bic.w	r3, r3, #4
 800592a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fe ff14 	bl	8004760 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593a:	e00a      	b.n	8005952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593c:	f7fe ff10 	bl	8004760 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	; 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0cb      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	4b49      	ldr	r3, [pc, #292]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0ee      	beq.n	800593c <HAL_RCC_OscConfig+0x334>
 800595e:	e014      	b.n	800598a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005960:	f7fe fefe 	bl	8004760 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005966:	e00a      	b.n	800597e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005968:	f7fe fefa 	bl	8004760 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e0b5      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597e:	4b3e      	ldr	r3, [pc, #248]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ee      	bne.n	8005968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005990:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80a1 	beq.w	8005ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059a6:	4b34      	ldr	r3, [pc, #208]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d05c      	beq.n	8005a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d141      	bne.n	8005a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <HAL_RCC_OscConfig+0x478>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fe fece 	bl	8004760 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fe feca 	bl	8004760 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e087      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	491b      	ldr	r1, [pc, #108]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a10:	4b1b      	ldr	r3, [pc, #108]	; (8005a80 <HAL_RCC_OscConfig+0x478>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a16:	f7fe fea3 	bl	8004760 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1e:	f7fe fe9f 	bl	8004760 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e05c      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a30:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x416>
 8005a3c:	e054      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <HAL_RCC_OscConfig+0x478>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fe fe8c 	bl	8004760 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fe fe88 	bl	8004760 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e045      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x444>
 8005a6a:	e03d      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e038      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a84:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <HAL_RCC_OscConfig+0x4ec>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d028      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d121      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d11a      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	3b01      	subs	r3, #1
 8005ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800

08005af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0cc      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b68      	ldr	r3, [pc, #416]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d90c      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b63      	ldr	r3, [pc, #396]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0b8      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b4c:	4b59      	ldr	r3, [pc, #356]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a58      	ldr	r2, [pc, #352]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b64:	4b53      	ldr	r3, [pc, #332]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a52      	ldr	r2, [pc, #328]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b70:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	494d      	ldr	r1, [pc, #308]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d044      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d119      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d107      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	4b3f      	ldr	r3, [pc, #252]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e06f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc6:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e067      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 0203 	bic.w	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4934      	ldr	r1, [pc, #208]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be8:	f7fe fdba 	bl	8004760 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	e00a      	b.n	8005c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf0:	f7fe fdb6 	bl	8004760 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e04f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	4b2b      	ldr	r3, [pc, #172]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 020c 	and.w	r2, r3, #12
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d1eb      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d20c      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e032      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4c:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4916      	ldr	r1, [pc, #88]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	490e      	ldr	r1, [pc, #56]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c7e:	f000 f821 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	490a      	ldr	r1, [pc, #40]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	5ccb      	ldrb	r3, [r1, r3]
 8005c92:	fa22 f303 	lsr.w	r3, r2, r3
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fd1a 	bl	80046d8 <HAL_InitTick>

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40023c00 	.word	0x40023c00
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	080070f8 	.word	0x080070f8
 8005cbc:	2000000c 	.word	0x2000000c
 8005cc0:	20000010 	.word	0x20000010

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc8:	b094      	sub	sp, #80	; 0x50
 8005cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cdc:	4b79      	ldr	r3, [pc, #484]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d00d      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x40>
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	f200 80e1 	bhi.w	8005eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8005cf6:	e0db      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf8:	4b73      	ldr	r3, [pc, #460]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005cfc:	e0db      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cfe:	4b73      	ldr	r3, [pc, #460]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d02:	e0d8      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d04:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d063      	beq.n	8005de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1a:	4b6a      	ldr	r3, [pc, #424]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	099b      	lsrs	r3, r3, #6
 8005d20:	2200      	movs	r2, #0
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
 8005d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d36:	4622      	mov	r2, r4
 8005d38:	462b      	mov	r3, r5
 8005d3a:	f04f 0000 	mov.w	r0, #0
 8005d3e:	f04f 0100 	mov.w	r1, #0
 8005d42:	0159      	lsls	r1, r3, #5
 8005d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d48:	0150      	lsls	r0, r2, #5
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4621      	mov	r1, r4
 8005d50:	1a51      	subs	r1, r2, r1
 8005d52:	6139      	str	r1, [r7, #16]
 8005d54:	4629      	mov	r1, r5
 8005d56:	eb63 0301 	sbc.w	r3, r3, r1
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d68:	4659      	mov	r1, fp
 8005d6a:	018b      	lsls	r3, r1, #6
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d72:	4651      	mov	r1, sl
 8005d74:	018a      	lsls	r2, r1, #6
 8005d76:	4651      	mov	r1, sl
 8005d78:	ebb2 0801 	subs.w	r8, r2, r1
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d96:	4690      	mov	r8, r2
 8005d98:	4699      	mov	r9, r3
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	eb18 0303 	adds.w	r3, r8, r3
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	462b      	mov	r3, r5
 8005da4:	eb49 0303 	adc.w	r3, r9, r3
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005db6:	4629      	mov	r1, r5
 8005db8:	024b      	lsls	r3, r1, #9
 8005dba:	4621      	mov	r1, r4
 8005dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	024a      	lsls	r2, r1, #9
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	2200      	movs	r2, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dd4:	f7fa feb4 	bl	8000b40 <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4613      	mov	r3, r2
 8005dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de0:	e058      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de2:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	2200      	movs	r2, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	4611      	mov	r1, r2
 8005dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	2300      	movs	r3, #0
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
 8005df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	f04f 0000 	mov.w	r0, #0
 8005e04:	f04f 0100 	mov.w	r1, #0
 8005e08:	0159      	lsls	r1, r3, #5
 8005e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e0e:	0150      	lsls	r0, r2, #5
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4641      	mov	r1, r8
 8005e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e34:	ebb2 040a 	subs.w	r4, r2, sl
 8005e38:	eb63 050b 	sbc.w	r5, r3, fp
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	00eb      	lsls	r3, r5, #3
 8005e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e4a:	00e2      	lsls	r2, r4, #3
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	4643      	mov	r3, r8
 8005e52:	18e3      	adds	r3, r4, r3
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	464b      	mov	r3, r9
 8005e58:	eb45 0303 	adc.w	r3, r5, r3
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	028b      	lsls	r3, r1, #10
 8005e6e:	4621      	mov	r1, r4
 8005e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e74:	4621      	mov	r1, r4
 8005e76:	028a      	lsls	r2, r1, #10
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7e:	2200      	movs	r2, #0
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	61fa      	str	r2, [r7, #28]
 8005e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e88:	f7fa fe5a 	bl	8000b40 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4613      	mov	r3, r2
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eae:	e002      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3750      	adds	r7, #80	; 0x50
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	007a1200 	.word	0x007a1200

08005ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e041      	b.n	8005f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc fb84 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f000 fc0e 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e041      	b.n	8006004 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fc fbd5 	bl	8002744 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f000 fbbf 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e097      	b.n	8006150 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fc fa9f 	bl	8002578 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006050:	f023 0307 	bic.w	r3, r3, #7
 8006054:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f000 fb65 	bl	8006730 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4313      	orrs	r3, r2
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060ac:	f023 030c 	bic.w	r3, r3, #12
 80060b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	4313      	orrs	r3, r2
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	011a      	lsls	r2, r3, #4
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	031b      	lsls	r3, r3, #12
 80060dc:	4313      	orrs	r3, r2
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	4313      	orrs	r3, r2
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006168:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006178:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006180:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d110      	bne.n	80061aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d102      	bne.n	8006194 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800618e:	7b7b      	ldrb	r3, [r7, #13]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d001      	beq.n	8006198 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e069      	b.n	800626c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	e031      	b.n	800620e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d110      	bne.n	80061d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d102      	bne.n	80061bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061b6:	7b3b      	ldrb	r3, [r7, #12]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e055      	b.n	800626c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d0:	e01d      	b.n	800620e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d108      	bne.n	80061ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d105      	bne.n	80061ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061de:	7b7b      	ldrb	r3, [r7, #13]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d102      	bne.n	80061ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e4:	7b3b      	ldrb	r3, [r7, #12]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d001      	beq.n	80061ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e03e      	b.n	800626c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_TIM_Encoder_Start+0xc4>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d008      	beq.n	800622c <HAL_TIM_Encoder_Start+0xd4>
 800621a:	e00f      	b.n	800623c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fd6d 	bl	8006d04 <TIM_CCxChannelCmd>
      break;
 800622a:	e016      	b.n	800625a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2201      	movs	r2, #1
 8006232:	2104      	movs	r1, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fd65 	bl	8006d04 <TIM_CCxChannelCmd>
      break;
 800623a:	e00e      	b.n	800625a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2201      	movs	r2, #1
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fd5d 	bl	8006d04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	2104      	movs	r1, #4
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fd56 	bl	8006d04 <TIM_CCxChannelCmd>
      break;
 8006258:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0201 	orr.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b02      	cmp	r3, #2
 8006288:	d122      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b02      	cmp	r3, #2
 8006296:	d11b      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0202 	mvn.w	r2, #2
 80062a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa1b 	bl	80066f2 <HAL_TIM_IC_CaptureCallback>
 80062bc:	e005      	b.n	80062ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fa0d 	bl	80066de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fa1e 	bl	8006706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d122      	bne.n	8006324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d11b      	bne.n	8006324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0204 	mvn.w	r2, #4
 80062f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2202      	movs	r2, #2
 80062fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f9f1 	bl	80066f2 <HAL_TIM_IC_CaptureCallback>
 8006310:	e005      	b.n	800631e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9e3 	bl	80066de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f9f4 	bl	8006706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b08      	cmp	r3, #8
 8006330:	d122      	bne.n	8006378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b08      	cmp	r3, #8
 800633e:	d11b      	bne.n	8006378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0208 	mvn.w	r2, #8
 8006348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2204      	movs	r2, #4
 800634e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9c7 	bl	80066f2 <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9b9 	bl	80066de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f9ca 	bl	8006706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b10      	cmp	r3, #16
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b10      	cmp	r3, #16
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0210 	mvn.w	r2, #16
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2208      	movs	r2, #8
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f99d 	bl	80066f2 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f98f 	bl	80066de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9a0 	bl	8006706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d10e      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0201 	mvn.w	r2, #1
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f969 	bl	80066ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b80      	cmp	r3, #128	; 0x80
 8006404:	d10e      	bne.n	8006424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006410:	2b80      	cmp	r3, #128	; 0x80
 8006412:	d107      	bne.n	8006424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800641c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fd1c 	bl	8006e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d10e      	bne.n	8006450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d107      	bne.n	8006450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f965 	bl	800671a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	d10e      	bne.n	800647c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b20      	cmp	r3, #32
 800646a:	d107      	bne.n	800647c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0220 	mvn.w	r2, #32
 8006474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fce6 	bl	8006e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800649e:	2302      	movs	r3, #2
 80064a0:	e048      	b.n	8006534 <HAL_TIM_OC_ConfigChannel+0xb0>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b0c      	cmp	r3, #12
 80064ae:	d839      	bhi.n	8006524 <HAL_TIM_OC_ConfigChannel+0xa0>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064ed 	.word	0x080064ed
 80064bc:	08006525 	.word	0x08006525
 80064c0:	08006525 	.word	0x08006525
 80064c4:	08006525 	.word	0x08006525
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	08006525 	.word	0x08006525
 80064d0:	08006525 	.word	0x08006525
 80064d4:	08006525 	.word	0x08006525
 80064d8:	08006509 	.word	0x08006509
 80064dc:	08006525 	.word	0x08006525
 80064e0:	08006525 	.word	0x08006525
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006517 	.word	0x08006517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 f9bc 	bl	8006870 <TIM_OC1_SetConfig>
      break;
 80064f8:	e017      	b.n	800652a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fa25 	bl	8006950 <TIM_OC2_SetConfig>
      break;
 8006506:	e010      	b.n	800652a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa94 	bl	8006a3c <TIM_OC3_SetConfig>
      break;
 8006514:	e009      	b.n	800652a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fb01 	bl	8006b24 <TIM_OC4_SetConfig>
      break;
 8006522:	e002      	b.n	800652a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
      break;
 8006528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIM_ConfigClockSource+0x1c>
 8006554:	2302      	movs	r3, #2
 8006556:	e0b4      	b.n	80066c2 <HAL_TIM_ConfigClockSource+0x186>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006590:	d03e      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0xd4>
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006596:	f200 8087 	bhi.w	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 800659a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659e:	f000 8086 	beq.w	80066ae <HAL_TIM_ConfigClockSource+0x172>
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d87f      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d01a      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0xa6>
 80065ac:	2b70      	cmp	r3, #112	; 0x70
 80065ae:	d87b      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b60      	cmp	r3, #96	; 0x60
 80065b2:	d050      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x11a>
 80065b4:	2b60      	cmp	r3, #96	; 0x60
 80065b6:	d877      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b50      	cmp	r3, #80	; 0x50
 80065ba:	d03c      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0xfa>
 80065bc:	2b50      	cmp	r3, #80	; 0x50
 80065be:	d873      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d058      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x13a>
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d86f      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b30      	cmp	r3, #48	; 0x30
 80065ca:	d064      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065cc:	2b30      	cmp	r3, #48	; 0x30
 80065ce:	d86b      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d060      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d867      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05c      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d05a      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065e0:	e062      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6899      	ldr	r1, [r3, #8]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f000 fb67 	bl	8006cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	609a      	str	r2, [r3, #8]
      break;
 800660e:	e04f      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f000 fb50 	bl	8006cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006632:	609a      	str	r2, [r3, #8]
      break;
 8006634:	e03c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	461a      	mov	r2, r3
 8006644:	f000 fac4 	bl	8006bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2150      	movs	r1, #80	; 0x50
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fb1d 	bl	8006c8e <TIM_ITRx_SetConfig>
      break;
 8006654:	e02c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6859      	ldr	r1, [r3, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	461a      	mov	r2, r3
 8006664:	f000 fae3 	bl	8006c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2160      	movs	r1, #96	; 0x60
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fb0d 	bl	8006c8e <TIM_ITRx_SetConfig>
      break;
 8006674:	e01c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6859      	ldr	r1, [r3, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	461a      	mov	r2, r3
 8006684:	f000 faa4 	bl	8006bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2140      	movs	r1, #64	; 0x40
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fafd 	bl	8006c8e <TIM_ITRx_SetConfig>
      break;
 8006694:	e00c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f000 faf4 	bl	8006c8e <TIM_ITRx_SetConfig>
      break;
 80066a6:	e003      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
      break;
 80066ac:	e000      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a40      	ldr	r2, [pc, #256]	; (8006844 <TIM_Base_SetConfig+0x114>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674e:	d00f      	beq.n	8006770 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3d      	ldr	r2, [pc, #244]	; (8006848 <TIM_Base_SetConfig+0x118>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3c      	ldr	r2, [pc, #240]	; (800684c <TIM_Base_SetConfig+0x11c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_Base_SetConfig+0x40>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a3b      	ldr	r2, [pc, #236]	; (8006850 <TIM_Base_SetConfig+0x120>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_Base_SetConfig+0x40>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a3a      	ldr	r2, [pc, #232]	; (8006854 <TIM_Base_SetConfig+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d108      	bne.n	8006782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2f      	ldr	r2, [pc, #188]	; (8006844 <TIM_Base_SetConfig+0x114>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d02b      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006790:	d027      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2c      	ldr	r2, [pc, #176]	; (8006848 <TIM_Base_SetConfig+0x118>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d023      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2b      	ldr	r2, [pc, #172]	; (800684c <TIM_Base_SetConfig+0x11c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01f      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <TIM_Base_SetConfig+0x120>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01b      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a29      	ldr	r2, [pc, #164]	; (8006854 <TIM_Base_SetConfig+0x124>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d017      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a28      	ldr	r2, [pc, #160]	; (8006858 <TIM_Base_SetConfig+0x128>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a27      	ldr	r2, [pc, #156]	; (800685c <TIM_Base_SetConfig+0x12c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00f      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a26      	ldr	r2, [pc, #152]	; (8006860 <TIM_Base_SetConfig+0x130>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00b      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a25      	ldr	r2, [pc, #148]	; (8006864 <TIM_Base_SetConfig+0x134>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d007      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a24      	ldr	r2, [pc, #144]	; (8006868 <TIM_Base_SetConfig+0x138>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a23      	ldr	r2, [pc, #140]	; (800686c <TIM_Base_SetConfig+0x13c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d108      	bne.n	80067f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0a      	ldr	r2, [pc, #40]	; (8006844 <TIM_Base_SetConfig+0x114>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_Base_SetConfig+0xf8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <TIM_Base_SetConfig+0x124>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d103      	bne.n	8006830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	615a      	str	r2, [r3, #20]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40010000 	.word	0x40010000
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800
 8006850:	40000c00 	.word	0x40000c00
 8006854:	40010400 	.word	0x40010400
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800
 8006864:	40001800 	.word	0x40001800
 8006868:	40001c00 	.word	0x40001c00
 800686c:	40002000 	.word	0x40002000

08006870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0201 	bic.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f023 0302 	bic.w	r3, r3, #2
 80068b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a20      	ldr	r2, [pc, #128]	; (8006948 <TIM_OC1_SetConfig+0xd8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_OC1_SetConfig+0x64>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a1f      	ldr	r2, [pc, #124]	; (800694c <TIM_OC1_SetConfig+0xdc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d10c      	bne.n	80068ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0308 	bic.w	r3, r3, #8
 80068da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f023 0304 	bic.w	r3, r3, #4
 80068ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a15      	ldr	r2, [pc, #84]	; (8006948 <TIM_OC1_SetConfig+0xd8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_OC1_SetConfig+0x8e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <TIM_OC1_SetConfig+0xdc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d111      	bne.n	8006922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800690c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	621a      	str	r2, [r3, #32]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	40010000 	.word	0x40010000
 800694c:	40010400 	.word	0x40010400

08006950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f023 0210 	bic.w	r2, r3, #16
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0320 	bic.w	r3, r3, #32
 800699a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a22      	ldr	r2, [pc, #136]	; (8006a34 <TIM_OC2_SetConfig+0xe4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC2_SetConfig+0x68>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a21      	ldr	r2, [pc, #132]	; (8006a38 <TIM_OC2_SetConfig+0xe8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d10d      	bne.n	80069d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a17      	ldr	r2, [pc, #92]	; (8006a34 <TIM_OC2_SetConfig+0xe4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC2_SetConfig+0x94>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <TIM_OC2_SetConfig+0xe8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d113      	bne.n	8006a0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010000 	.word	0x40010000
 8006a38:	40010400 	.word	0x40010400

08006a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0303 	bic.w	r3, r3, #3
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <TIM_OC3_SetConfig+0xe0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_OC3_SetConfig+0x66>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <TIM_OC3_SetConfig+0xe4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d10d      	bne.n	8006abe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a16      	ldr	r2, [pc, #88]	; (8006b1c <TIM_OC3_SetConfig+0xe0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_OC3_SetConfig+0x92>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a15      	ldr	r2, [pc, #84]	; (8006b20 <TIM_OC3_SetConfig+0xe4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d113      	bne.n	8006af6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	621a      	str	r2, [r3, #32]
}
 8006b10:	bf00      	nop
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40010400 	.word	0x40010400

08006b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	031b      	lsls	r3, r3, #12
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a12      	ldr	r2, [pc, #72]	; (8006bc8 <TIM_OC4_SetConfig+0xa4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_OC4_SetConfig+0x68>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a11      	ldr	r2, [pc, #68]	; (8006bcc <TIM_OC4_SetConfig+0xa8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d109      	bne.n	8006ba0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40010400 	.word	0x40010400

08006bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f023 0201 	bic.w	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f023 030a 	bic.w	r3, r3, #10
 8006c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f023 0210 	bic.w	r2, r3, #16
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	031b      	lsls	r3, r3, #12
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f043 0307 	orr.w	r3, r3, #7
 8006cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	021a      	lsls	r2, r3, #8
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	609a      	str	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2201      	movs	r2, #1
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1a      	ldr	r2, [r3, #32]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	401a      	ands	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1a      	ldr	r2, [r3, #32]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e05a      	b.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a21      	ldr	r2, [pc, #132]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d01d      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1a      	ldr	r2, [pc, #104]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a18      	ldr	r2, [pc, #96]	; (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a17      	ldr	r2, [pc, #92]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10c      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40010400 	.word	0x40010400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40001800 	.word	0x40001800

08006e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <memset>:
 8006e70:	4402      	add	r2, r0
 8006e72:	4603      	mov	r3, r0
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d100      	bne.n	8006e7a <memset+0xa>
 8006e78:	4770      	bx	lr
 8006e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7e:	e7f9      	b.n	8006e74 <memset+0x4>

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000064 	.word	0x20000064

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 f91e 	bl	80070e0 <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08007110 	.word	0x08007110
 8006ec8:	08007110 	.word	0x08007110
 8006ecc:	08007110 	.word	0x08007110
 8006ed0:	08007114 	.word	0x08007114

08006ed4 <sqrt>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	ed2d 8b02 	vpush	{d8}
 8006eda:	ec55 4b10 	vmov	r4, r5, d0
 8006ede:	f000 f825 	bl	8006f2c <__ieee754_sqrt>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	eeb0 8a40 	vmov.f32	s16, s0
 8006eee:	eef0 8a60 	vmov.f32	s17, s1
 8006ef2:	f7f9 fdbf 	bl	8000a74 <__aeabi_dcmpun>
 8006ef6:	b990      	cbnz	r0, 8006f1e <sqrt+0x4a>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2300      	movs	r3, #0
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f7f9 fd90 	bl	8000a24 <__aeabi_dcmplt>
 8006f04:	b158      	cbz	r0, 8006f1e <sqrt+0x4a>
 8006f06:	f7ff ffbb 	bl	8006e80 <__errno>
 8006f0a:	2321      	movs	r3, #33	; 0x21
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	4610      	mov	r0, r2
 8006f14:	4619      	mov	r1, r3
 8006f16:	f7f9 fc3d 	bl	8000794 <__aeabi_ddiv>
 8006f1a:	ec41 0b18 	vmov	d8, r0, r1
 8006f1e:	eeb0 0a48 	vmov.f32	s0, s16
 8006f22:	eef0 0a68 	vmov.f32	s1, s17
 8006f26:	ecbd 8b02 	vpop	{d8}
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}

08006f2c <__ieee754_sqrt>:
 8006f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	ec55 4b10 	vmov	r4, r5, d0
 8006f34:	4e67      	ldr	r6, [pc, #412]	; (80070d4 <__ieee754_sqrt+0x1a8>)
 8006f36:	43ae      	bics	r6, r5
 8006f38:	ee10 0a10 	vmov	r0, s0
 8006f3c:	ee10 2a10 	vmov	r2, s0
 8006f40:	4629      	mov	r1, r5
 8006f42:	462b      	mov	r3, r5
 8006f44:	d10d      	bne.n	8006f62 <__ieee754_sqrt+0x36>
 8006f46:	f7f9 fafb 	bl	8000540 <__aeabi_dmul>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4620      	mov	r0, r4
 8006f50:	4629      	mov	r1, r5
 8006f52:	f7f9 f93f 	bl	80001d4 <__adddf3>
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	ec45 4b10 	vmov	d0, r4, r5
 8006f5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	dc0b      	bgt.n	8006f7e <__ieee754_sqrt+0x52>
 8006f66:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006f6a:	4326      	orrs	r6, r4
 8006f6c:	d0f5      	beq.n	8006f5a <__ieee754_sqrt+0x2e>
 8006f6e:	b135      	cbz	r5, 8006f7e <__ieee754_sqrt+0x52>
 8006f70:	f7f9 f92e 	bl	80001d0 <__aeabi_dsub>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	f7f9 fc0c 	bl	8000794 <__aeabi_ddiv>
 8006f7c:	e7eb      	b.n	8006f56 <__ieee754_sqrt+0x2a>
 8006f7e:	1509      	asrs	r1, r1, #20
 8006f80:	f000 808d 	beq.w	800709e <__ieee754_sqrt+0x172>
 8006f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f88:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f90:	07c9      	lsls	r1, r1, #31
 8006f92:	bf5c      	itt	pl
 8006f94:	005b      	lslpl	r3, r3, #1
 8006f96:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f9e:	bf58      	it	pl
 8006fa0:	0052      	lslpl	r2, r2, #1
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006fa8:	1076      	asrs	r6, r6, #1
 8006faa:	0052      	lsls	r2, r2, #1
 8006fac:	f04f 0e16 	mov.w	lr, #22
 8006fb0:	46ac      	mov	ip, r5
 8006fb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb6:	eb0c 0001 	add.w	r0, ip, r1
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	bfde      	ittt	le
 8006fbe:	1a1b      	suble	r3, r3, r0
 8006fc0:	eb00 0c01 	addle.w	ip, r0, r1
 8006fc4:	186d      	addle	r5, r5, r1
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	f1be 0e01 	subs.w	lr, lr, #1
 8006fcc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006fd0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006fd4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006fd8:	d1ed      	bne.n	8006fb6 <__ieee754_sqrt+0x8a>
 8006fda:	4674      	mov	r4, lr
 8006fdc:	2720      	movs	r7, #32
 8006fde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006fe2:	4563      	cmp	r3, ip
 8006fe4:	eb01 000e 	add.w	r0, r1, lr
 8006fe8:	dc02      	bgt.n	8006ff0 <__ieee754_sqrt+0xc4>
 8006fea:	d113      	bne.n	8007014 <__ieee754_sqrt+0xe8>
 8006fec:	4290      	cmp	r0, r2
 8006fee:	d811      	bhi.n	8007014 <__ieee754_sqrt+0xe8>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	eb00 0e01 	add.w	lr, r0, r1
 8006ff6:	da57      	bge.n	80070a8 <__ieee754_sqrt+0x17c>
 8006ff8:	f1be 0f00 	cmp.w	lr, #0
 8006ffc:	db54      	blt.n	80070a8 <__ieee754_sqrt+0x17c>
 8006ffe:	f10c 0801 	add.w	r8, ip, #1
 8007002:	eba3 030c 	sub.w	r3, r3, ip
 8007006:	4290      	cmp	r0, r2
 8007008:	bf88      	it	hi
 800700a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800700e:	1a12      	subs	r2, r2, r0
 8007010:	440c      	add	r4, r1
 8007012:	46c4      	mov	ip, r8
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	3f01      	subs	r7, #1
 8007018:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800701c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007020:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007024:	d1dd      	bne.n	8006fe2 <__ieee754_sqrt+0xb6>
 8007026:	4313      	orrs	r3, r2
 8007028:	d01b      	beq.n	8007062 <__ieee754_sqrt+0x136>
 800702a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80070d8 <__ieee754_sqrt+0x1ac>
 800702e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80070dc <__ieee754_sqrt+0x1b0>
 8007032:	e9da 0100 	ldrd	r0, r1, [sl]
 8007036:	e9db 2300 	ldrd	r2, r3, [fp]
 800703a:	f7f9 f8c9 	bl	80001d0 <__aeabi_dsub>
 800703e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4640      	mov	r0, r8
 8007048:	4649      	mov	r1, r9
 800704a:	f7f9 fcf5 	bl	8000a38 <__aeabi_dcmple>
 800704e:	b140      	cbz	r0, 8007062 <__ieee754_sqrt+0x136>
 8007050:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007054:	e9da 0100 	ldrd	r0, r1, [sl]
 8007058:	e9db 2300 	ldrd	r2, r3, [fp]
 800705c:	d126      	bne.n	80070ac <__ieee754_sqrt+0x180>
 800705e:	3501      	adds	r5, #1
 8007060:	463c      	mov	r4, r7
 8007062:	106a      	asrs	r2, r5, #1
 8007064:	0863      	lsrs	r3, r4, #1
 8007066:	07e9      	lsls	r1, r5, #31
 8007068:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800706c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007070:	bf48      	it	mi
 8007072:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007076:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800707a:	461c      	mov	r4, r3
 800707c:	e76d      	b.n	8006f5a <__ieee754_sqrt+0x2e>
 800707e:	0ad3      	lsrs	r3, r2, #11
 8007080:	3815      	subs	r0, #21
 8007082:	0552      	lsls	r2, r2, #21
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0fa      	beq.n	800707e <__ieee754_sqrt+0x152>
 8007088:	02dc      	lsls	r4, r3, #11
 800708a:	d50a      	bpl.n	80070a2 <__ieee754_sqrt+0x176>
 800708c:	f1c1 0420 	rsb	r4, r1, #32
 8007090:	fa22 f404 	lsr.w	r4, r2, r4
 8007094:	1e4d      	subs	r5, r1, #1
 8007096:	408a      	lsls	r2, r1
 8007098:	4323      	orrs	r3, r4
 800709a:	1b41      	subs	r1, r0, r5
 800709c:	e772      	b.n	8006f84 <__ieee754_sqrt+0x58>
 800709e:	4608      	mov	r0, r1
 80070a0:	e7f0      	b.n	8007084 <__ieee754_sqrt+0x158>
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	3101      	adds	r1, #1
 80070a6:	e7ef      	b.n	8007088 <__ieee754_sqrt+0x15c>
 80070a8:	46e0      	mov	r8, ip
 80070aa:	e7aa      	b.n	8007002 <__ieee754_sqrt+0xd6>
 80070ac:	f7f9 f892 	bl	80001d4 <__adddf3>
 80070b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fcb2 	bl	8000a24 <__aeabi_dcmplt>
 80070c0:	b120      	cbz	r0, 80070cc <__ieee754_sqrt+0x1a0>
 80070c2:	1ca0      	adds	r0, r4, #2
 80070c4:	bf08      	it	eq
 80070c6:	3501      	addeq	r5, #1
 80070c8:	3402      	adds	r4, #2
 80070ca:	e7ca      	b.n	8007062 <__ieee754_sqrt+0x136>
 80070cc:	3401      	adds	r4, #1
 80070ce:	f024 0401 	bic.w	r4, r4, #1
 80070d2:	e7c6      	b.n	8007062 <__ieee754_sqrt+0x136>
 80070d4:	7ff00000 	.word	0x7ff00000
 80070d8:	20000068 	.word	0x20000068
 80070dc:	20000070 	.word	0x20000070

080070e0 <_init>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr

080070ec <_fini>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr
